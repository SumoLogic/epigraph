/*
 * Copyright 2017 Sumo Logic
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="ws.epigraph.url.parser.UrlParser"

  elementTypeHolderClass="ws.epigraph.url.lexer.UrlElementTypes"
  elementTypePrefix="U_"
  elementTypeClass="ws.epigraph.url.lexer.UrlElementType"
  tokenTypeClass="ws.epigraph.url.lexer.UrlElementType"

  psiClassPrefix="Url"
  psiImplClassSuffix="Impl"
  psiPackage="ws.epigraph.url.parser.psi"
  psiImplPackage="ws.epigraph.url.parser.psi.impl"
  psiImplUtilClass="ws.epigraph.url.parser.psi.impl.UrlPsiImplUtil"

  generateTokenAccessors=true

  tokens=[
    LIST = 'list'
    MAP = 'map'
    DEFAULT = 'default'

    COLON = ':'
    DOT = '.'
    COMMA = ','
    SEMICOLON = ';'
    EQ = '='
    CURLY_LEFT = '{'
    CURLY_RIGHT = '}'
    BRACKET_LEFT = '['
    BRACKET_RIGHT = ']'
    TILDA = '~'
    STAR = '*'
    PLUS = '+'
    AT = '@'
    HASH = '#'
    UNDERSCORE = '_'
    BANG = '!'
    DOLLAR = '$'
    QMARK = '?'
    AMP = '&'
    PARAM_NAME = 'regexp:(\p{Alnum}+)'

    space='regexp:\s+'
    block_comment='regexp:/\*((?<!\*/)(.|\n))*'

    id = 'regexp:(\p{Alpha}\p{Alnum}*)|(`([^`]*)`)'

    // for data lang
    NULL = 'null'
    SLASH = '/'
    PAREN_LEFT = '('
    PAREN_RIGHT = ')'
    ANGLE_LEFT = '<'
    ANGLE_RIGHT = '>'

    number="regexp:([0-9])+"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    boolean="regexp:true|false"
  ]
}

root ::= url

// either quoted or unquoted id
qid ::= id {
   methods=[getName getCanonicalName]
}

qnSegment ::= qid
qn ::= qnSegment ('.' qnSegment)* {
  methods=[getQn]
}

typeRef ::= qnTypeRef | anonList | anonMap {name="type"}
qnTypeRef ::= qn { extends=typeRef }

anonList ::= 'list' '[' valueTypeRef ']' {pin=1 extends=typeRef }
anonMap ::= 'map' '[' typeRef ',' valueTypeRef ']' {pin=1 extends=typeRef }

valueTypeRef ::= typeRef defaultOverride?
defaultOverride ::= 'default' varTagRef {pin=1}
varTagRef ::= qid

annotation ::= qid '=' dataValue {
  name="custom annotation"
  pin = 2
}

tagName ::= qid

// ============= url =============

// todo get rid of requestParms?

// reqTrunkFieldProjection contains (optional) path followed by
// - output projection for read operation ( `outputProjection` should not be present in this case )
// - input projection for create/update/custom operations
// - delete projection for delete operation
url ::= '/' '+'? qid reqTrunkFieldProjection outputProjection? requestParams

outputProjection ::= '>' '+'? reqTrunkFieldProjection { pin = 1 name = "output projection" }

private requestParams ::= requestParam*
requestParam ::= ('?' | '&') PARAM_NAME '=' datum {  // ? vs & nonsense is sorted out in the UrlRequestPsiParser
  pin = 1
  name = "request parameter"
  recoverWhile = requestParamRecover
}
private requestParamRecover ::= ! ( '?' | '&' )


// ============= req output projection =============

reqParam ::= ';' qid '=' datum // todo attach input projection too?
reqAnnotation ::= '!' annotation
private reqParamsAndAnnotations ::= ( reqParam | reqAnnotation )*

// req path --------------------------------------------------------

// no tails, no branching, no meta
// keep syntax in sync with req*Trunk*

// used by (client) request builders
reqEntityPath ::= ( ':' tagName)? reqModelPath

reqModelPath ::= reqParamsAndAnnotations? ( reqRecordModelPath | reqMapModelPath )?

// req record path
reqRecordModelPath ::= '/' reqFieldPathEntry {pin=2}
reqFieldPathEntry ::= qid reqFieldPath
reqFieldPath ::= /* reqParamsAndAnnotations */ reqEntityPath {pin=1}

// req map path
reqMapModelPath ::= '/' reqTrunkKeyProjection reqEntityPath {pin=2}

// req projection --------------------------------------------------------
// this is based on op projection from schema.bnf

reqAll ::= '.' '.' '.' { pin = 1 }
reqStarTagProjection ::= ':' ( reqAll | '(' reqAll ')' ) // all tags with empty contents

reqModelMeta ::= '@' '+'? reqComaModelProjection { pin = 1 } // no params/annotations on meta?

reqEntityPolymorphicTail ::= ':' '~' ( reqEntitySingleTail | reqEntityMultiTail ) {pin=2}
reqEntitySingleTail ::= typeRef reqComaEntityProjection
reqEntityMultiTail ::= '(' (reqEntityMultiTailItem ','?)* ')' {pin=1}
reqEntityMultiTailItem ::= typeRef reqComaEntityProjection

// req projection consists of two parts: trunk and coma. Trunk can't have any branching, i.e. only
// singular tags and fields are allowed in var and record projections. Coma can contain branching

// req output trunk part

reqTrunkEntityProjection ::= reqNamedTrunkEntityProjection | reqUnnamedOrRefTrunkEntityProjection
reqUnnamedOrRefTrunkEntityProjection ::= reqTrunkEntityProjectionRef | reqUnnamedTrunkEntityProjection
reqNamedTrunkEntityProjection ::= '$' qid '=' reqUnnamedOrRefTrunkEntityProjection {pin = 3}
reqTrunkEntityProjectionRef ::= '$' qid {pin = 1}
reqUnnamedTrunkEntityProjection ::= ( reqStarTagProjection
                                    | reqComaMultiTagProjection
                                    | reqTrunkSingleTagProjection
                                    ) reqEntityPolymorphicTail?

reqTrunkSingleTagProjection ::= ( ( ':' '+'? tagName ) | '+' )? reqModelMeta? reqTrunkModelProjectionWithProperties

private reqTrunkModelProjectionWithProperties ::= reqParamsAndAnnotations reqTrunkModelProjection

reqTrunkModelProjection ::= ( reqTrunkRecordModelProjection // no tails on paths
                            | reqTrunkMapModelProjection
                            | ( reqComaRecordModelProjection reqModelPolymorphicTail? )
                            | ( reqComaMapModelProjection reqModelPolymorphicTail? )
                            | ( reqComaListModelProjection reqModelPolymorphicTail? )
                            )? {
   extends = reqComaModelProjection
}

reqTrunkRecordModelProjection ::= '/' '+'? qid reqTrunkFieldProjection {pin=3}
reqTrunkFieldProjection ::= /* reqParamsAndAnnotations */ reqTrunkEntityProjection

reqTrunkMapModelProjection ::= '/' reqTrunkKeyProjection '+'? reqTrunkEntityProjection
private reqTrunkKeyProjection ::= datum ( '[' reqParamsAndAnnotations ']' )? {pin=1}

// req output coma part

reqComaEntityProjection ::= reqNamedComaEntityProjection | reqUnnamedOrRefComaEntityProjection
reqUnnamedOrRefComaEntityProjection ::= reqComaEntityProjectionRef | reqUnnamedComaEntityProjection
reqNamedComaEntityProjection ::= '$' qid '=' reqUnnamedOrRefComaEntityProjection {pin = 3}
reqComaEntityProjectionRef ::= '$' qid {pin = 1}
reqUnnamedComaEntityProjection ::= ( reqStarTagProjection
                                      | reqComaMultiTagProjection
                                      | reqComaSingleTagProjection
                                      ) reqEntityPolymorphicTail?
private reqBracedComaEntityProjection ::= '(' reqComaEntityProjection ')'

reqComaSingleTagProjection ::= ( ( ':' '+'? tagName) | '+' )? reqComaModelProjectionWithProperties
reqComaMultiTagProjection ::= ':' '(' (reqComaMultiTagProjectionItem ','?)* ')' {pin=2}
reqComaMultiTagProjectionItem ::= '+'? tagName reqComaModelProjectionWithProperties

//
reqModelPolymorphicTail ::= '~' ( reqModelSingleTail | reqModelMultiTail ) // {pin=1}
reqModelSingleTail ::= '+'? typeRef reqComaModelProjectionWithProperties
reqModelMultiTail ::= '(' (reqModelMultiTailItem ','?)* ')' {pin=1}
reqModelMultiTailItem ::= '+'? typeRef reqComaModelProjectionWithProperties

private reqComaModelProjectionWithProperties ::= reqParamsAndAnnotations reqComaModelProjection reqModelMeta?

reqComaModelProjection ::= ( ( reqComaRecordModelProjection
                             | reqComaListModelProjection
                             | reqComaMapModelProjection
                             ) reqModelPolymorphicTail ?
                           )?

// req output record
reqComaRecordModelProjection ::= '(' ( reqAll | ( (reqComaFieldProjection ','?)* ) ) ')' { pin=1 }
reqComaFieldProjection ::= '+'? qid /* reqParamsAndAnnotations */ reqComaEntityProjection

// req output list
reqComaListModelProjection ::= '*' '+'? ( ( reqBracedComaEntityProjection | reqComaEntityProjection ) )? { pin=1 }

// req output map
// NB: can't get rid of optional braces because they are needed to disambiguate model tails for maps/lists (map vs map item tails)
reqComaMapModelProjection ::= reqComaKeysProjection '+'? ( ( reqBracedComaEntityProjection | reqComaEntityProjection ) )?
reqComaKeysProjection ::= '[' ( '*' | ( ( reqComaKeyProjection ','? )* ) ) ']' {pin=1}
reqComaKeyProjection ::= datum reqParamsAndAnnotations

// ============= data language =============
// please keep in sync with data language from schema.bnf

dataValue ::= data | datum
private dataTypeSpec ::= typeRef

data ::= dataTypeSpec? '<' dataEntry* '>' {pin=2}
dataEntry ::= qid ':' datum ','? {pin=2 recoverWhile=dataValueRecover}

// add metadata support?
datum ::= recordDatum | mapDatum | listDatum | primitiveDatum | enumDatum | nullDatum

recordDatum ::= dataTypeSpec? '{' recordDatumEntry* '}' {pin=2 extends=datum}
recordDatumEntry ::= qid ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

mapDatum ::= dataTypeSpec? '(' mapDatumEntry* ')' {pin=2 extends=datum}
mapDatumEntry ::= datum ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

listDatum ::= dataTypeSpec? '[' (dataValue ','?)* ']' {pin=2 extends=datum}

primitiveDatum ::= (dataTypeSpec '@')? (string | number | boolean) {pin=2 extends=datum} // todo only differentiate string/non-string?

enumDatum ::= '#' qid {extends=datum pin=1}

nullDatum ::= (dataTypeSpec '@')? 'null' {pin=2 extends=datum}

private dataValueRecover ::= ! ( '#' | qid | primitiveDatum | '}' | ')' | '>' | ']' | ',' | '?' )
