/*
 * Copyright 2016 Sumo Logic
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="ws.epigraph.url.parser.UrlParser"

  elementTypeHolderClass="ws.epigraph.url.lexer.UrlElementTypes"
  elementTypePrefix="U_"
  elementTypeClass="ws.epigraph.url.lexer.UrlElementType"
  tokenTypeClass="ws.epigraph.url.lexer.UrlElementType"

  psiClassPrefix="Url"
  psiImplClassSuffix="Impl"
  psiPackage="ws.epigraph.url.parser.psi"
  psiImplPackage="ws.epigraph.url.parser.psi.impl"
  psiImplUtilClass="ws.epigraph.url.parser.psi.impl.UrlPsiImplUtil"

  generateTokenAccessors=true

  tokens=[
    LIST = 'list'
    MAP = 'map'
    DEFAULT = 'default'

    COLON = ':'
    DOT = '.'
    COMMA = ','
    SEMICOLON = ';'
    EQ = '='
    CURLY_LEFT = '{'
    CURLY_RIGHT = '}'
    BRACKET_LEFT = '['
    BRACKET_RIGHT = ']'
    TILDA = '~'
    STAR = '*'
    PLUS = '+'
    AT = '@'
    HASH = '#'
    UNDERSCORE = '_'
    BANG = '!'
    QMARK = '?'
    AMP = '&'
    PARAM_NAME = 'regexp:(\p{Alnum}+)'

    space='regexp:\s+'
    block_comment='regexp:/\*((?<!\*/)(.|\n))*'

    id = 'regexp:(\p{Alpha}\p{Alnum}*)|(`([^`]*)`)'

    // for data lang
    NULL = 'null'
    SLASH = '/'
    PAREN_LEFT = '('
    PAREN_RIGHT = ')'
    ANGLE_LEFT = '<'
    ANGLE_RIGHT = '>'

    number="regexp:([0-9])+"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    boolean="regexp:true|false"
  ]
}

root ::= url

// either quoted or unquoted id
qid ::= id {
   methods=[getName getCanonicalName]
}

qnSegment ::= qid
qn ::= qnSegment ('.' qnSegment)* {
  methods=[getQn]
}

typeRef ::= qnTypeRef | anonList | anonMap {name="type"}
qnTypeRef ::= qn { extends=typeRef }

anonList ::= 'list' '[' valueTypeRef ']' {pin=1 extends=typeRef }
anonMap ::= 'map' '[' typeRef ',' valueTypeRef ']' {pin=1 extends=typeRef }

valueTypeRef ::= typeRef defaultOverride?
defaultOverride ::= 'default' varTagRef {pin=1}
varTagRef ::= qid

annotation ::= qid '=' dataValue {
  name="custom annotation"
  pin = 2
}

tagName ::= qid

// ============= url =============

// this one isn't used actually, sub-parsers for read/create/... are used instead
url ::= readUrl | createUrl | updateUrl | deleteUrl | customUrl

// real entry points:
readUrl ::= '/' qid reqOutputTrunkFieldProjection requestParams { // reqFieldPath is part of output projection, will be extracted by psi parser
  extends = "url"
}
createUrl ::= '/' qid reqFieldPath ('>' reqOutputTrunkFieldProjection)? requestParams {
  extends = "url"
}
updateUrl ::= '/' qid reqFieldPath ('<' '+'? reqUpdateFieldProjection)? ('>' reqOutputTrunkFieldProjection)? requestParams {
  extends = "url"
}
deleteUrl ::= '/' qid reqFieldPath ('<' reqDeleteFieldProjection)? ('>' reqOutputTrunkFieldProjection)? requestParams {
  extends = "url"
}
customUrl ::= '/' qid reqFieldPath ('>' reqOutputTrunkFieldProjection)? requestParams {
  extends = "url"
}

// todo should be:
// customUrl ::= '/' qid reqFieldPath ('<' reqInputFieldProjection)? ('>' reqOutputTrunkFieldProjection)? requestParams
// requires req input projections implemented


private requestParams ::= requestParam*
requestParam ::= ('?' | '&') PARAM_NAME '=' datum {  // ? vs & nonsense is sorted out in the UrlRequestPsiParser
  pin = 1
  name = "request parameter"
  recoverWhile = requestParamRecover
}
private requestParamRecover ::= ! ( '?' | '&' )


// ============= req output projection =============

reqParam ::= ';' qid '=' datum // todo attach reqInputProjection too?
reqAnnotation ::= '!' annotation
private reqParamsAndAnnotations ::= ( reqParam | reqAnnotation )* 

// req path --------------------------------------------------------

// no tails, no branching, no meta

// :tag / field / 1 / field
// :tag ;foo = 'abc' / field ;foo = 'cde' / 1 ;foo = 'def'

reqVarPath ::= ( ':' tagName)? reqParamsAndAnnotations reqModelPath

reqModelPath ::= ( reqRecordModelPath
                 | reqMapModelPath
                 )?

// req record path
reqRecordModelPath ::= '/' reqFieldPathEntry {pin=2}
reqFieldPathEntry ::= qid reqFieldPath
reqFieldPath ::= reqParamsAndAnnotations reqVarPath {pin=1}

// req map path
reqMapModelPath ::= '/' reqOutputTrunkKeyProjection reqVarPath {pin=2}

// req output --------------------------------------------------------
// this is based on opInput from idl.bnf

reqOutputStarTagProjection ::= ':' '*' // all tags with empty contents

reqOutputModelMeta ::= '@' '+'? reqOutputComaModelProjection // no params/annotations on meta?

reqOutputVarPolymorphicTail ::= reqOutputVarSingleTail | reqOutputVarMultiTail
reqOutputVarSingleTail ::= '~' typeRef reqOutputComaVarProjection
reqOutputVarMultiTail ::= '~' '(' (reqOutputVarMultiTailItem ','?)* ')' {pin=2}
reqOutputVarMultiTailItem ::= typeRef reqOutputComaVarProjection

// req projection consists of two parts: trunk and coma. Trunk can't have any branching, i.e. only
// singular tags and fields are allowed in var and record projections. Coma can contain branching

// req output trunk part

reqOutputTrunkVarProjection ::= ( reqOutputStarTagProjection
                                | reqOutputComaMultiTagProjection
                                | reqOutputTrunkSingleTagProjection
                                ) reqOutputVarPolymorphicTail?

reqOutputTrunkSingleTagProjection ::= ( ':' '+'? tagName )? reqParamsAndAnnotations reqOutputTrunkModelProjection reqOutputModelMeta?

//

reqOutputTrunkModelProjection ::= ( reqOutputTrunkRecordModelProjection
                                  | reqOutputTrunkMapModelProjection
                                  | reqOutputComaRecordModelProjection
                                  | reqOutputComaMapModelProjection
                                  | reqOutputComaListModelProjection
                                  )? {
  extends = reqOutputComaModelProjection
}

reqOutputTrunkRecordModelProjection ::= '/' '+'? qid reqOutputTrunkFieldProjection {pin=3}
reqOutputTrunkFieldProjection ::= reqParamsAndAnnotations reqOutputTrunkVarProjection

reqOutputTrunkMapModelProjection ::= '/' reqOutputTrunkKeyProjection reqOutputTrunkVarProjection
private reqOutputTrunkKeyProjection ::= datum reqParamsAndAnnotations {pin=2}

// req output coma part

reqOutputComaVarProjection ::= ( reqOutputStarTagProjection
                               | reqOutputComaMultiTagProjection
                               | reqOutputComaSingleTagProjection
                               ) reqOutputVarPolymorphicTail?

reqOutputComaSingleTagProjection ::= ( ':' '+'? tagName)? reqOutputComaTagProjectionItem
reqOutputComaMultiTagProjection ::= ':' '(' (reqOutputComaMultiTagProjectionItem ','?)* ')' {pin=2}
reqOutputComaMultiTagProjectionItem ::= '+'? tagName reqOutputComaTagProjectionItem
private reqOutputComaTagProjectionItem ::= reqParamsAndAnnotations reqOutputComaModelProjection reqOutputModelMeta?
//

reqOutputComaModelProjection ::= ( reqOutputComaRecordModelProjection
                                 | reqOutputComaListModelProjection
                                 | reqOutputComaMapModelProjection
                                 )?

// req output record
reqOutputComaRecordModelProjection ::= '(' ( '*' | ( (reqOutputComaFieldProjection ','?)* ) ) ')' { pin=1 }
reqOutputComaFieldProjection ::= '+'? qid reqParamsAndAnnotations reqOutputComaVarProjection

// req output list
reqOutputComaListModelProjection ::= '*' ( '(' reqOutputComaVarProjection ')' )? { pin=1 }

// req output map
reqOutputComaMapModelProjection ::= reqOutputComaKeysProjection ( '(' reqOutputComaVarProjection ')' )?
reqOutputComaKeysProjection ::= ( '[' ( reqOutputComaKeyProjection ','? )* ']' ) | ( '[' '*' ']' ) // todo fix
reqOutputComaKeyProjection ::= datum reqParamsAndAnnotations

// req update --------------------------------------------------------

//reqUpdateModelMeta ::= '@' reqUpdateModelProjection // no params/annotations on meta?

reqUpdateVarPolymorphicTail ::= reqUpdateVarSingleTail | reqUpdateVarMultiTail
reqUpdateVarSingleTail ::= '~' typeRef reqUpdateVarProjection
reqUpdateVarMultiTail ::= '~' '(' (reqUpdateVarMultiTailItem ','?)* ')' {pin=2}
reqUpdateVarMultiTailItem ::= typeRef reqUpdateVarProjection

reqUpdateVarProjection ::= ( reqUpdateMultiTagProjection | reqUpdateSingleTagProjection ) reqUpdateVarPolymorphicTail?
reqUpdateSingleTagProjection ::= ( ':' '+'? tagName)? reqUpdateTagProjectionItem
reqUpdateMultiTagProjection ::= ':' '(' (reqUpdateMultiTagProjectionItem ','?)* ')' {pin=2}
reqUpdateMultiTagProjectionItem ::= '+'? tagName reqUpdateTagProjectionItem
private reqUpdateTagProjectionItem ::= reqParamsAndAnnotations reqUpdateModelProjection // reqUpdateModelMeta?
//

reqUpdateModelProjection ::= ( reqUpdateRecordModelProjection
                             | reqUpdateMapModelProjection
                             | reqUpdateListModelProjection
                             )?

reqUpdateRecordModelProjection ::= '(' (reqUpdateFieldProjectionEntry ','?)* ')' { pin=1 }
reqUpdateFieldProjectionEntry ::= '+'? qid reqUpdateFieldProjection
reqUpdateFieldProjection ::= reqParamsAndAnnotations reqUpdateVarProjection

reqUpdateListModelProjection ::= '*' ( '(' reqUpdateVarProjection ')' )? { pin=1 }

reqUpdateMapModelProjection ::= reqUpdateKeysProjection ( '(' reqUpdateVarProjection ')' )?
reqUpdateKeysProjection ::= '[' '+'? ']'

// req delete --------------------------------------------------------

// reqDeleteModelMeta ::= '@' '+'? reqDeleteModelProjection // no params/annotations on meta?

reqDeleteVarPolymorphicTail ::= reqDeleteVarSingleTail | reqDeleteVarMultiTail
reqDeleteVarSingleTail ::= '~' typeRef reqDeleteVarProjection
reqDeleteVarMultiTail ::= '~' '(' (reqDeleteVarMultiTailItem ','?)* ')' {pin=2}
reqDeleteVarMultiTailItem ::= typeRef reqDeleteVarProjection

reqDeleteVarProjection ::= ( reqDeleteMultiTagProjection | reqDeleteSingleTagProjection ) reqDeleteVarPolymorphicTail?
reqDeleteSingleTagProjection ::= ( ':' tagName)? reqDeleteTagProjectionItem
reqDeleteMultiTagProjection ::= ':' '(' (reqDeleteMultiTagProjectionItem ','?)* ')' {pin=2}
reqDeleteMultiTagProjectionItem ::= tagName reqDeleteTagProjectionItem
private reqDeleteTagProjectionItem ::= reqParamsAndAnnotations reqDeleteModelProjection // reqDeleteModelMeta?
//

reqDeleteModelProjection ::= ( reqDeleteRecordModelProjection
                             | reqDeleteListModelProjection
                             | reqDeleteMapModelProjection
                             )?

reqDeleteRecordModelProjection ::= '(' (reqDeleteFieldProjectionEntry ','?)* ')' { pin=1 }
reqDeleteFieldProjectionEntry ::= qid reqDeleteFieldProjection
reqDeleteFieldProjection ::= reqParamsAndAnnotations reqDeleteVarProjection

reqDeleteListModelProjection ::= '*' ( '(' reqDeleteVarProjection ')' )? { pin=1 }

reqDeleteMapModelProjection ::= reqDeleteKeysProjection ( '(' reqDeleteVarProjection ')' )?
reqDeleteKeysProjection ::= ( ( '[' ( reqDeleteKeyProjection ','? )* ']' ) | ( '[' '*' ']' ) )
reqDeleteKeyProjection ::= datum reqParamsAndAnnotations

// ============= data language =============
// please keep in sync with data language from schema.bnf and idl.bnf

dataValue ::= data | datum
private dataTypeSpec ::= typeRef

data ::= dataTypeSpec? '<' dataEntry* '>' {pin=2}
dataEntry ::= qid ':' datum ','? {pin=2 recoverWhile=dataValueRecover}

datum ::= recordDatum | mapDatum | listDatum | primitiveDatum | enumDatum | nullDatum

recordDatum ::= dataTypeSpec? '{' recordDatumEntry* '}' {pin=2 extends=datum}
recordDatumEntry ::= qid ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

mapDatum ::= dataTypeSpec? '(' mapDatumEntry* ')' {pin=2 extends=datum}
mapDatumEntry ::= datum ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

listDatum ::= dataTypeSpec? '[' (dataValue ','?)* ']' {pin=2 extends=datum}

primitiveDatum ::= (dataTypeSpec '@')? (string | number | boolean) {extends=datum} // todo only differentiate string/non-string?

enumDatum ::= '#' qid {extends=datum}

nullDatum ::= (dataTypeSpec '@')? 'null' {extends=datum}

private dataValueRecover ::= ! ( '#' | qid | primitiveDatum | ')' | '>' | ']' | ',' | '?' )
