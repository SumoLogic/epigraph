/*
 * Copyright 2017 Sumo Logic
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package ws.epigraph.schema.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static ws.epigraph.schema.lexer.SchemaElementTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SchemaLexer.flex</tt>
 */
public class SchemaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13728 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\77\1\35\1\55\1\101\1\1\1\57\1\52\1\102\1\77\1\35\1\12"+
    "\1\103\1\57\1\104\1\52\1\105\1\106\1\107\1\12\1\110\1\111\1\1\1\64\1\1\1\24"+
    "\2\12\1\112\1\111\1\113\2\1\1\114\1\115\1\116\1\117\1\120\1\121\2\1\1\70\1"+
    "\1\1\113\1\1\1\122\1\12\1\123\1\1\1\124\7\1\2\12\1\27\1\104\1\113\1\125\1"+
    "\126\1\127\1\130\1\113\2\12\1\131\2\12\1\132\24\12\1\133\1\134\2\12\1\133"+
    "\2\12\1\135\1\136\1\13\3\12\1\136\3\12\1\27\2\1\1\12\1\1\5\12\1\137\1\24\45"+
    "\12\1\140\1\12\1\24\1\27\4\12\1\27\1\141\1\142\1\15\1\12\1\15\1\12\1\15\1"+
    "\142\1\70\3\12\1\143\1\1\1\144\1\113\2\1\1\113\5\12\1\26\2\12\1\145\4\12\1"+
    "\37\1\12\1\146\2\1\1\64\1\12\1\147\1\46\2\12\1\150\1\12\1\76\1\113\2\1\1\12"+
    "\1\111\3\12\1\46\2\1\2\113\1\151\5\1\1\106\2\12\1\143\1\152\1\113\2\1\1\153"+
    "\1\12\1\154\1\41\2\12\1\37\1\1\2\12\1\143\1\1\1\155\1\41\1\12\1\147\6\1\1"+
    "\156\1\157\14\12\4\1\21\12\1\137\2\12\1\137\1\160\1\12\1\147\3\12\1\161\1"+
    "\162\1\163\1\123\1\162\7\1\1\164\1\1\1\123\6\1\1\165\1\166\1\167\1\170\1\171"+
    "\3\1\1\172\147\1\2\12\1\146\2\12\1\146\10\12\1\173\1\174\2\12\1\131\3\12\1"+
    "\175\1\1\1\12\1\111\4\176\4\1\1\104\35\1\1\177\2\1\1\200\1\24\4\12\1\201\1"+
    "\24\4\12\1\132\1\106\1\12\1\147\1\24\4\12\1\146\1\1\1\12\1\27\3\1\1\12\40"+
    "\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\123\4\1\2\12\1\147\20\12\1\123"+
    "\1\12\1\202\1\1\2\12\1\146\1\104\1\12\1\147\4\12\1\37\2\1\1\203\1\204\5\12"+
    "\1\205\1\12\1\147\1\26\3\1\1\203\1\206\1\12\1\30\1\1\3\12\1\143\1\204\2\12"+
    "\1\143\1\1\1\113\1\1\1\207\1\41\1\12\1\37\1\12\1\111\1\1\1\12\1\123\1\47\2"+
    "\12\1\30\1\104\1\113\1\210\1\211\2\12\1\45\1\1\1\212\1\113\1\12\1\213\3\12"+
    "\1\214\1\215\1\216\1\27\1\65\1\217\1\220\1\176\2\12\1\132\1\37\7\12\1\30\1"+
    "\113\72\12\1\143\1\12\1\221\2\12\1\150\20\1\26\12\1\147\6\12\1\76\2\1\1\111"+
    "\1\222\1\55\1\223\1\224\6\12\1\15\1\1\1\153\25\12\1\147\1\1\4\12\1\204\2\12"+
    "\1\26\2\1\1\150\7\1\1\210\7\12\1\123\1\1\1\113\1\24\1\27\1\24\1\27\1\225\4"+
    "\12\1\146\1\226\1\227\2\1\1\230\1\12\1\13\1\231\2\147\2\1\7\12\1\27\30\1\1"+
    "\12\1\123\3\12\1\70\2\1\2\12\1\1\1\12\1\232\2\12\1\37\1\12\1\147\2\12\1\233"+
    "\3\1\11\12\1\147\1\113\5\1\2\12\1\26\3\12\1\143\11\1\23\12\1\111\1\12\1\37"+
    "\1\26\11\1\1\234\2\12\1\235\1\12\1\37\1\12\1\111\1\12\1\146\4\1\1\12\1\236"+
    "\1\12\1\37\1\12\1\76\4\1\3\12\1\237\4\1\1\70\1\240\1\12\1\143\2\1\1\12\1\123"+
    "\1\12\1\123\2\1\1\122\1\12\1\46\1\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15"+
    "\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1\153\2\12\1\26\2\1\1\64\1\1\1"+
    "\153\2\12\2\1\1\12\1\45\1\113\1\153\1\12\1\111\1\64\1\1\2\12\1\241\1\153\2"+
    "\12\1\30\1\242\1\243\2\1\1\12\1\21\1\150\5\1\1\244\1\245\1\45\2\12\1\146\1"+
    "\1\1\113\1\72\1\54\1\55\1\67\1\1\1\246\1\15\21\1\3\12\1\1\1\247\1\113\12\1"+
    "\2\12\1\146\2\1\1\250\2\1\3\12\1\1\1\251\1\113\2\1\2\12\1\27\1\1\1\113\3\1"+
    "\1\12\1\76\1\1\1\113\26\1\4\12\1\113\1\104\34\1\3\12\1\45\20\1\71\12\1\76"+
    "\16\1\14\12\1\143\53\1\2\12\1\146\75\1\44\12\1\111\33\1\43\12\1\45\1\12\1"+
    "\146\1\113\6\1\1\12\1\147\1\1\3\12\1\1\1\143\1\113\1\153\1\252\1\12\67\1\4"+
    "\12\1\46\1\70\3\1\1\153\6\1\1\15\77\1\6\12\1\27\1\123\1\45\1\76\66\1\5\12"+
    "\1\210\3\12\1\142\1\253\1\254\1\255\3\12\1\256\1\257\1\12\1\260\1\261\1\35"+
    "\24\12\1\262\1\12\1\35\1\132\1\12\1\132\1\12\1\210\1\12\1\210\1\146\1\12\1"+
    "\146\1\12\1\55\1\12\1\55\1\12\1\263\3\264\14\12\1\46\123\1\1\255\1\12\1\265"+
    "\1\266\1\267\1\270\1\271\1\272\1\273\1\150\1\274\1\150\24\1\55\12\1\111\2"+
    "\1\103\12\1\46\15\12\1\147\150\12\1\15\25\1\41\12\1\147\36\1");

  /* The ZZ_CMAP_A table has 3024 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\2\2\1\1\22\0\1\2\1\65\1\5\1\63\1\66\3\0\1\56\1\57\1\4\1\55\1"+
    "\45\1\12\1\14\1\3\12\11\1\44\1\46\1\60\1\47\1\61\1\0\1\62\3\16\1\76\1\15\1"+
    "\16\1\70\4\16\1\77\2\16\1\73\1\72\2\16\1\74\1\71\1\75\5\16\1\52\1\6\1\53\1"+
    "\0\1\64\1\17\1\27\1\7\1\32\1\35\1\30\1\33\1\43\1\40\1\20\1\100\1\16\1\34\1"+
    "\21\1\26\1\23\1\22\1\67\1\24\1\31\1\25\1\10\1\42\1\37\1\36\1\41\1\16\1\50"+
    "\1\0\1\51\1\54\13\0\1\16\12\0\1\16\4\0\1\16\5\0\27\16\1\0\12\16\4\0\14\16"+
    "\16\0\5\16\7\0\1\16\1\0\1\16\1\0\5\16\1\0\2\16\2\0\4\16\1\0\1\16\6\0\1\16"+
    "\1\0\3\16\1\0\1\16\1\0\4\16\1\0\23\16\1\0\13\16\10\0\6\16\1\0\26\16\2\0\1"+
    "\16\6\0\10\16\10\0\13\16\5\0\3\16\15\0\12\13\4\0\6\16\1\0\1\16\17\0\2\16\7"+
    "\0\2\16\12\13\3\16\2\0\2\16\1\0\16\16\15\0\11\16\13\0\1\16\16\0\12\13\6\16"+
    "\4\0\2\16\4\0\1\16\5\0\6\16\4\0\1\16\11\0\1\16\3\0\1\16\7\0\11\16\7\0\5\16"+
    "\17\0\26\16\3\0\1\16\2\0\1\16\7\0\12\16\4\0\12\13\1\16\4\0\10\16\2\0\2\16"+
    "\2\0\26\16\1\0\7\16\1\0\1\16\3\0\4\16\3\0\1\16\20\0\1\16\15\0\2\16\1\0\1\16"+
    "\5\0\6\16\4\0\2\16\1\0\2\16\1\0\2\16\1\0\2\16\17\0\4\16\1\0\1\16\7\0\12\13"+
    "\2\0\3\16\20\0\11\16\1\0\2\16\1\0\2\16\1\0\5\16\3\0\1\16\2\0\1\16\30\0\1\16"+
    "\13\0\10\16\2\0\1\16\3\0\1\16\1\0\6\16\3\0\3\16\1\0\4\16\3\0\2\16\1\0\1\16"+
    "\1\0\2\16\3\0\2\16\3\0\3\16\3\0\14\16\13\0\10\16\1\0\2\16\10\0\3\16\5\0\4"+
    "\16\1\0\5\16\3\0\1\16\3\0\2\16\15\0\13\16\2\0\1\16\21\0\1\16\12\0\6\16\5\0"+
    "\22\16\3\0\10\16\1\0\11\16\1\0\1\16\2\0\7\16\11\0\1\16\1\0\2\16\14\0\12\13"+
    "\7\0\2\16\1\0\1\16\2\0\2\16\1\0\1\16\2\0\1\16\6\0\4\16\1\0\7\16\1\0\3\16\1"+
    "\0\1\16\1\0\1\16\2\0\2\16\1\0\4\16\1\0\2\16\11\0\1\16\2\0\5\16\1\0\1\16\11"+
    "\0\12\13\2\0\14\16\1\0\24\16\13\0\5\16\3\0\6\16\4\0\4\16\3\0\1\16\3\0\2\16"+
    "\7\0\3\16\4\0\15\16\14\0\1\16\1\0\6\16\1\0\1\16\5\0\1\16\2\0\13\16\1\0\15"+
    "\16\1\0\4\16\2\0\7\16\1\0\1\16\1\0\4\16\2\0\1\16\1\0\4\16\2\0\7\16\1\0\1\16"+
    "\1\0\4\16\2\0\16\16\2\0\6\16\2\0\15\16\2\0\1\16\1\0\10\16\7\0\15\16\1\0\6"+
    "\16\23\0\1\16\4\0\1\16\3\0\11\16\1\0\1\16\5\0\17\16\1\0\16\16\2\0\14\16\13"+
    "\0\1\16\15\0\7\16\7\0\16\16\15\0\2\16\12\13\3\0\3\16\11\0\4\16\1\0\4\16\3"+
    "\0\2\16\11\0\10\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0\6\16\1\0\7\16\1\0\1\16\3"+
    "\0\3\16\1\0\7\16\3\0\4\16\2\0\6\16\5\0\1\16\15\0\1\16\2\0\1\16\4\0\1\16\2"+
    "\0\12\16\1\0\1\16\3\0\5\16\6\0\1\16\1\0\1\16\1\0\1\16\1\0\4\16\1\0\13\16\2"+
    "\0\4\16\5\0\5\16\4\0\1\16\4\0\2\16\13\0\5\16\6\0\4\16\3\0\2\16\14\0\10\16"+
    "\7\0\10\16\1\0\7\16\6\0\2\16\12\0\5\16\5\0\2\16\3\0\7\16\6\0\3\16\12\13\2"+
    "\16\13\0\11\16\2\0\27\16\2\0\7\16\1\0\3\16\1\0\4\16\1\0\4\16\2\0\6\16\3\0"+
    "\1\16\1\0\1\16\2\0\5\16\1\0\12\16\12\13\5\16\1\0\3\16\1\0\10\16\4\0\7\16\3"+
    "\0\1\16\3\0\2\16\1\0\1\16\3\0\2\16\2\0\5\16\2\0\1\16\1\0\1\16\30\0\3\16\3"+
    "\0\6\16\2\0\6\16\2\0\6\16\11\0\7\16\4\0\5\16\3\0\5\16\5\0\1\16\1\0\10\16\1"+
    "\0\5\16\1\0\1\16\1\0\2\16\1\0\2\16\1\0\12\16\6\0\12\16\2\0\6\16\2\0\6\16\2"+
    "\0\6\16\2\0\3\16\3\0\14\16\1\0\16\16\1\0\2\16\1\0\2\16\1\0\10\16\6\0\4\16"+
    "\4\0\16\16\2\0\1\16\1\0\14\16\1\0\2\16\3\0\1\16\2\0\4\16\1\0\2\16\12\0\10"+
    "\16\6\0\6\16\1\0\3\16\1\0\12\16\3\0\1\16\12\0\4\16\13\0\12\13\1\16\1\0\1\16"+
    "\3\0\7\16\1\0\1\16\1\0\4\16\1\0\17\16\1\0\2\16\14\0\3\16\4\0\2\16\1\0\1\16"+
    "\20\0\4\16\10\0\1\16\13\0\10\16\5\0\3\16\2\0\1\16\2\0\2\16\2\0\4\16\1\0\14"+
    "\16\1\0\1\16\1\0\7\16\1\0\21\16\1\0\4\16\2\0\10\16\1\0\7\16\1\0\14\16\1\0"+
    "\4\16\1\0\5\16\1\0\1\16\3\0\14\16\2\0\13\16\1\0\10\16\2\0\22\13\1\0\2\16\1"+
    "\0\1\16\2\0\1\16\1\0\12\16\1\0\4\16\1\0\1\16\1\0\1\16\6\0\1\16\4\0\1\16\1"+
    "\0\1\16\1\0\1\16\1\0\3\16\1\0\2\16\1\0\1\16\2\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\1\0\2\16\1\0\1\16\2\0\4\16\1\0\7\16\1\0\4\16\1\0\4\16\1\0\1"+
    "\16\1\0\12\16\1\0\5\16\1\0\3\16\1\0\5\16\1\0\5\16");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\2\5\1\6"+
    "\1\1\1\7\1\5\1\1\17\5\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\3\5\1\33\1\34\1\0\1\35\1\0\2\5\2\0"+
    "\1\6\1\0\37\5\1\34\1\0\2\5\1\6\1\0"+
    "\3\5\1\36\36\5\1\37\1\5\1\40\1\5\1\34"+
    "\1\0\5\5\1\41\2\5\1\42\3\5\1\43\3\5"+
    "\1\44\1\5\1\45\2\5\1\46\7\5\1\47\1\50"+
    "\3\5\1\51\1\52\1\5\1\0\11\5\1\53\21\5"+
    "\1\0\1\5\1\54\1\55\3\5\1\56\4\5\1\57"+
    "\4\5\1\60\2\5\1\61\1\62\1\63\1\5\1\64"+
    "\1\5\1\65\1\66\1\67\2\5\1\70\11\5\1\71"+
    "\2\5\1\72\6\5\1\73\1\74\1\75\2\5\1\76"+
    "\3\5\1\77\5\5\1\100\1\5\1\101\2\5\1\102"+
    "\1\103\2\5\1\104\3\5\1\105\1\106\12\5\1\107"+
    "\2\5\1\110\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\101\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u0618\0\u0659\0\u069a\0\101\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\u0208\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\101\0\u06db"+
    "\0\u071c\0\u075d\0\u079e\0\u07df\0\u0104\0\101\0\u0820\0\u0861"+
    "\0\u08a2\0\u0249\0\u08e3\0\u0924\0\u02cb\0\101\0\u0965\0\u09a6"+
    "\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae"+
    "\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6"+
    "\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6"+
    "\0\u1207\0\u1207\0\u1248\0\u1289\0\u12ca\0\u028a\0\u130b\0\u134c"+
    "\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554"+
    "\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c"+
    "\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u028a\0\u1aa9\0\u028a\0\u1aea"+
    "\0\101\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u028a"+
    "\0\u1cb1\0\u1cf2\0\u028a\0\u1d33\0\u1d74\0\u1db5\0\u028a\0\u1df6"+
    "\0\u1e37\0\u1e78\0\u028a\0\u1eb9\0\u028a\0\u1efa\0\u1f3b\0\u028a"+
    "\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u028a"+
    "\0\u028a\0\u2143\0\u2184\0\u21c5\0\u028a\0\u028a\0\u2206\0\u2247"+
    "\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f"+
    "\0\u2490\0\u028a\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616"+
    "\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e"+
    "\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u028a\0\u028a\0\u29a4"+
    "\0\u29e5\0\u2a26\0\u028a\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u028a"+
    "\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u028a\0\u2c6f\0\u2cb0\0\u028a"+
    "\0\u028a\0\u028a\0\u2cf1\0\u028a\0\u2d32\0\u2d73\0\u028a\0\u028a"+
    "\0\u2db4\0\u2df5\0\u028a\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a"+
    "\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u028a\0\u307f\0\u30c0\0\u028a"+
    "\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u028a\0\u028a"+
    "\0\u028a\0\u3287\0\u32c8\0\u028a\0\u3309\0\u334a\0\u338b\0\u028a"+
    "\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u028a\0\u3511\0\u028a"+
    "\0\u3552\0\u3593\0\u028a\0\u028a\0\u35d4\0\u3615\0\u3656\0\u3697"+
    "\0\u36d8\0\u3719\0\u028a\0\u028a\0\u375a\0\u379b\0\u37dc\0\u381d"+
    "\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u028a\0\u39e4"+
    "\0\u3a25\0\u028a\0\u028a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\11\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\14\1\34\4\14\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\14\1\60\1\14\1\61\3\14\1\62"+
    "\2\14\102\0\2\3\101\0\1\63\1\64\74\0\5\65"+
    "\1\66\1\67\72\65\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\3\14\1\70\20\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\2\14\1\71"+
    "\21\14\23\0\12\14\11\0\1\11\1\0\1\11\1\72"+
    "\1\73\12\0\1\73\61\0\1\11\1\0\1\11\1\72"+
    "\75\0\1\74\1\0\1\74\74\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\24\14\23\0\12\14\17\75\1\76"+
    "\61\75\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\1\14\1\77\4\14\1\100\15\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\7\14\1\101"+
    "\1\102\13\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\4\14\1\103\2\14\1\104\14\14"+
    "\23\0\12\14\7\0\1\14\1\105\1\14\1\0\1\14"+
    "\1\0\2\14\1\0\22\14\1\106\1\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\10\14"+
    "\1\107\13\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\4\14\1\110\17\14\23\0\12\14"+
    "\7\0\1\14\1\111\1\14\1\0\1\14\1\0\2\14"+
    "\1\0\7\14\1\112\14\14\23\0\12\14\7\0\1\113"+
    "\2\14\1\0\1\14\1\0\2\14\1\0\24\14\23\0"+
    "\12\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\6\14\1\114\7\14\1\115\5\14\23\0\12\14\7\0"+
    "\1\14\1\116\1\14\1\0\1\14\1\0\2\14\1\0"+
    "\5\14\1\117\16\14\23\0\12\14\7\0\1\14\1\120"+
    "\1\14\1\0\1\14\1\0\2\14\1\0\4\14\1\121"+
    "\17\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\3\14\1\122\3\14\1\123\14\14\23\0"+
    "\12\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\1\124\2\14\1\125\20\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\3\14\1\126\4\14"+
    "\1\127\13\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\1\130\23\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\1\131\1\14\1\0\24\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\24\14\23\0\4\14\1\132\1\14\1\133\3\14"+
    "\7\0\3\14\1\0\1\14\1\0\1\134\1\14\1\0"+
    "\24\14\23\0\12\14\1\63\1\0\77\63\4\64\1\135"+
    "\74\64\3\0\1\65\1\0\3\65\1\136\13\0\3\65"+
    "\4\0\1\65\54\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\3\14\1\137\20\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\15\14\1\140\6\14"+
    "\23\0\12\14\11\0\1\141\1\142\1\141\41\0\1\142"+
    "\34\0\1\74\1\0\1\74\1\0\1\73\12\0\1\73"+
    "\57\0\3\14\1\0\1\14\1\0\2\14\1\0\2\14"+
    "\1\143\21\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\2\14\1\144\2\14\1\145\16\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\2\14\1\146\21\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\5\14\1\147\16\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\3\14\1\150\20\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\5\14\1\151\16\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\5\14\1\152\16\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\10\14\1\153\13\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\5\14\1\154\1\14\1\155\1\14\1\156\1\157"+
    "\11\14\23\0\1\160\11\14\7\0\1\14\1\161\1\14"+
    "\1\0\1\14\1\0\2\14\1\0\7\14\1\162\14\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\14\14\1\163\7\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\1\14\1\164\22\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\11\14\1\165\12\14\23\0\12\14\7\0\1\14"+
    "\1\166\1\14\1\0\1\14\1\0\2\14\1\0\5\14"+
    "\1\167\16\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\5\14\1\170\16\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\2\14"+
    "\1\171\21\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\4\14\1\172\17\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\11\14"+
    "\1\173\12\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\10\14\1\174\13\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\4\14"+
    "\1\175\17\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\14\14\1\176\7\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\11\14"+
    "\1\177\12\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\6\14\1\200\15\14\23\0\12\14"+
    "\7\0\1\14\1\201\1\14\1\0\1\14\1\0\2\14"+
    "\1\0\24\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\13\14\1\202\1\203\7\14\23\0"+
    "\12\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\5\14\1\204\16\14\23\0\12\14\7\0\3\14\1\0"+
    "\1\14\1\0\2\14\1\0\24\14\23\0\2\14\1\205"+
    "\7\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\24\14\23\0\5\14\1\206\4\14\7\0\3\14\1\0"+
    "\1\14\1\0\2\14\1\0\24\14\23\0\2\14\1\207"+
    "\7\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\24\14\23\0\10\14\1\210\1\14\3\64\1\211\1\135"+
    "\74\64\11\0\1\212\76\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\14\14\1\213\7\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\7\14\1\214"+
    "\14\14\23\0\12\14\11\0\1\141\1\0\1\141\74\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\3\14\1\215"+
    "\20\14\23\0\12\14\7\0\1\14\1\216\1\14\1\0"+
    "\1\14\1\0\2\14\1\0\24\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\10\14\1\217"+
    "\13\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\7\14\1\220\10\14\1\221\3\14\23\0"+
    "\12\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\24\14\23\0\11\14\1\222\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\20\14\1\223\3\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\2\14"+
    "\1\224\21\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\4\14\1\225\17\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\4\14"+
    "\1\226\17\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\15\14\1\227\6\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\3\14"+
    "\1\230\20\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\3\14\1\231\20\14\23\0\12\14"+
    "\7\0\1\14\1\232\1\14\1\0\1\14\1\0\2\14"+
    "\1\0\24\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\10\14\1\233\13\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\6\14"+
    "\1\234\15\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\14\14\1\235\7\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\10\14"+
    "\1\236\13\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\5\14\1\237\16\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\1\14"+
    "\1\240\22\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\1\241\23\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\10\14\1\242"+
    "\13\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\2\14\1\243\21\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\1\244\23\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\5\14\1\245\16\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\7\14\1\246\14\14"+
    "\23\0\12\14\7\0\1\247\2\14\1\0\1\14\1\0"+
    "\2\14\1\0\24\14\23\0\12\14\7\0\3\14\1\0"+
    "\1\14\1\0\2\14\1\0\11\14\1\161\12\14\23\0"+
    "\12\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\5\14\1\250\16\14\23\0\12\14\7\0\3\14\1\0"+
    "\1\14\1\0\2\14\1\0\23\14\1\251\23\0\12\14"+
    "\7\0\1\252\2\14\1\0\1\14\1\0\2\14\1\0"+
    "\24\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\7\14\1\253\14\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\10\14\1\254"+
    "\13\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\20\14\1\255\3\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\24\14\23\0"+
    "\2\14\1\256\7\14\7\0\3\14\1\0\1\14\1\0"+
    "\1\257\1\14\1\0\24\14\23\0\12\14\11\0\1\260"+
    "\76\0\3\14\1\0\1\14\1\0\2\14\1\0\10\14"+
    "\1\261\13\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\5\14\1\262\16\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\4\14"+
    "\1\263\17\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\5\14\1\264\16\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\23\14"+
    "\1\265\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\3\14\1\266\20\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\10\14\1\267"+
    "\13\14\23\0\12\14\7\0\1\14\1\270\1\14\1\0"+
    "\1\14\1\0\2\14\1\0\24\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\4\14\1\271"+
    "\17\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\3\14\1\272\20\14\23\0\12\14\7\0"+
    "\1\14\1\273\1\14\1\0\1\14\1\0\2\14\1\0"+
    "\24\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\4\14\1\274\17\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\1\275\23\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\11\14\1\276\12\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\11\14\1\277\12\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\4\14\1\300\17\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\5\14\1\301\16\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\6\14\1\302\15\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\14\14\1\303\7\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\6\14\1\304\15\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\3\14\1\305\20\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\5\14\1\306\16\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\1\307\23\14\23\0"+
    "\12\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\14\14\1\310\7\14\23\0\12\14\7\0\1\14\1\311"+
    "\1\14\1\0\1\14\1\0\2\14\1\0\24\14\23\0"+
    "\12\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\5\14\1\312\16\14\23\0\12\14\7\0\3\14\1\0"+
    "\1\14\1\0\2\14\1\0\24\14\23\0\2\14\1\313"+
    "\7\14\11\0\1\314\76\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\7\14\1\315\14\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\10\14\1\316"+
    "\13\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\5\14\1\317\16\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\24\14\23\0"+
    "\2\14\1\320\1\321\6\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\10\14\1\322\13\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\15\14"+
    "\1\323\6\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\12\14\1\324\11\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\5\14"+
    "\1\325\16\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\1\326\23\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\4\14\1\327"+
    "\17\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\15\14\1\330\6\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\4\14\1\331"+
    "\17\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\13\14\1\332\10\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\2\14\1\333"+
    "\21\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\7\14\1\334\14\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\21\14\1\335"+
    "\2\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\15\14\1\336\6\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\10\14\1\337"+
    "\13\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\23\14\1\340\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\1\14\1\341\22\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\10\14\1\342\13\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\15\14\1\343\6\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\10\14\1\344\13\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\14\14\1\345\7\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\10\14\1\346\13\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\1\347\1\14\1\0\24\14\23\0"+
    "\12\14\11\0\1\65\76\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\6\14\1\350\15\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\21\14\1\351"+
    "\2\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\4\14\1\352\17\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\4\14\1\353"+
    "\17\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\5\14\1\354\16\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\24\14\23\0"+
    "\2\14\1\355\1\356\6\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\15\14\1\357\6\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\12\14"+
    "\1\360\11\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\10\14\1\361\13\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\3\14"+
    "\1\362\20\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\7\14\1\363\14\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\12\14"+
    "\1\364\11\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\11\14\1\365\12\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\1\14"+
    "\1\366\22\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\15\14\1\367\6\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\5\14"+
    "\1\370\16\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\24\14\23\0\3\14\1\371\6\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\2\14"+
    "\1\372\21\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\3\14\1\373\20\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\1\374"+
    "\23\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\21\14\1\375\2\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\4\14\1\376"+
    "\17\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\10\14\1\377\13\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\10\14\1\u0100"+
    "\13\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\15\14\1\u0101\6\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\4\14\1\u0102"+
    "\17\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\12\14\1\u0103\11\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\5\14\1\u0104"+
    "\16\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\10\14\1\u0105\13\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\10\14\1\u0106"+
    "\13\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\4\14\1\u0107\17\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\10\14\1\u0108"+
    "\13\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\24\14\23\0\11\14\1\u0109\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\3\14\1\u010a\20\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\2\14\1\u010b\21\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\3\14\1\u010c\20\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\1\14\1\u010d\22\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\10\14\1\u010e\13\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\6\14\1\u010f\15\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\6\14\1\u0110\15\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\3\14\1\u0111\20\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\10\14\1\u0112\13\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\6\14\1\u0113\15\14\23\0\12\14\7\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\0\10\14\1\u0114\13\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\24\14\23\0\11\14\1\u0115\7\0\3\14\1\0"+
    "\1\14\1\0\2\14\1\0\10\14\1\u0116\13\14\23\0"+
    "\12\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\5\14\1\u0117\16\14\23\0\12\14\7\0\3\14\1\0"+
    "\1\14\1\0\2\14\1\0\24\14\23\0\11\14\1\u0118"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\12\14"+
    "\1\u0119\11\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\10\14\1\u011a\13\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\4\14"+
    "\1\u011b\17\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\11\14\1\u011c\12\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\10\14"+
    "\1\u011d\13\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\5\14\1\u011e\16\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\12\14"+
    "\1\u011f\11\14\23\0\12\14\7\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\0\12\14\1\u0120\11\14\23\0\12\14"+
    "\7\0\3\14\1\0\1\14\1\0\2\14\1\0\1\u0121"+
    "\23\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\5\14\1\u0122\16\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\5\14\1\u0123"+
    "\16\14\23\0\12\14\7\0\3\14\1\0\1\14\1\0"+
    "\2\14\1\0\3\14\1\u0124\20\14\23\0\12\14\7\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\0\1\u0125\23\14"+
    "\23\0\12\14\7\0\3\14\1\0\1\14\1\0\2\14"+
    "\1\0\1\u0126\23\14\23\0\12\14\7\0\3\14\1\0"+
    "\1\14\1\0\2\14\1\0\6\14\1\u0127\15\14\23\0"+
    "\12\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\3\14\1\u0128\20\14\23\0\12\14\7\0\3\14\1\0"+
    "\1\14\1\0\2\14\1\0\3\14\1\u0129\20\14\23\0"+
    "\12\14\7\0\3\14\1\0\1\14\1\0\2\14\1\0"+
    "\6\14\1\u012a\15\14\23\0\12\14\7\0\3\14\1\0"+
    "\1\14\1\0\2\14\1\0\6\14\1\u012b\15\14\23\0"+
    "\12\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\27\1\11\11\1\1\11\11"+
    "\5\1\1\0\1\11\1\0\2\1\2\0\1\1\1\0"+
    "\1\11\37\1\1\0\3\1\1\0\46\1\1\11\1\0"+
    "\45\1\1\0\33\1\1\0\137\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public SchemaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SchemaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 74: break;
          case 2:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 75: break;
          case 3:
            { return S_SLASH;
            }
          case 76: break;
          case 4:
            { return S_STAR;
            }
          case 77: break;
          case 5:
            { return S_ID;
            }
          case 78: break;
          case 6:
            { return S_NUMBER;
            }
          case 79: break;
          case 7:
            { return S_DOT;
            }
          case 80: break;
          case 8:
            { return S_COLON;
            }
          case 81: break;
          case 9:
            { return S_COMMA;
            }
          case 82: break;
          case 10:
            { return S_SEMICOLON;
            }
          case 83: break;
          case 11:
            { return S_EQ;
            }
          case 84: break;
          case 12:
            { return S_CURLY_LEFT;
            }
          case 85: break;
          case 13:
            { return S_CURLY_RIGHT;
            }
          case 86: break;
          case 14:
            { return S_BRACKET_LEFT;
            }
          case 87: break;
          case 15:
            { return S_BRACKET_RIGHT;
            }
          case 88: break;
          case 16:
            { return S_TILDA;
            }
          case 89: break;
          case 17:
            { return S_PLUS;
            }
          case 90: break;
          case 18:
            { return S_PAREN_LEFT;
            }
          case 91: break;
          case 19:
            { return S_PAREN_RIGHT;
            }
          case 92: break;
          case 20:
            { return S_ANGLE_LEFT;
            }
          case 93: break;
          case 21:
            { return S_ANGLE_RIGHT;
            }
          case 94: break;
          case 22:
            { return S_AT;
            }
          case 95: break;
          case 23:
            { return S_HASH;
            }
          case 96: break;
          case 24:
            { return S_UNDERSCORE;
            }
          case 97: break;
          case 25:
            { return S_BANG;
            }
          case 98: break;
          case 26:
            { return S_DOLLAR;
            }
          case 99: break;
          case 27:
            { return S_COMMENT;
            }
          case 100: break;
          case 28:
            { return S_BLOCK_COMMENT;
            }
          case 101: break;
          case 29:
            { return S_STRING;
            }
          case 102: break;
          case 30:
            { return S_MAP;
            }
          case 103: break;
          case 31:
            { return S_GET;
            }
          case 104: break;
          case 32:
            { return S_PUT;
            }
          case 105: break;
          case 33:
            { return S_META;
            }
          case 106: break;
          case 34:
            { return S_PATH;
            }
          case 107: break;
          case 35:
            { return S_OP_READ;
            }
          case 108: break;
          case 36:
            { return S_BOOLEAN;
            }
          case 109: break;
          case 37:
            { return S_NULL;
            }
          case 110: break;
          case 38:
            { return S_ENUM;
            }
          case 111: break;
          case 39:
            { return S_LIST;
            }
          case 112: break;
          case 40:
            { return S_LONG_T;
            }
          case 113: break;
          case 41:
            { return S_WITH;
            }
          case 114: break;
          case 42:
            { return S_POST;
            }
          case 115: break;
          case 43:
            { return S_RETRO;
            }
          case 116: break;
          case 44:
            { return S_OP_UPDATE;
            }
          case 117: break;
          case 45:
            { return S_IMPORT;
            }
          case 118: break;
          case 46:
            { return S_METHOD;
            }
          case 119: break;
          case 47:
            { return S_RECORD;
            }
          case 120: break;
          case 48:
            { return S_ENTITY;
            }
          case 121: break;
          case 49:
            { return S_STRING_T;
            }
          case 122: break;
          case 50:
            { return S_OP_CUSTOM;
            }
          case 123: break;
          case 51:
            { return S_OP_CREATE;
            }
          case 124: break;
          case 52:
            { return S_DOUBLE_T;
            }
          case 125: break;
          case 53:
            { return S_OP_DELETE;
            }
          case 126: break;
          case 54:
            { return S_DELETE;
            }
          case 127: break;
          case 55:
            { return S_BOOLEAN_T;
            }
          case 128: break;
          case 56:
            { return S_INTEGER_T;
            }
          case 129: break;
          case 57:
            { return S_EXTENDS;
            }
          case 130: break;
          case 58:
            { return S_DEFAULT;
            }
          case 131: break;
          case 59:
            { return S_OVERRIDE;
            }
          case 132: break;
          case 60:
            { return S_RESOURCE;
            }
          case 133: break;
          case 61:
            { return S_REQUIRED;
            }
          case 134: break;
          case 62:
            { return S_ABSTRACT;
            }
          case 135: break;
          case 63:
            { return S_INPUT_TYPE;
            }
          case 136: break;
          case 64:
            { return S_NAMESPACE;
            }
          case 137: break;
          case 65:
            { return S_FORBIDDEN;
            }
          case 138: break;
          case 66:
            { return S_PROJECTION;
            }
          case 139: break;
          case 67:
            { return S_OUTPUT_TYPE;
            }
          case 140: break;
          case 68:
            { return S_SUPPLEMENT;
            }
          case 141: break;
          case 69:
            { return S_TRANSFORMER;
            }
          case 142: break;
          case 70:
            { return S_SUPPLEMENTS;
            }
          case 143: break;
          case 71:
            { return S_INPUT_PROJ;
            }
          case 144: break;
          case 72:
            { return S_OUTPUT_PROJ;
            }
          case 145: break;
          case 73:
            { return S_DELETE_PROJ;
            }
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
