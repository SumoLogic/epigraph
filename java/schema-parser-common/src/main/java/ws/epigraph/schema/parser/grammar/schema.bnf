/*
 * Copyright 2017 Sumo Logic
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="ws.epigraph.schema.parser.SchemaParser"

  elementTypeHolderClass="ws.epigraph.schema.lexer.SchemaElementTypes"
  elementTypePrefix="S_"
  elementTypeClass="ws.epigraph.schema.lexer.SchemaElementType"
  tokenTypeClass="ws.epigraph.schema.lexer.SchemaElementType"

  psiClassPrefix="Schema"
  psiImplClassSuffix="Impl"
  psiPackage="ws.epigraph.schema.parser.psi"
  psiImplPackage="ws.epigraph.schema.parser.psi.impl"
  psiImplUtilClass="ws.epigraph.schema.parser.psi.impl.SchemaPsiImplUtil"

  generateTokenAccessors=true

  tokens=[
    NAMESPACE = 'namespace'
    IMPORT = 'import'
    MAP = 'map'
    RETRO = 'retro'
    LIST = 'list'
    RECORD = 'record'
    EXTENDS = 'extends'
    ENTITY='entity'
    ENUM='enum'
    META='meta'
    SUPPLEMENT='supplement'
    SUPPLEMENTS='supplements'
    WITH='with'
    ABSTRACT='abstract'
    OVERRIDE='override'
    // todo add final, primitive, any?

    INTEGER_T='integer'
    LONG_T='long'
    DOUBLE_T='double'
    BOOLEAN_T='boolean'
    STRING_T='string'

    // idl - specific
    FORBIDDEN = 'forbidden'
    REQUIRED = 'required'
    DEFAULT = 'default'
    RESOURCE = 'resource'
    TRANSFORMER = 'transformer'
    // http methods
    GET = 'GET'
    POST = 'POST'
    PUT = 'PUT'
    DELETE = 'DELETE'
    // operation types
    OP_READ = 'read'
    OP_CREATE = 'create'
    OP_UPDATE = 'update'
    OP_DELETE = 'delete'
    OP_CUSTOM = 'custom'
    //
    METHOD = 'method'
    INPUT_TYPE = 'inputType'
    INPUT_PROJECTION = 'inputProjection'
    OUTPUT_TYPE = 'outputType'
    OUTPUT_PROJECTION = 'outputProjection'
    DELETE_PROJECTION = 'deleteProjection'
    PATH = 'path'
    PROJECTION = 'projection'

    COLON = ':'
    DOT = '.'
    COMMA = ','
    SEMICOLON = ';'
    EQ = '='
    CURLY_LEFT = '{'
    CURLY_RIGHT = '}'
    BRACKET_LEFT = '['
    BRACKET_RIGHT = ']'
    TILDA = '~'
    STAR = '*'
    PLUS = '+'
    AT = '@'
    HASH = '#'
    UNDERSCORE = '_'
    BANG = '!'
    DOLLAR = '$'

    space='regexp:\s+'
    comment='regexp://.*'
    block_comment='regexp:/\*((?<!\*/)(.|\n))*'

    id = 'regexp:(\p{Alpha}\p{Alnum}*)|(`([^`]*)`)'

    // for data lang
    NULL = 'null'
    SLASH = '/'
    PAREN_LEFT = '('
    PAREN_RIGHT = ')'
    ANGLE_LEFT = '<'
    ANGLE_RIGHT = '>'

    number="regexp:([0-9])+"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    boolean="regexp:true|false"
  ]

  pin(".*Body") = 1
//  recoverWhile(".*Body") = "declBodyRecover"

  recoverWhile(".*Part") = "partRecover"

  // extends(".*.TypeDef") = "typeDef" // types hierarchy doesn't work with stubs
  implements(".*TypeDef")="ws.epigraph.schema.parser.psi.SchemaTypeDef"

  implements(".*TypeBody") = "ws.epigraph.schema.parser.psi.AnnotationsHolder"
  extends(".*TypeBody") = "ws.epigraph.schema.parser.psi.impl.AnnotationsHolderImpl"
}

root ::= namespaceDecl imports defs

// either quoted or unquoted id
qid ::= id {
  methods=[getName setName getCanonicalName]
}

namespaceDecl ::= 'namespace' qn namespaceBody? {
  methods=[getFqn toString]
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaNamespaceDeclStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaNamespaceDeclStubElementType"
  pin=1
  recoverWhile="namespaceDeclRecover"
}
private namespaceDeclRecover ::= ! ('import' | 'namespace' | 'abstract' | 'record' | ',' |
                           'map' | 'list' | 'entity' | 'enum' | 'supplement'|
                           'string' | 'integer' | 'long' | 'double' | 'boolean' | 'resource' |
                           'transformer' |
                           'outputProjection' | 'inputProjection' | 'deleteProjection' )

private namespaceBody ::= '{' namespaceBodyPart* '}'
private namespaceBodyPart ::= annotation // | ...

imports ::= importStatement*
importStatement ::= 'import' qn {pin=1 recoverWhile="importRecover"}
private importRecover ::= namespaceDeclRecover


qnSegment ::= qid {
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[getName setName getNameIdentifier getSchemaFqn getSchemaFqnTypeRef isLast getReference getQn]
}
qn ::= qnSegment ('.' qnSegment)* { methods=[getQn] }

private typeName ::= qid
typeRef ::= qnTypeRef | anonList | anonMap {name="type"}
qnTypeRef ::= qn { methods=[resolve] extends="typeRef" }
entityTagRef ::= qid {
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[setName getNameIdentifier getReference]
}

/// defs

defs ::= def*
private def ::= typeDefWrapper | supplementDef | resourceDef | transformerDef | projectionDef {recoverWhile="defRecover"}

// ============= schema language =============

// need a wrapper because inheritance doesn't play nicely with PSI stubs
typeDefWrapper ::= entityTypeDef | recordTypeDef | mapTypeDef | listTypeDef | primitiveTypeDef | enumTypeDef {
  name="type definition"
  methods=[getElement delete toString]
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaTypeDefWrapperStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaTypeDefWrapperStubElementType"
}

private typeDefModifiers ::= 'abstract'?
private typeMemberModifiers ::= 'override'? 'abstract'?

valueTypeRef ::= typeRef retroDecl?

anonList ::= 'list' '[' valueTypeRef ']' {pin=1 extends="typeRef" }
anonMap ::= 'map' '[' typeRef ',' valueTypeRef ']' {pin=1 extends="typeRef" }

extendsDecl ::= 'extends' qnTypeRef (',' qnTypeRef)* {pin=1}
supplementsDecl ::= 'supplements' qnTypeRef (',' qnTypeRef)* {pin=1}

// TODO Fix: entityTagRef doesn't resolve
retroDecl ::= 'retro' entityTagRef

annotation ::= '@' qnTypeRef datum? {
  name="annotation"
//  implements="com.intellij.psi.PsiNamedElement"
//  methods = [getName setName getNameIdentifier]
  pin = 1
}

metaDecl ::= 'meta' qnTypeRef { pin=1 } // we don't allow anonList or anonMap as meta

/// entity

entityTypeDef ::= typeDefModifiers 'entity' typeName extendsDecl? supplementsDecl? entityTypeBody? {
  methods=[supplemented]
  extends="ws.epigraph.schema.parser.psi.impl.SchemaEntityTypeDefImplBase"
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaEntityTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaEntityTypeDefStubElementType"
  pin=2
  //recoverWhile=defRecover
}
entityTypeBody ::= '{' (entityBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private entityBodyPart ::= entityTagDecl | annotation
entityTagDecl ::= typeMemberModifiers qid ':' typeRef entityMemberBody? {
  implements=["ws.epigraph.schema.parser.psi.AnnotationsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="ws.epigraph.schema.parser.psi.impl.AnnotationsHolderImpl"
  methods=[getName setName getNameIdentifier getTextOffset getPresentation getEntityDef]
  pin=3
}
private entityMemberBody ::= '{' (entityMemberBodyPart ','?)* '}'
private entityMemberBodyPart ::= annotation

/// record

recordTypeDef ::= typeDefModifiers 'record' typeName extendsDecl? metaDecl? supplementsDecl? recordTypeBody? {
  methods=[supplemented]
  extends="ws.epigraph.schema.parser.psi.impl.SchemaRecordTypeDefImplBase"
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaRecordTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaRecordTypeDefStubElementType"
  pin=2
  //recoverWhile=defRecover
}
recordTypeBody ::= '{' (recordBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private recordBodyPart ::= fieldDecl | annotation
fieldDecl ::= typeMemberModifiers qid ':' valueTypeRef fieldBody? {
  implements=["ws.epigraph.schema.parser.psi.AnnotationsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="ws.epigraph.schema.parser.psi.impl.AnnotationsHolderImpl"
  methods=[getName setName getNameIdentifier getTextOffset getPresentation getRecordTypeDef]
  pin=3
}
private fieldBody ::= '{' (fieldBodyPart ','?)* '}'
private fieldBodyPart ::= annotation

/// list

//listTypeDef2 ::= 'list' typeName extendsDecl listTypeBody? // allows inheritance from lists w/o type params
listTypeDef ::= typeDefModifiers anonList typeName extendsDecl? metaDecl? supplementsDecl? listTypeBody? {
  extends="ws.epigraph.schema.parser.psi.impl.SchemaListTypeDefImplBase"
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaListTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaListTypeDefStubElementType"
  pin=2
  //recoverWhile=defRecover
}
listTypeBody ::= '{' (listTypeBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private listTypeBodyPart ::= annotation

/// map

mapTypeDef ::= typeDefModifiers anonMap typeName extendsDecl? metaDecl? supplementsDecl? mapTypeBody? {
  extends="ws.epigraph.schema.parser.psi.impl.SchemaMapTypeDefImplBase"
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaMapTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaMapTypeDefStubElementType"
  pin=2
  //recoverWhile=defRecover
}
mapTypeBody ::= '{' (mapTypeBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private mapTypeBodyPart ::= annotation

/// enum

// abstract?
enumTypeDef ::= 'enum' '[' valueTypeRef ']' typeName metaDecl? enumTypeBody {
  extends="ws.epigraph.schema.parser.psi.impl.SchemaEnumTypeDefImplBase"
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaEnumTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaEnumTypeDefStubElementType"
  pin=1
  //recoverWhile=defRecover
}
enumTypeBody ::= '{' (enumTypeBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private enumTypeBodyPart ::= annotation | enumMemberDecl { recoverWhile = enumPartRecover }
enumMemberDecl ::= qid ':' dataValue enumMemberBody? {
  implements=["ws.epigraph.schema.parser.psi.AnnotationsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="ws.epigraph.schema.parser.psi.impl.AnnotationsHolderImpl"
  methods=[getName setName getNameIdentifier]
  pin=2
}
private enumMemberBody ::='{' (enumMemberBodyPart ','?)* '}'
private enumMemberBodyPart ::= annotation

private enumPartRecover ::= ! (',' | qid | '}')

/// primitive

primitiveTypeDef ::= typeDefModifiers primitiveKind typeName extendsDecl? metaDecl? supplementsDecl? primitiveTypeBody? {
  extends="ws.epigraph.schema.parser.psi.impl.SchemaPrimitiveTypeDefImplBase"
  methods=[getPrimitiveTypeKind]
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaPrimitiveTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaPrimitiveTypeDefStubElementType"
  pin=2
  //recoverWhile=defRecover
}
private primitiveKind ::= 'string' | 'integer' | 'long' | 'double' | 'boolean'
primitiveTypeBody ::= '{' (primitiveBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private primitiveBodyPart ::= annotation

supplementDef ::= 'supplement' qnTypeRef (',' qnTypeRef)* 'with' qnTypeRef {
  methods=[sourceRef supplementedRefs source supplemented getPresentation toString]
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaSupplementDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaSupplementDefStubElementType"
  pin=1
  //recoverWhile=defRecover
}

private defRecover ::= ! ('import' | 'namespace' | 'abstract' | 'record' | ',' | '}' |
                           'map' | 'list' | 'entity' | 'enum' | 'supplement'|
                           'string' | 'integer' | 'long' | 'double' | 'boolean' | 'resource' |
                           'transformer' |
                           'outputProjection' | 'inputProjection' | 'deleteProjection' )

private partRecover ::= ! ('}' | '@' | qid ':' | 'abstract' | 'override' | ',' )
//private partRecover ::= ! ('}' | qid | 'abstract' | 'override' | ',' )

// ============= idl language =============

tagName ::= qid | '_' // `_` is default tag

//                                                                                                           transformer

transformerDef ::= 'transformer' transformerName transformerType transformerDefBody {
  pin = 1
  //recoverWhile = defRecover
}

transformerName ::= qid
transformerType ::= ':' typeRef

private transformerDefBody ::= '{' (transformerBodyPart ','?)* '}'
transformerBodyPart ::= transformerInputProjection | transformerOutputProjection | annotation {
  recoverWhile = transformerBodyRecover
}

transformerInputProjection ::= 'inputProjection' opInputFieldProjection {pin=1}
transformerOutputProjection ::= 'outputProjection' opOutputFieldProjection {pin=1}

private transformerBodyRecover ::= ! ( '}' | ',' | 'inputProjection' | 'outputProjection' | '@' )

//                                                                                                              resource

resourceDef ::= 'resource' resourceName resourceType resourceDefBody {
  pin = 1
  //recoverWhile = defRecover
}

resourceName ::= qid
resourceType ::= ':' valueTypeRef // todo should it be just typeRef ?

private resourceDefBody ::= '{' ( ( operationDef | projectionDef ) ','?)* '}' {
  recoverWhile = defRecover
}

// projection def
projectionDef ::= outputProjectionDef | inputProjectionDef | deleteProjectionDef
outputProjectionDef ::= 'outputProjection' qid ':' typeRef '=' opOutputUnnamedOrRefVarProjection {pin=1}
inputProjectionDef ::= 'inputProjection' qid ':' typeRef '=' opInputUnnamedOrRefVarProjection {pin=1}
deleteProjectionDef ::= 'deleteProjection' qid ':' typeRef '=' '+'? opDeleteUnnamedOrRefVarProjection {pin=1}

// operation def parts
operationName ::= 'default' | qid
operationMethod ::= 'method' ('GET' | 'POST' | 'PUT' | 'DELETE') {pin=1}// add 'PATCH' too?
operationPath ::= 'path' opFieldPath {pin=1}
operationInputType ::= 'inputType' typeRef {pin=1}
operationInputProjection ::= 'inputProjection' opInputFieldProjection {pin=1}
operationOutputType ::= 'outputType' valueTypeRef {pin=1}
operationOutputProjection ::= 'outputProjection' opOutputFieldProjection {pin=1}
operationDeleteProjection ::= 'deleteProjection' '+'? opDeleteFieldProjection {pin=1}

operationDef ::= createOperationDef | readOperationDef | updateOperationDef | deleteOperationDef | customOperationDef {
  name = "Operation declaration"
  recoverWhile = resourceDefBodyRecover
}

private resourceDefBodyRecover ::= ! ( '}' | ',' | '@' | 'read' | 'create' | 'update' | 'delete' | 'custom' |
  ( ('inputProjection' | 'outputProjection' | 'deleteProjection') qid ) )

private operationBodyRecover ::= ! ( '}' | ',' |
  'method' | 'inputType' | 'inputProjection' | 'outputType' | 'outputProjection' | 'deleteProjection' | 'path' |
  '@' | 'read' | 'create' | 'update' | 'delete' | 'custom' )


createOperationDef ::= 'create' operationName? createOperationBody {pin=1}
private createOperationBody ::= '{' (createOperationBodyPart ','?)* '}'
createOperationBodyPart ::= operationPath |
                            operationInputType |
                            operationInputProjection |
                            operationOutputType |
                            operationOutputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

readOperationDef ::= 'read' operationName? readOperationBody {pin=1}
private readOperationBody ::= '{' (readOperationBodyPart ','?)* '}'
readOperationBodyPart ::= operationPath |
                          operationOutputProjection |
                          annotation {
  recoverWhile = operationBodyRecover
}

updateOperationDef ::= 'update' operationName? updateOperationBody {pin=1}
private updateOperationBody ::= '{' (updateOperationBodyPart ','?)* '}'
updateOperationBodyPart ::= operationPath |
                            operationInputType |
                            operationInputProjection |
                            operationOutputType |
                            operationOutputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

deleteOperationDef ::= 'delete' operationName? deleteOperationBody {pin=1}
private deleteOperationBody ::= '{' (deleteOperationBodyPart ','?)* '}'
deleteOperationBodyPart ::= operationPath |
                            operationDeleteProjection |
                            operationOutputType |
                            operationOutputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

customOperationDef ::= 'custom' operationName customOperationBody {pin=1}
private customOperationBody ::= '{' (customOperationBodyPart ','?)* '}'
customOperationBodyPart ::= operationMethod |
                            operationPath |
                            operationInputType |
                            operationInputProjection |
                            operationOutputType |
                            operationOutputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

// ============= op projections =============

opParam ::= ';' '+'? qid ':' typeRef opInputModelProjection /*opParamDefault?*/ /* opParamBody? */ { pin = 1 }
//private opParamDefault ::= '=' datum { pin=1 }    // default is part of opInputModelProjection now
//private opParamBody ::= '{' ( opParamBodyPart ','? )* '}'
//private opParamBodyPart ::= opParam | annotation

private recordModelProjectionRecover ::= ! ( ',' | ')' | qid )

opKeyProjection ::= 'projection' opInputModelProjection { pin=1 }

// op path --------------------------------------------------------

// no tails, no branching, no meta

// :tag / field / * / field
// :tag { ;foo:String } / field { ;foo:String } / * { ;foo:String }

opVarPath ::= ( ':' tagName)? opVarPathBody? opModelPath
private opVarPathBody ::= '{' (opModelPathProperty ','?)* '}' {pin=1}

opModelPathProperty ::= opParam | annotation

opModelPath ::= ( opRecordModelPath
                | opMapModelPath
                )?

// op record path
opRecordModelPath ::= '/' opFieldPathEntry
opFieldPathEntry ::= qid opFieldPath
opFieldPath ::= /* opFieldPathBody? */ opVarPath // {pin=1}
//private opFieldPathBody ::= '{' (opFieldPathBodyPart ','? )* '}'
//opFieldPathBodyPart ::= opParam | annotation

// op map path
opMapModelPath ::= '/' opPathKeyProjection opVarPath {pin=2}
opPathKeyProjection ::= '.' opPathKeyProjectionBody? {pin=1}
opPathKeyProjectionBody ::= '{' (opPathKeyProjectionPart ','?)*  '}' {pin=1}
opPathKeyProjectionPart ::= opKeyProjection | opParam | annotation

// -------------------------------------------------------------------------------------------------------------- output

opOutputVarProjection ::= opOutputNamedVarProjection | opOutputUnnamedOrRefVarProjection
opOutputUnnamedOrRefVarProjection ::= opOutputVarProjectionRef | opOutputUnnamedVarProjection
opOutputNamedVarProjection ::= '$' qid '=' opOutputUnnamedOrRefVarProjection {pin = 3}
opOutputVarProjectionRef ::= '$' qid {pin = 1}
opOutputUnnamedVarProjection ::= ( opOutputMultiTagProjection | opOutputSingleTagProjection ) opOutputVarPolymorphicTail?
private opOutputBracedVarProjection ::= '(' opOutputVarProjection ')'

opOutputMultiTagProjection ::= ':' '(' (opOutputMultiTagProjectionItem ','?)* ')' {pin=2}
opOutputSingleTagProjection ::= ( ':' tagName)? opOutputModelProjection
opOutputMultiTagProjectionItem ::= tagName opOutputModelProjection

opOutputVarPolymorphicTail ::= '~' '~' ( opOutputVarTailItem | opOutputVarMultiTail ) {pin=2}
opOutputVarMultiTail ::= '(' (opOutputVarTailItem ','?)* ')' {pin=1}
opOutputVarTailItem ::= typeRef opOutputVarProjection

opOutputModelPolymorphicTail ::= '~' ( opOutputModelTailItem | opOutputModelMultiTail ) // {pin=1}
opOutputModelMultiTail ::= '(' (opOutputModelTailItem ','?)* ')' {pin=1}
opOutputModelTailItem ::= typeRef opOutputModelProjection

opOutputModelProjection ::= opOutputNamedModelProjection | opOutputUnnamedOrRefModelProjection
opOutputUnnamedOrRefModelProjection ::= opOutputModelProjectionRef | opOutputUnnamedModelProjection
opOutputNamedModelProjection ::= '$' qid '=' opOutputUnnamedOrRefModelProjection {pin = 3}
opOutputModelProjectionRef ::= '$' qid {pin = 1}
opOutputUnnamedModelProjection ::= opOutputModelProjectionProperties ?
                                   ( ( opOutputRecordModelProjection
                                     | opOutputListModelProjection
                                     | opOutputMapModelProjection
                                     ) opOutputModelPolymorphicTail?
                                   )?

private opOutputModelProjectionProperties ::= '{' (opOutputModelProperty ','?)* '}' {pin=1}
opOutputModelProperty ::= opParam | annotation | opOutputModelMeta
opOutputModelMeta ::= 'meta' ':' opOutputModelProjection


// op output record
opOutputRecordModelProjection ::= '(' (opOutputFieldProjectionEntry ','?)* ')' { pin=1 }
opOutputFieldProjectionEntry ::= qid opOutputFieldProjection { pin=1 recoverWhile=recordModelProjectionRecover}
opOutputFieldProjection ::= /* opOutputComplexFieldProjection | */ opOutputSimpleFieldProjection
//private opOutputComplexFieldProjection ::= '{' (opOutputFieldProjectionBodyPart ','? )* '}' opOutputVarProjection
private opOutputSimpleFieldProjection ::= opOutputVarProjection
//opOutputFieldProjectionBodyPart ::= opParam | annotation

// op output list
opOutputListModelProjection ::= '*' ( opOutputBracedVarProjection | opOutputVarProjection ) { pin=1 }

// op output map
opOutputMapModelProjection ::= opOutputKeyProjection ( opOutputBracedVarProjection | opOutputVarProjection )  { pin=1 }
opOutputKeyProjection ::= '[' opOutputKeyProjectionInt ']' {pin=1}
private opOutputKeyProjectionInt ::= ('required' ','?| 'forbidden' ','?)? (opOutputKeyProjectionPart ','?)*
opOutputKeyProjectionPart ::= opKeyProjection | opParam | annotation {
  recoverWhile = opOutputKeyProjectionRecover
}
private opOutputKeyProjectionRecover ::= ! ( ']' | ',' | ';' | 'projection' )

// --------------------------------------------------------------------------------------------------------------- input


opInputVarProjection ::= opInputNamedVarProjection | opInputUnnamedOrRefVarProjection
opInputUnnamedOrRefVarProjection ::= opInputVarProjectionRef | opInputUnnamedVarProjection
opInputNamedVarProjection ::= '$' qid '=' opInputUnnamedOrRefVarProjection {pin = 3}
opInputVarProjectionRef ::= '$' qid {pin = 1}
opInputUnnamedVarProjection ::= ( opInputMultiTagProjection | opInputSingleTagProjection ) opInputVarPolymorphicTail?
private opInputBracedVarProjection ::= '(' opInputVarProjection ')'

opInputMultiTagProjection ::= ':' '(' (opInputMultiTagProjectionItem ','?)* ')' {pin=2}
opInputSingleTagProjection ::= ( ( ':' '+'? tagName ) | '+' )? opInputModelProjection
opInputMultiTagProjectionItem ::= '+'? tagName opInputModelProjection

opInputVarPolymorphicTail ::= '~' '~' ( opInputVarTailItem | opInputVarMultiTail ) {pin=2}
opInputVarMultiTail ::= '(' (opInputVarTailItem ','?)* ')' {pin=1}
opInputVarTailItem ::= typeRef opInputVarProjection

opInputModelPolymorphicTail ::= '~' ( opInputModelTailItem | opInputModelMultiTail ) // {pin=1}
opInputModelMultiTail ::= '(' (opInputModelTailItem ','?)* ')' {pin=1}
opInputModelTailItem ::= typeRef opInputModelProjection

opInputModelProjection ::= opInputNamedModelProjection | opInputUnnamedOrRefModelProjection
opInputUnnamedOrRefModelProjection ::= opInputModelProjectionRef | opInputUnnamedModelProjection
opInputNamedModelProjection ::= '$' qid '=' opInputUnnamedOrRefModelProjection {pin = 3}
opInputModelProjectionRef ::= '$' qid {pin = 1}
opInputUnnamedModelProjection ::= opInputModelProjectionProperties ?
                                  ( ( opInputRecordModelProjection
                                    | opInputListModelProjection
                                    | opInputMapModelProjection
                                    ) opInputModelPolymorphicTail?
                                  )?

private opInputModelProjectionProperties ::= '{' (opInputModelProperty ','?)* '}' {pin=1}
opInputModelProperty ::= opInputDefaultValue | opParam | annotation | opInputModelMeta {
  recoverWhile = opInputModelPropertyRecover
}
private opInputModelPropertyRecover ::= ! ( '}' | ',' | 'default' | ';' | '@' | 'meta' )
opInputDefaultValue ::= 'default' ':' datum {pin=1}

opInputModelMeta ::= 'meta' ':' '+'? opInputModelProjection

// op input record
opInputRecordModelProjection ::= '(' (opInputFieldProjectionEntry ','?)* ')' { pin=1 }
opInputFieldProjectionEntry ::= '+'? qid opInputFieldProjection { // '+' means that field itself must be present
 pin=2
 recoverWhile=recordModelProjectionRecover
}
opInputFieldProjection ::= /* opInputComplexFieldProjection | */ opInputSimpleFieldProjection
//private opInputComplexFieldProjection ::= '{' (opInputFieldProjectionBodyPart ','? )* '}' opInputVarProjection
private opInputSimpleFieldProjection ::= opInputVarProjection

// op input list
opInputListModelProjection ::= '*' ( opInputBracedVarProjection | opInputVarProjection ) { pin=1 }

// op input map
opInputMapModelProjection ::= opInputKeyProjection ( opInputBracedVarProjection | opInputVarProjection ) { pin=1 }
opInputKeyProjection ::= '[' opInputKeyProjectionInt ']' {pin=1} // todo add required|forbidden as in delete projection
private opInputKeyProjectionInt ::= ('required' ','?| 'forbidden' ','?)? (opInputKeyProjectionPart ','?)*
opInputKeyProjectionPart ::= opKeyProjection | opParam | annotation {
  recoverWhile = opInputKeyProjectionRecover
}
private opInputKeyProjectionRecover ::= ! ( ']' | ','  | ';' | 'projection' )

// -------------------------------------------------------------------------------------------------------------- delete

// can delete current entity or a link to bestFriend:
// + :record ( bestFriend )

// can delete current entity or a bestFriend entity
// + :record ( +bestFriend )

// currently we don't allow to delete models (tags)

opDeleteVarProjection ::= opDeleteNamedVarProjection | opDeleteUnnamedOrRefVarProjection
opDeleteUnnamedOrRefVarProjection ::= opDeleteVarProjectionRef | opDeleteUnnamedVarProjection
opDeleteNamedVarProjection ::= '$' qid '=' opDeleteUnnamedOrRefVarProjection {pin = 3}
opDeleteVarProjectionRef ::= '$' qid {pin = 1}
opDeleteUnnamedVarProjection ::= ( opDeleteMultiTagProjection | opDeleteSingleTagProjection ) opDeleteVarPolymorphicTail?
private opDeleteBracedVarProjection ::= '(' opDeleteVarProjection ')'

opDeleteMultiTagProjection ::= ':' '(' (opDeleteMultiTagProjectionItem ','?)* ')' {pin=2}
opDeleteSingleTagProjection ::= ( ':' tagName)? opDeleteModelProjection
opDeleteMultiTagProjectionItem ::= tagName opDeleteModelProjection

opDeleteVarPolymorphicTail ::= '~' '~' ( opDeleteVarTailItem | opDeleteVarMultiTail ) {pin=2}
opDeleteVarMultiTail ::= '(' (opDeleteVarTailItem ','?)* ')' {pin=1}
opDeleteVarTailItem ::= typeRef opDeleteVarProjection

opDeleteModelPolymorphicTail ::= '~' ( opDeleteModelTailItem | opDeleteModelMultiTail ) // {pin=1}
opDeleteModelMultiTail ::= '(' (opDeleteModelTailItem ','?)* ')' {pin=1}
opDeleteModelTailItem ::= typeRef opDeleteModelProjection

opDeleteModelProjection ::= opDeleteNamedModelProjection | opDeleteUnnamedOrRefModelProjection
opDeleteUnnamedOrRefModelProjection ::= opDeleteModelProjectionRef | opDeleteUnnamedModelProjection
opDeleteNamedModelProjection ::= '$' qid '=' opDeleteUnnamedOrRefModelProjection {pin = 3}
opDeleteModelProjectionRef ::= '$' qid {pin = 1}
opDeleteUnnamedModelProjection ::= opDeleteModelProjectionProperties ?
                                   ( ( opDeleteRecordModelProjection
                                     | opDeleteListModelProjection
                                     | opDeleteMapModelProjection
                                     ) opDeleteModelPolymorphicTail?
                                   )?

private opDeleteModelProjectionProperties ::= '{' (opDeleteModelProperty ','?)* '}' {pin=1}
opDeleteModelProperty ::= opParam | annotation

// op delete record
opDeleteRecordModelProjection ::= '(' (opDeleteFieldProjectionEntry ','?)* ')' { pin=1 }
opDeleteFieldProjectionEntry ::= '+'? qid opDeleteFieldProjection { pin=2 recoverWhile=recordModelProjectionRecover }
opDeleteFieldProjection ::= /* opDeleteComplexFieldProjection | */ opDeleteSimpleFieldProjection
//private opDeleteComplexFieldProjection ::= '{' (opDeleteFieldProjectionBodyPart ','? )* '}' opDeleteVarProjection
private opDeleteSimpleFieldProjection ::= opDeleteVarProjection
//opDeleteFieldProjectionBodyPart ::= opParam | annotation

// op delete list
opDeleteListModelProjection ::= '*' '+'? ( opDeleteBracedVarProjection | opDeleteVarProjection ) { pin=1 }

// op delete map
opDeleteMapModelProjection ::= opDeleteKeyProjection '+'? ( opDeleteBracedVarProjection | opDeleteVarProjection ) { pin=1 }
opDeleteKeyProjection ::= '[' opDeleteKeyProjectionInt ']' {pin=1}
private opDeleteKeyProjectionInt ::= ('required' ','?| 'forbidden' ','?)? (opDeleteKeyProjectionPart ','?)*
opDeleteKeyProjectionPart ::= opKeyProjection | opParam | annotation {
  recoverWhile = opDeleteKeyProjectionRecover
}
private opDeleteKeyProjectionRecover ::= ! ( ']' | ','  | ';' | 'projection' )

// ============= data language =============
// please keep in sync with data language from url.bnf

dataValue ::= data | datum
private dataTypeSpec ::= typeRef

data ::= dataTypeSpec? '<' dataEntry* '>' {pin=2}
dataEntry ::= qid ':' datum ','? {pin=2 recoverWhile=dataValueRecover}

datum ::= recordDatum | mapDatum | listDatum | primitiveDatum | enumDatum | nullDatum

recordDatum ::= dataTypeSpec? '{' recordDatumEntry* '}' {pin=2 extends=datum}
recordDatumEntry ::= qid ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

mapDatum ::= dataTypeSpec? '(' mapDatumEntry* ')' {pin=2 extends=datum}
mapDatumEntry ::= datum ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

listDatum ::= dataTypeSpec? '[' (dataValue ','?)* ']' {pin=2 extends=datum}

primitiveDatum ::= (dataTypeSpec '@')? (string | number | boolean) {pin=2 extends=datum}

enumDatum ::= '#' qid {extends=datum pin=1}

nullDatum ::= (dataTypeSpec '@')? 'null' {pin=2 extends=datum}

private dataValueRecover ::= ! ( '#' | qid | primitiveDatum | '}' | ')' | '>' | ']' | 'abstract' | 'override' | ',' )