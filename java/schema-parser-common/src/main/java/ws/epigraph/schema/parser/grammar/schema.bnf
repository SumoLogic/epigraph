/*
 * Copyright 2017 Sumo Logic
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="ws.epigraph.schema.parser.SchemaParser"

  elementTypeHolderClass="ws.epigraph.schema.lexer.SchemaElementTypes"
  elementTypePrefix="S_"
  elementTypeClass="ws.epigraph.schema.lexer.SchemaElementType"
  tokenTypeClass="ws.epigraph.schema.lexer.SchemaElementType"

  psiClassPrefix="Schema"
  psiImplClassSuffix="Impl"
  psiPackage="ws.epigraph.schema.parser.psi"
  psiImplPackage="ws.epigraph.schema.parser.psi.impl"
  psiImplUtilClass="ws.epigraph.schema.parser.psi.impl.SchemaPsiImplUtil"

  generateTokenAccessors=true

  tokens=[
    NAMESPACE = 'namespace'
    IMPORT = 'import'
    MAP = 'map'
    RETRO = 'retro'
    LIST = 'list'
    RECORD = 'record'
    EXTENDS = 'extends'
    ENTITY='entity'
    ENUM='enum'
    META='meta'
    SUPPLEMENT='supplement'
    SUPPLEMENTS='supplements'
    WITH='with'
    ABSTRACT='abstract'
    OVERRIDE='override'
    // todo add final, primitive, any?

    INTEGER_T='integer'
    LONG_T='long'
    DOUBLE_T='double'
    BOOLEAN_T='boolean'
    STRING_T='string'

    // idl - specific
    FORBIDDEN = 'forbidden'
    REQUIRED = 'required'
    DEFAULT = 'default'
    RESOURCE = 'resource'
    TRANSFORMER = 'transformer'
    // http methods
    GET = 'GET'
    POST = 'POST'
    PUT = 'PUT'
    DELETE = 'DELETE'
    // operation types
    OP_READ = 'read'
    OP_CREATE = 'create'
    OP_UPDATE = 'update'
    OP_DELETE = 'delete'
    OP_CUSTOM = 'custom'
    //
    METHOD = 'method'
    INPUT_TYPE = 'inputType'
    OUTPUT_TYPE = 'outputType'
    OUTPUT_PROJ = 'outputProjection'
    INPUT_PROJ = 'inputProjection'
    DELETE_PROJ = 'deleteProjection'
    PATH = 'path'
    PROJECTION = 'projection'

    COLON = ':'
    DOT = '.'
    COMMA = ','
    SEMICOLON = ';'
    EQ = '='
    CURLY_LEFT = '{'
    CURLY_RIGHT = '}'
    BRACKET_LEFT = '['
    BRACKET_RIGHT = ']'
    TILDA = '~'
    STAR = '*'
    PLUS = '+'
    AT = '@'
    HASH = '#'
    UNDERSCORE = '_'
    BANG = '!'
    DOLLAR = '$'

    space='regexp:\s+'
    comment='regexp://.*'
    block_comment='regexp:/\*((?<!\*/)(.|\n))*'

    id = 'regexp:(\p{Alpha}\p{Alnum}*)|(`([^`]*)`)'

    // for data lang
    NULL = 'null'
    SLASH = '/'
    PAREN_LEFT = '('
    PAREN_RIGHT = ')'
    ANGLE_LEFT = '<'
    ANGLE_RIGHT = '>'

    number="regexp:([0-9])+"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    boolean="regexp:true|false"
  ]

  pin(".*Body") = 1
//  recoverWhile(".*Body") = "declBodyRecover"

  recoverWhile(".*Part") = "partRecover"

  // extends(".*.TypeDef") = "typeDef" // types hierarchy doesn't work with stubs
  implements(".*TypeDef")="ws.epigraph.schema.parser.psi.SchemaTypeDef"

  implements(".*TypeBody") = "ws.epigraph.schema.parser.psi.AnnotationsHolder"
  extends(".*TypeBody") = "ws.epigraph.schema.parser.psi.impl.AnnotationsHolderImpl"
}

root ::= namespaceDecl imports defs

// either quoted or unquoted id
qid ::= id {
  methods=[getName setName getCanonicalName]
}

namespaceDecl ::= 'namespace' qn namespaceBody? {
  methods=[getFqn toString]
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaNamespaceDeclStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaNamespaceDeclStubElementType"
  pin=1
  recoverWhile="namespaceDeclRecover"
}
private namespaceDeclRecover ::= ! ('import' | 'namespace' | 'abstract' | 'record' | ',' |
                           'map' | 'list' | 'entity' | 'enum' | 'supplement'|
                           'string' | 'integer' | 'long' | 'double' | 'boolean' | 'resource' |
                           'transformer' |
                           'outputProjection' | 'inputProjection' | 'deleteProjection' )

private namespaceBody ::= '{' namespaceBodyPart* '}'
private namespaceBodyPart ::= annotation // | ...

imports ::= importStatement*
importStatement ::= 'import' qn {pin=1 recoverWhile="importRecover"}
private importRecover ::= namespaceDeclRecover


qnSegment ::= qid {
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[getName setName getNameIdentifier getSchemaFqn getSchemaFqnTypeRef isLast getReference getQn]
}
qn ::= qnSegment ('.' qnSegment)* { methods=[getQn] }

private typeName ::= qid
typeRef ::= qnTypeRef | anonList | anonMap {name="type"}
qnTypeRef ::= qn { methods=[resolve] extends="typeRef" }
entityTagRef ::= qid {
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[setName getNameIdentifier getReference]
}

/// defs

defs ::= def*
private def ::= typeDefWrapper | supplementDef | resourceDef | transformerDef | projectionDef {recoverWhile="defRecover"}

// ============= schema language =============

// need a wrapper because inheritance doesn't play nicely with PSI stubs
typeDefWrapper ::= entityTypeDef | recordTypeDef | mapTypeDef | listTypeDef | primitiveTypeDef | enumTypeDef {
  name="type definition"
  methods=[getElement delete toString]
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaTypeDefWrapperStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaTypeDefWrapperStubElementType"
}

private typeDefModifiers ::= 'abstract'?
private typeMemberModifiers ::= 'override'? 'abstract'?

valueTypeRef ::= typeRef retroDecl?

anonList ::= 'list' '[' valueTypeRef ']' {pin=1 extends="typeRef" }
anonMap ::= 'map' '[' typeRef ',' valueTypeRef ']' {pin=1 extends="typeRef" }

extendsDecl ::= 'extends' qnTypeRef (',' qnTypeRef)* {pin=1}
supplementsDecl ::= 'supplements' qnTypeRef (',' qnTypeRef)* {pin=1}

// TODO Fix: entityTagRef doesn't resolve
retroDecl ::= 'retro' entityTagRef

annotation ::= '@' qnTypeRef datum? {
  name="annotation"
//  implements="com.intellij.psi.PsiNamedElement"
//  methods = [getName setName getNameIdentifier]
  pin = 1
}

metaDecl ::= 'meta' qnTypeRef { pin=1 } // we don't allow anonList or anonMap as meta

/// entity

entityTypeDef ::= typeDefModifiers 'entity' typeName extendsDecl? supplementsDecl? entityTypeBody? {
  methods=[supplemented]
  extends="ws.epigraph.schema.parser.psi.impl.SchemaEntityTypeDefImplBase"
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaEntityTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaEntityTypeDefStubElementType"
  pin=2
  //recoverWhile=defRecover
}
entityTypeBody ::= '{' (entityBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private entityBodyPart ::= entityTagDecl | annotation
entityTagDecl ::= typeMemberModifiers qid ':' typeRef entityMemberBody? {
  implements=["ws.epigraph.schema.parser.psi.AnnotationsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="ws.epigraph.schema.parser.psi.impl.AnnotationsHolderImpl"
  methods=[getName setName getNameIdentifier getTextOffset getPresentation getEntityDef]
  pin=3
}
private entityMemberBody ::= '{' (entityMemberBodyPart ','?)* '}'
private entityMemberBodyPart ::= annotation

/// record

recordTypeDef ::= typeDefModifiers 'record' typeName extendsDecl? metaDecl? supplementsDecl? recordTypeBody? {
  methods=[supplemented]
  extends="ws.epigraph.schema.parser.psi.impl.SchemaRecordTypeDefImplBase"
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaRecordTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaRecordTypeDefStubElementType"
  pin=2
  //recoverWhile=defRecover
}
recordTypeBody ::= '{' (recordBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private recordBodyPart ::= fieldDecl | annotation
fieldDecl ::= typeMemberModifiers qid ':' valueTypeRef fieldBody? {
  implements=["ws.epigraph.schema.parser.psi.AnnotationsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="ws.epigraph.schema.parser.psi.impl.AnnotationsHolderImpl"
  methods=[getName setName getNameIdentifier getTextOffset getPresentation getRecordTypeDef]
  pin=3
}
private fieldBody ::= '{' (fieldBodyPart ','?)* '}'
private fieldBodyPart ::= annotation

/// list

//listTypeDef2 ::= 'list' typeName extendsDecl listTypeBody? // allows inheritance from lists w/o type params
listTypeDef ::= typeDefModifiers anonList typeName extendsDecl? metaDecl? supplementsDecl? listTypeBody? {
  extends="ws.epigraph.schema.parser.psi.impl.SchemaListTypeDefImplBase"
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaListTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaListTypeDefStubElementType"
  pin=2
  //recoverWhile=defRecover
}
listTypeBody ::= '{' (listTypeBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private listTypeBodyPart ::= annotation

/// map

mapTypeDef ::= typeDefModifiers anonMap typeName extendsDecl? metaDecl? supplementsDecl? mapTypeBody? {
  extends="ws.epigraph.schema.parser.psi.impl.SchemaMapTypeDefImplBase"
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaMapTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaMapTypeDefStubElementType"
  pin=2
  //recoverWhile=defRecover
}
mapTypeBody ::= '{' (mapTypeBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private mapTypeBodyPart ::= annotation

/// enum

// abstract?
enumTypeDef ::= 'enum' '[' valueTypeRef ']' typeName metaDecl? enumTypeBody {
  extends="ws.epigraph.schema.parser.psi.impl.SchemaEnumTypeDefImplBase"
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaEnumTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaEnumTypeDefStubElementType"
  pin=1
  //recoverWhile=defRecover
}
enumTypeBody ::= '{' (enumTypeBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private enumTypeBodyPart ::= annotation | enumMemberDecl { recoverWhile = enumPartRecover }
enumMemberDecl ::= qid ':' dataValue enumMemberBody? {
  implements=["ws.epigraph.schema.parser.psi.AnnotationsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="ws.epigraph.schema.parser.psi.impl.AnnotationsHolderImpl"
  methods=[getName setName getNameIdentifier]
  pin=2
}
private enumMemberBody ::='{' (enumMemberBodyPart ','?)* '}'
private enumMemberBodyPart ::= annotation

private enumPartRecover ::= ! (',' | qid | '}')

/// primitive

primitiveTypeDef ::= typeDefModifiers primitiveKind typeName extendsDecl? metaDecl? supplementsDecl? primitiveTypeBody? {
  extends="ws.epigraph.schema.parser.psi.impl.SchemaPrimitiveTypeDefImplBase"
  methods=[getPrimitiveTypeKind]
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaPrimitiveTypeDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaPrimitiveTypeDefStubElementType"
  pin=2
  //recoverWhile=defRecover
}
private primitiveKind ::= 'string' | 'integer' | 'long' | 'double' | 'boolean'
primitiveTypeBody ::= '{' (primitiveBodyPart ','?)* '}' {
//  recoverWhile = defRecover
}
private primitiveBodyPart ::= annotation

supplementDef ::= 'supplement' qnTypeRef (',' qnTypeRef)* 'with' qnTypeRef {
  methods=[sourceRef supplementedRefs source supplemented getPresentation toString]
  stubClass="ws.epigraph.schema.parser.psi.stubs.SchemaSupplementDefStub"
  elementTypeClass="ws.epigraph.schema.parser.psi.stubs.SchemaSupplementDefStubElementType"
  pin=1
  //recoverWhile=defRecover
}

private defRecover ::= ! ('import' | 'namespace' | 'abstract' | 'record' | ',' | '}' |
                           'map' | 'list' | 'entity' | 'enum' | 'supplement'|
                           'string' | 'integer' | 'long' | 'double' | 'boolean' | 'resource' |
                           'transformer' |
                           'outputProjection' | 'inputProjection' | 'deleteProjection' )

private partRecover ::= ! ('}' | '@' | qid ':' | 'abstract' | 'override' | ',' )
//private partRecover ::= ! ('}' | qid | 'abstract' | 'override' | ',' )

// ============= idl language =============

//                                                                                                          common parts
tagName ::= qid | '_' // `_` is default tag

//                                                                                                           transformer

transformerDef ::= 'transformer' transformerName transformerType transformerDefBody {
  pin = 1
  //recoverWhile = defRecover
}

transformerName ::= qid
transformerType ::= ':' typeRef

private transformerDefBody ::= '{' (transformerBodyPart ','?)* '}'
transformerBodyPart ::= inputProjection | outputProjection | annotation {
  recoverWhile = transformerBodyRecover
}

private transformerBodyRecover ::= ! ( '}' | ',' | 'inputProjection' | 'outputProjection' | '@' )

//                                                                                                              resource

resourceDef ::= 'resource' resourceName resourceType resourceDefBody {
  pin = 1
  //recoverWhile = defRecover
}

resourceName ::= qid
resourceType ::= ':' valueTypeRef // todo should it be just typeRef ?

private resourceDefBody ::= '{' ( ( operationDef | projectionDef ) ','?)* '}' {
  recoverWhile = defRecover
}

// projection def
projectionDef ::= outputProjectionDef | inputProjectionDef | deleteProjectionDef
outputProjectionDef ::= 'outputProjection' qid ':' typeRef '=' opUnnamedOrRefEntityProjection {pin=1}
inputProjectionDef ::= 'inputProjection' qid ':' typeRef '=' '+'? opUnnamedOrRefEntityProjection {pin=1}
deleteProjectionDef ::= 'deleteProjection' qid ':' typeRef '=' '+'? opUnnamedOrRefEntityProjection {pin=1}

// operation def parts
operationName ::= 'default' | qid
operationMethod ::= 'method' ('GET' | 'POST' | 'PUT' | 'DELETE') {pin=1}// add 'PATCH' too?
operationPath ::= 'path' opFieldPath {pin=1}
operationInputType ::= 'inputType' typeRef {pin=1}
operationOutputType ::= 'outputType' valueTypeRef {pin=1}

operationDef ::= createOperationDef | readOperationDef | updateOperationDef | deleteOperationDef | customOperationDef {
  name = "Operation declaration"
  recoverWhile = resourceDefBodyRecover
}

private resourceDefBodyRecover ::= ! ( '}' | ',' | '@' | 'read' | 'create' | 'update' | 'delete' | 'custom' |
  ( ('inputProjection' | 'outputProjection' | 'deleteProjection') qid ) )

private operationBodyRecover ::= ! ( '}' | ',' |
  'method' | 'inputType' | 'inputProjection' | 'outputType' | 'outputProjection' | 'deleteProjection' | 'path' |
  '@' | 'read' | 'create' | 'update' | 'delete' | 'custom' )

outputProjection ::= 'outputProjection' opFieldProjection {pin=1}
inputProjection ::= 'inputProjection' '+'? opFieldProjection {pin=1}
deleteProjection ::= 'deleteProjection' '+'? opFieldProjection {pin=1}

createOperationDef ::= 'create' operationName? createOperationBody {pin=1}
private createOperationBody ::= '{' (createOperationBodyPart ','?)* '}'
createOperationBodyPart ::= operationPath |
                            operationInputType |
                            inputProjection |
                            operationOutputType |
                            outputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

readOperationDef ::= 'read' operationName? readOperationBody {pin=1}
private readOperationBody ::= '{' (readOperationBodyPart ','?)* '}'
readOperationBodyPart ::= operationPath |
                          outputProjection |
                          annotation {
  recoverWhile = operationBodyRecover
}

updateOperationDef ::= 'update' operationName? updateOperationBody {pin=1}
private updateOperationBody ::= '{' (updateOperationBodyPart ','?)* '}'
updateOperationBodyPart ::= operationPath |
                            operationInputType |
                            inputProjection |
                            operationOutputType |
                            outputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

deleteOperationDef ::= 'delete' operationName? deleteOperationBody {pin=1}
private deleteOperationBody ::= '{' (deleteOperationBodyPart ','?)* '}'
deleteOperationBodyPart ::= operationPath |
                            deleteProjection |
                            operationOutputType |
                            outputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

customOperationDef ::= 'custom' operationName customOperationBody {pin=1}
private customOperationBody ::= '{' (customOperationBodyPart ','?)* '}'
customOperationBodyPart ::= operationMethod |
                            operationPath |
                            operationInputType |
                            inputProjection |
                            operationOutputType |
                            outputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

// ============= op projections =============

opParam ::= ';' '+'? qid ':' typeRef opModelProjection /*opParamDefault?*/ /* opParamBody? */ { pin = 1 }
//private opParamDefault ::= '=' datum { pin=1 }    // default is part of projection now
//private opParamBody ::= '{' ( opParamBodyPart ','? )* '}'
//private opParamBodyPart ::= opParam | annotation

private recordModelProjectionRecover ::= ! ( ',' | ')' | qid )

opKeyProjection ::= 'projection' ':' opModelProjection { pin=1 }

// ---------------------------------------------------------------------------------------------------------------- path

// no tails, no branching, no meta

// :tag / field / * / field
// :tag { ;foo:String } / field { ;foo:String } / * { ;foo:String }

opVarPath ::= ( ':' tagName)? opVarPathBody? opModelPath
private opVarPathBody ::= '{' (opModelPathProperty ','?)* '}' {pin=1}

opModelPathProperty ::= opParam | annotation

// todo: missing body here
opModelPath ::= ( opRecordModelPath
                | opMapModelPath
                )?

// op record path
opRecordModelPath ::= '/' opFieldPathEntry
opFieldPathEntry ::= qid opFieldPath
opFieldPath ::= /* opFieldPathBody? */ opVarPath // {pin=1}
//private opFieldPathBody ::= '{' (opFieldPathBodyPart ','? )* '}'
//opFieldPathBodyPart ::= opParam | annotation

// op map path
opMapModelPath ::= '/' opPathKeyProjection opVarPath {pin=2}
opPathKeyProjection ::= '.' opPathKeyProjectionBody? {pin=1}
opPathKeyProjectionBody ::= '{' (opPathKeyProjectionPart ','?)*  '}' {pin=1}
opPathKeyProjectionPart ::= opKeyProjection | opParam | annotation

// -------------------------------------------------------------------------------------------------------------- output

opEntityProjection ::= opNamedEntityProjection | opUnnamedOrRefEntityProjection
opUnnamedOrRefEntityProjection ::= opEntityProjectionRef | opUnnamedEntityProjection
opNamedEntityProjection ::= '$' qid '=' opUnnamedOrRefEntityProjection {pin = 3}
opEntityProjectionRef ::= '$' qid {pin = 1}
opUnnamedEntityProjection ::= ( opMultiTagProjection | opSingleTagProjection ) opEntityPolymorphicTail?
private opBracedEntityProjection ::= '(' opEntityProjection ')'

opMultiTagProjection ::= ':' '(' (opMultiTagProjectionItem ','?)* ')' {pin=2}
opSingleTagProjection ::= ( ( ':' '+'? tagName) | '+' )? opModelProjection
opMultiTagProjectionItem ::= '+'? tagName opModelProjection

opEntityPolymorphicTail ::= ':' '~' ( opEntityTailItem | opEntityMultiTail ) {pin=2}
opEntityMultiTail ::= '(' (opEntityTailItem ','?)* ')' {pin=1}
opEntityTailItem ::= typeRef opEntityProjection

opModelPolymorphicTail ::= '~' ( opModelTailItem | opModelMultiTail ) // {pin=1}
opModelMultiTail ::= '(' (opModelTailItem ','?)* ')' {pin=1}
opModelTailItem ::= typeRef opModelProjection

opModelProjection ::= opNamedModelProjection | opUnnamedOrRefModelProjection
opUnnamedOrRefModelProjection ::= opModelProjectionRef | opUnnamedModelProjection
opNamedModelProjection ::= '$' qid '=' opUnnamedOrRefModelProjection {pin = 3}
opModelProjectionRef ::= '$' qid {pin = 1}
opUnnamedModelProjection ::= opModelProjectionProperties ?
                                   ( ( opRecordModelProjection
                                     | opListModelProjection
                                     | opMapModelProjection
                                     ) opModelPolymorphicTail?
                                   )?

private opModelProjectionProperties ::= '{' (opModelProperty ','?)* '}' {pin=1}
opModelProperty ::= opDefaultValue | opParam | annotation | opModelMeta {
  recoverWhile = opModelPropertyRecover
}
private opModelPropertyRecover ::= ! ( '}' | ',' | 'default' | ';' | '@' | 'meta' )
opDefaultValue ::= 'default' ':' datum {pin=1}

opModelMeta ::= 'meta' ':' '+'? opModelProjection

// op output record
opRecordModelProjection ::= '(' (opFieldProjectionEntry ','?)* ')' { pin=1 }
opFieldProjectionEntry ::= '+'? qid opFieldProjection { pin=2 recoverWhile=recordModelProjectionRecover}
opFieldProjection ::= opEntityProjection

// op output list
opListModelProjection ::= '*' '+'? ( opBracedEntityProjection | opEntityProjection ) { pin=1 }

// op output map
opMapModelProjection ::= opKeySpec '+'? ( opBracedEntityProjection | opEntityProjection )  { pin=1 }
opKeySpec ::= '[' opKeySpecInt ']' {pin=1}
private opKeySpecInt ::= ('required' ','?| 'forbidden' ','?)? (opKeySpecPart ','?)*
opKeySpecPart ::= opKeyProjection | opParam | annotation {
  recoverWhile = opKeySpecRecover
}
private opKeySpecRecover ::= ! ( ']' | ',' | ';' | 'projection' )

// ============= data language =============
// please keep in sync with data language from url.bnf

dataValue ::= data | datum
private dataTypeSpec ::= typeRef

data ::= dataTypeSpec? '<' dataEntry* '>' {pin=2}
dataEntry ::= qid ':' datum ','? {pin=2 recoverWhile=dataValueRecover}

datum ::= recordDatum | mapDatum | listDatum | primitiveDatum | enumDatum | nullDatum

recordDatum ::= dataTypeSpec? '{' recordDatumEntry* '}' {pin=2 extends=datum}
recordDatumEntry ::= qid ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

mapDatum ::= dataTypeSpec? '(' mapDatumEntry* ')' {pin=2 extends=datum}
mapDatumEntry ::= datum ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

listDatum ::= dataTypeSpec? '[' (dataValue ','?)* ']' {pin=2 extends=datum}

primitiveDatum ::= (dataTypeSpec '@')? (string | number | boolean) {pin=2 extends=datum}

enumDatum ::= '#' qid {extends=datum pin=1}

nullDatum ::= (dataTypeSpec '@')? 'null' {pin=2 extends=datum}

private dataValueRecover ::= ! ( '#' | qid | primitiveDatum | '}' | ')' | '>' | ']' | 'abstract' | 'override' | ',' )
