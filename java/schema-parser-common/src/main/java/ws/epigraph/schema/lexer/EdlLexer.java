/*
 * Copyright 2016 Sumo Logic
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package ws.epigraph.schema.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static ws.epigraph.schema.lexer.EdlElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>EdlLexer.flex</tt>
 */
public class EdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13728 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\77\1\35\1\55\1\101\1\1\1\57\1\52\1\102\1\77\1\35\1\12"+
    "\1\103\1\57\1\104\1\52\1\105\1\106\1\107\1\12\1\110\1\111\1\1\1\64\1\1\1\24"+
    "\2\12\1\112\1\111\1\113\2\1\1\114\1\115\1\116\1\117\1\120\1\121\2\1\1\70\1"+
    "\1\1\113\1\1\1\122\1\12\1\123\1\1\1\124\7\1\2\12\1\27\1\104\1\113\1\125\1"+
    "\126\1\127\1\130\1\113\2\12\1\131\2\12\1\132\24\12\1\133\1\134\2\12\1\133"+
    "\2\12\1\135\1\136\1\13\3\12\1\136\3\12\1\27\2\1\1\12\1\1\5\12\1\137\1\24\45"+
    "\12\1\140\1\12\1\24\1\27\4\12\1\27\1\141\1\142\1\15\1\12\1\15\1\12\1\15\1"+
    "\142\1\70\3\12\1\143\1\1\1\144\1\113\2\1\1\113\5\12\1\26\2\12\1\145\4\12\1"+
    "\37\1\12\1\146\2\1\1\64\1\12\1\147\1\46\2\12\1\150\1\12\1\76\1\113\2\1\1\12"+
    "\1\111\3\12\1\46\2\1\2\113\1\151\5\1\1\106\2\12\1\143\1\152\1\113\2\1\1\153"+
    "\1\12\1\154\1\41\2\12\1\37\1\1\2\12\1\143\1\1\1\155\1\41\1\12\1\147\6\1\1"+
    "\156\1\157\14\12\4\1\21\12\1\137\2\12\1\137\1\160\1\12\1\147\3\12\1\161\1"+
    "\162\1\163\1\123\1\162\7\1\1\164\1\1\1\123\6\1\1\165\1\166\1\167\1\170\1\171"+
    "\3\1\1\172\147\1\2\12\1\146\2\12\1\146\10\12\1\173\1\174\2\12\1\131\3\12\1"+
    "\175\1\1\1\12\1\111\4\176\4\1\1\104\35\1\1\177\2\1\1\200\1\24\4\12\1\201\1"+
    "\24\4\12\1\132\1\106\1\12\1\147\1\24\4\12\1\146\1\1\1\12\1\27\3\1\1\12\40"+
    "\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\123\4\1\2\12\1\147\20\12\1\123"+
    "\1\12\1\202\1\1\2\12\1\146\1\104\1\12\1\147\4\12\1\37\2\1\1\203\1\204\5\12"+
    "\1\205\1\12\1\147\1\26\3\1\1\203\1\206\1\12\1\30\1\1\3\12\1\143\1\204\2\12"+
    "\1\143\1\1\1\113\1\1\1\207\1\41\1\12\1\37\1\12\1\111\1\1\1\12\1\123\1\47\2"+
    "\12\1\30\1\104\1\113\1\210\1\211\2\12\1\45\1\1\1\212\1\113\1\12\1\213\3\12"+
    "\1\214\1\215\1\216\1\27\1\65\1\217\1\220\1\176\2\12\1\132\1\37\7\12\1\30\1"+
    "\113\72\12\1\143\1\12\1\221\2\12\1\150\20\1\26\12\1\147\6\12\1\76\2\1\1\111"+
    "\1\222\1\55\1\223\1\224\6\12\1\15\1\1\1\153\25\12\1\147\1\1\4\12\1\204\2\12"+
    "\1\26\2\1\1\150\7\1\1\210\7\12\1\123\1\1\1\113\1\24\1\27\1\24\1\27\1\225\4"+
    "\12\1\146\1\226\1\227\2\1\1\230\1\12\1\13\1\231\2\147\2\1\7\12\1\27\30\1\1"+
    "\12\1\123\3\12\1\70\2\1\2\12\1\1\1\12\1\232\2\12\1\37\1\12\1\147\2\12\1\233"+
    "\3\1\11\12\1\147\1\113\5\1\2\12\1\26\3\12\1\143\11\1\23\12\1\111\1\12\1\37"+
    "\1\26\11\1\1\234\2\12\1\235\1\12\1\37\1\12\1\111\1\12\1\146\4\1\1\12\1\236"+
    "\1\12\1\37\1\12\1\76\4\1\3\12\1\237\4\1\1\70\1\240\1\12\1\143\2\1\1\12\1\123"+
    "\1\12\1\123\2\1\1\122\1\12\1\46\1\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15"+
    "\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1\153\2\12\1\26\2\1\1\64\1\1\1"+
    "\153\2\12\2\1\1\12\1\45\1\113\1\153\1\12\1\111\1\64\1\1\2\12\1\241\1\153\2"+
    "\12\1\30\1\242\1\243\2\1\1\12\1\21\1\150\5\1\1\244\1\245\1\45\2\12\1\146\1"+
    "\1\1\113\1\72\1\54\1\55\1\67\1\1\1\246\1\15\21\1\3\12\1\1\1\247\1\113\12\1"+
    "\2\12\1\146\2\1\1\250\2\1\3\12\1\1\1\251\1\113\2\1\2\12\1\27\1\1\1\113\3\1"+
    "\1\12\1\76\1\1\1\113\26\1\4\12\1\113\1\104\34\1\3\12\1\45\20\1\71\12\1\76"+
    "\16\1\14\12\1\143\53\1\2\12\1\146\75\1\44\12\1\111\33\1\43\12\1\45\1\12\1"+
    "\146\1\113\6\1\1\12\1\147\1\1\3\12\1\1\1\143\1\113\1\153\1\252\1\12\67\1\4"+
    "\12\1\46\1\70\3\1\1\153\6\1\1\15\77\1\6\12\1\27\1\123\1\45\1\76\66\1\5\12"+
    "\1\210\3\12\1\142\1\253\1\254\1\255\3\12\1\256\1\257\1\12\1\260\1\261\1\35"+
    "\24\12\1\262\1\12\1\35\1\132\1\12\1\132\1\12\1\210\1\12\1\210\1\146\1\12\1"+
    "\146\1\12\1\55\1\12\1\55\1\12\1\263\3\264\14\12\1\46\123\1\1\255\1\12\1\265"+
    "\1\266\1\267\1\270\1\271\1\272\1\273\1\150\1\274\1\150\24\1\55\12\1\111\2"+
    "\1\103\12\1\46\15\12\1\147\150\12\1\15\25\1\41\12\1\147\36\1");

  /* The ZZ_CMAP_A table has 3024 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\2\2\1\1\22\0\1\2\1\63\1\5\1\61\4\0\1\54\1\55\1\4\1\53\1\43\1"+
    "\0\1\13\1\3\12\11\1\42\1\44\1\56\1\45\1\57\1\0\1\60\3\14\1\74\1\66\1\14\1"+
    "\65\4\14\1\75\2\14\1\71\1\70\2\14\1\72\1\67\1\73\5\14\1\50\1\6\1\51\1\0\1"+
    "\62\1\15\1\25\1\7\1\30\1\31\1\26\1\32\1\41\1\36\1\16\1\76\1\14\1\33\1\17\1"+
    "\24\1\21\1\20\1\64\1\22\1\27\1\23\1\10\1\37\1\35\1\34\1\40\1\14\1\46\1\0\1"+
    "\47\1\52\13\0\1\14\12\0\1\14\4\0\1\14\5\0\27\14\1\0\12\14\4\0\14\14\16\0\5"+
    "\14\7\0\1\14\1\0\1\14\1\0\5\14\1\0\2\14\2\0\4\14\1\0\1\14\6\0\1\14\1\0\3\14"+
    "\1\0\1\14\1\0\4\14\1\0\23\14\1\0\13\14\10\0\6\14\1\0\26\14\2\0\1\14\6\0\10"+
    "\14\10\0\13\14\5\0\3\14\15\0\12\12\4\0\6\14\1\0\1\14\17\0\2\14\7\0\2\14\12"+
    "\12\3\14\2\0\2\14\1\0\16\14\15\0\11\14\13\0\1\14\16\0\12\12\6\14\4\0\2\14"+
    "\4\0\1\14\5\0\6\14\4\0\1\14\11\0\1\14\3\0\1\14\7\0\11\14\7\0\5\14\17\0\26"+
    "\14\3\0\1\14\2\0\1\14\7\0\12\14\4\0\12\12\1\14\4\0\10\14\2\0\2\14\2\0\26\14"+
    "\1\0\7\14\1\0\1\14\3\0\4\14\3\0\1\14\20\0\1\14\15\0\2\14\1\0\1\14\5\0\6\14"+
    "\4\0\2\14\1\0\2\14\1\0\2\14\1\0\2\14\17\0\4\14\1\0\1\14\7\0\12\12\2\0\3\14"+
    "\20\0\11\14\1\0\2\14\1\0\2\14\1\0\5\14\3\0\1\14\2\0\1\14\30\0\1\14\13\0\10"+
    "\14\2\0\1\14\3\0\1\14\1\0\6\14\3\0\3\14\1\0\4\14\3\0\2\14\1\0\1\14\1\0\2\14"+
    "\3\0\2\14\3\0\3\14\3\0\14\14\13\0\10\14\1\0\2\14\10\0\3\14\5\0\4\14\1\0\5"+
    "\14\3\0\1\14\3\0\2\14\15\0\13\14\2\0\1\14\21\0\1\14\12\0\6\14\5\0\22\14\3"+
    "\0\10\14\1\0\11\14\1\0\1\14\2\0\7\14\11\0\1\14\1\0\2\14\14\0\12\12\7\0\2\14"+
    "\1\0\1\14\2\0\2\14\1\0\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1\0\3\14\1\0\1\14\1"+
    "\0\1\14\2\0\2\14\1\0\4\14\1\0\2\14\11\0\1\14\2\0\5\14\1\0\1\14\11\0\12\12"+
    "\2\0\14\14\1\0\24\14\13\0\5\14\3\0\6\14\4\0\4\14\3\0\1\14\3\0\2\14\7\0\3\14"+
    "\4\0\15\14\14\0\1\14\1\0\6\14\1\0\1\14\5\0\1\14\2\0\13\14\1\0\15\14\1\0\4"+
    "\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\1\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14"+
    "\2\0\16\14\2\0\6\14\2\0\15\14\2\0\1\14\1\0\10\14\7\0\15\14\1\0\6\14\23\0\1"+
    "\14\4\0\1\14\3\0\11\14\1\0\1\14\5\0\17\14\1\0\16\14\2\0\14\14\13\0\1\14\15"+
    "\0\7\14\7\0\16\14\15\0\2\14\12\12\3\0\3\14\11\0\4\14\1\0\4\14\3\0\2\14\11"+
    "\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\6\14\1\0\7\14\1\0\1\14\3\0\3\14\1"+
    "\0\7\14\3\0\4\14\2\0\6\14\5\0\1\14\15\0\1\14\2\0\1\14\4\0\1\14\2\0\12\14\1"+
    "\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0\4\14\1\0\13\14\2\0\4\14\5"+
    "\0\5\14\4\0\1\14\4\0\2\14\13\0\5\14\6\0\4\14\3\0\2\14\14\0\10\14\7\0\10\14"+
    "\1\0\7\14\6\0\2\14\12\0\5\14\5\0\2\14\3\0\7\14\6\0\3\14\12\12\2\14\13\0\11"+
    "\14\2\0\27\14\2\0\7\14\1\0\3\14\1\0\4\14\1\0\4\14\2\0\6\14\3\0\1\14\1\0\1"+
    "\14\2\0\5\14\1\0\12\14\12\12\5\14\1\0\3\14\1\0\10\14\4\0\7\14\3\0\1\14\3\0"+
    "\2\14\1\0\1\14\3\0\2\14\2\0\5\14\2\0\1\14\1\0\1\14\30\0\3\14\3\0\6\14\2\0"+
    "\6\14\2\0\6\14\11\0\7\14\4\0\5\14\3\0\5\14\5\0\1\14\1\0\10\14\1\0\5\14\1\0"+
    "\1\14\1\0\2\14\1\0\2\14\1\0\12\14\6\0\12\14\2\0\6\14\2\0\6\14\2\0\6\14\2\0"+
    "\3\14\3\0\14\14\1\0\16\14\1\0\2\14\1\0\2\14\1\0\10\14\6\0\4\14\4\0\16\14\2"+
    "\0\1\14\1\0\14\14\1\0\2\14\3\0\1\14\2\0\4\14\1\0\2\14\12\0\10\14\6\0\6\14"+
    "\1\0\3\14\1\0\12\14\3\0\1\14\12\0\4\14\13\0\12\12\1\14\1\0\1\14\3\0\7\14\1"+
    "\0\1\14\1\0\4\14\1\0\17\14\1\0\2\14\14\0\3\14\4\0\2\14\1\0\1\14\20\0\4\14"+
    "\10\0\1\14\13\0\10\14\5\0\3\14\2\0\1\14\2\0\2\14\2\0\4\14\1\0\14\14\1\0\1"+
    "\14\1\0\7\14\1\0\21\14\1\0\4\14\2\0\10\14\1\0\7\14\1\0\14\14\1\0\4\14\1\0"+
    "\5\14\1\0\1\14\3\0\14\14\2\0\13\14\1\0\10\14\2\0\22\12\1\0\2\14\1\0\1\14\2"+
    "\0\1\14\1\0\12\14\1\0\4\14\1\0\1\14\1\0\1\14\6\0\1\14\4\0\1\14\1\0\1\14\1"+
    "\0\1\14\1\0\3\14\1\0\2\14\1\0\1\14\2\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\0\2\14\1\0\1\14\2\0\4\14\1\0\7\14\1\0\4\14\1\0\4\14\1\0\1\14\1\0\12"+
    "\14\1\0\5\14\1\0\3\14\1\0\5\14\1\0\5\14");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\2\5\1\6"+
    "\1\7\1\5\1\1\20\5\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\3\5\1\32"+
    "\1\33\1\0\1\34\1\0\2\5\2\0\40\5\1\33"+
    "\1\0\2\5\1\6\3\5\1\35\34\5\1\36\1\5"+
    "\1\37\1\5\1\33\1\0\5\5\1\40\1\5\1\41"+
    "\2\5\1\42\3\5\1\43\1\44\3\5\1\45\11\5"+
    "\1\46\1\47\1\50\1\5\1\51\1\5\1\0\31\5"+
    "\1\0\1\5\1\52\1\53\3\5\1\54\3\5\1\55"+
    "\6\5\1\56\1\57\1\60\1\61\1\5\1\62\2\5"+
    "\1\63\1\64\2\5\1\65\10\5\1\66\1\5\1\67"+
    "\2\5\1\70\4\5\1\71\1\72\1\73\2\5\1\74"+
    "\3\5\1\75\3\5\1\76\1\77\2\5\1\100\1\5"+
    "\1\101\1\5\1\102\3\5\1\103\12\5\1\104\2\5"+
    "\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\77\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\77\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\u0666\0\u06a5"+
    "\0\u06e4\0\u0723\0\u0762\0\374\0\77\0\u07a1\0\u07e0\0\u081f"+
    "\0\u085e\0\u0237\0\77\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999"+
    "\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91"+
    "\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u085e\0\u113a"+
    "\0\u1179\0\u11b8\0\u01f8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3"+
    "\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb"+
    "\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3"+
    "\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u01f8"+
    "\0\u18db\0\u01f8\0\u191a\0\77\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u01f8\0\u1ad3\0\u01f8\0\u1b12\0\u1b51\0\u01f8"+
    "\0\u1b90\0\u1bcf\0\u1c0e\0\u01f8\0\u01f8\0\u1c4d\0\u1c8c\0\u1ccb"+
    "\0\u01f8\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84"+
    "\0\u1ec3\0\u1f02\0\u01f8\0\u01f8\0\u01f8\0\u1f41\0\u01f8\0\u1f80"+
    "\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178"+
    "\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370"+
    "\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568"+
    "\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u01f8\0\u01f8\0\u26a3\0\u26e2"+
    "\0\u2721\0\u01f8\0\u2760\0\u279f\0\u27de\0\u01f8\0\u281d\0\u285c"+
    "\0\u289b\0\u28da\0\u2919\0\u2958\0\u01f8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u01f8\0\u01f8\0\u2a93\0\u2ad2"+
    "\0\u01f8\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b"+
    "\0\u2cca\0\u01f8\0\u2d09\0\u01f8\0\u2d48\0\u2d87\0\u01f8\0\u2dc6"+
    "\0\u2e05\0\u2e44\0\u2e83\0\u01f8\0\u01f8\0\u01f8\0\u2ec2\0\u2f01"+
    "\0\u01f8\0\u2f40\0\u2f7f\0\u2fbe\0\u01f8\0\u2ffd\0\u303c\0\u307b"+
    "\0\u01f8\0\u01f8\0\u30ba\0\u30f9\0\u01f8\0\u3138\0\u01f8\0\u3177"+
    "\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u01f8\0\u32b2\0\u32f1\0\u3330"+
    "\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u01f8"+
    "\0\u3528\0\u3567\0\u01f8\0\u01f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\2\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\13\1\33\1\13\1\34\2\13\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\13\1\57\2\13\1\60\3\13\1\61\2\13"+
    "\100\0\2\3\77\0\1\62\1\63\72\0\5\64\1\65"+
    "\1\66\70\64\7\0\4\13\1\0\1\13\1\0\3\13"+
    "\1\67\20\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\2\13\1\70\21\13\22\0\13\13\11\0\2\11"+
    "\1\71\72\0\4\13\1\0\1\13\1\0\24\13\22\0"+
    "\13\13\15\72\1\73\61\72\7\0\4\13\1\0\1\13"+
    "\1\0\1\13\1\74\4\13\1\75\15\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\7\13\1\76\1\77"+
    "\13\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\7\13\1\100\14\13\22\0\13\13\7\0\1\13\1\101"+
    "\2\13\1\0\1\13\1\0\21\13\1\102\2\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\10\13\1\103"+
    "\13\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\4\13\1\104\17\13\22\0\13\13\7\0\1\13\1\105"+
    "\2\13\1\0\1\13\1\0\3\13\1\106\3\13\1\107"+
    "\14\13\22\0\13\13\7\0\1\110\3\13\1\0\1\13"+
    "\1\0\24\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\6\13\1\111\7\13\1\112\5\13\22\0\13\13"+
    "\7\0\1\13\1\113\2\13\1\0\1\13\1\0\5\13"+
    "\1\114\16\13\22\0\13\13\7\0\1\13\1\115\2\13"+
    "\1\0\1\13\1\0\4\13\1\116\17\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\3\13\1\117\4\13"+
    "\1\120\13\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\3\13\1\121\3\13\1\122\14\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\1\123\2\13\1\124"+
    "\20\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\1\125\23\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\7\13\1\126\14\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\24\13\22\0\2\13\1\127\10\13"+
    "\7\0\4\13\1\0\1\13\1\0\24\13\22\0\5\13"+
    "\1\130\1\13\1\131\3\13\7\0\4\13\1\0\1\13"+
    "\1\0\24\13\22\0\2\13\1\132\10\13\1\62\1\0"+
    "\75\62\4\63\1\133\72\63\3\0\1\64\1\0\3\64"+
    "\1\134\11\0\3\64\5\0\1\64\53\0\4\13\1\0"+
    "\1\13\1\0\3\13\1\135\20\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\13\13\1\136\10\13\22\0"+
    "\13\13\11\0\2\137\73\0\4\13\1\0\1\13\1\0"+
    "\2\13\1\140\21\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\2\13\1\141\2\13\1\142\16\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\2\13\1\143"+
    "\21\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\5\13\1\144\16\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\5\13\1\145\16\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\5\13\1\146\16\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\10\13\1\147"+
    "\13\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\7\13\1\150\1\13\1\151\1\152\11\13\22\0\1\153"+
    "\12\13\7\0\1\13\1\154\2\13\1\0\1\13\1\0"+
    "\24\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\15\13\1\155\6\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\13\13\1\156\10\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\1\13\1\157\22\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\11\13\1\160"+
    "\12\13\22\0\13\13\7\0\1\13\1\161\2\13\1\0"+
    "\1\13\1\0\24\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\5\13\1\162\16\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\2\13\1\163\21\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\4\13\1\164"+
    "\17\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\11\13\1\165\12\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\10\13\1\166\13\13\22\0\13\13\7\0"+
    "\1\13\1\167\2\13\1\0\1\13\1\0\24\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\14\13\1\170"+
    "\1\171\6\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\4\13\1\172\17\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\15\13\1\173\6\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\11\13\1\174\12\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\6\13"+
    "\1\175\15\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\5\13\1\176\16\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\4\13\1\177\17\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\24\13\22\0\3\13"+
    "\1\200\7\13\7\0\4\13\1\0\1\13\1\0\24\13"+
    "\22\0\6\13\1\201\4\13\7\0\4\13\1\0\1\13"+
    "\1\0\24\13\22\0\3\13\1\202\7\13\7\0\4\13"+
    "\1\0\1\13\1\0\24\13\22\0\11\13\1\203\1\13"+
    "\3\63\1\204\1\133\72\63\11\0\1\205\74\0\4\13"+
    "\1\0\1\13\1\0\15\13\1\206\6\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\7\13\1\207\14\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\3\13"+
    "\1\210\20\13\22\0\13\13\7\0\1\13\1\211\2\13"+
    "\1\0\1\13\1\0\24\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\10\13\1\212\13\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\7\13\1\213\10\13"+
    "\1\214\3\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\20\13\1\215\3\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\2\13\1\216\21\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\4\13\1\217\17\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\13\13"+
    "\1\220\10\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\3\13\1\221\20\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\3\13\1\222\20\13\22\0\13\13"+
    "\7\0\1\13\1\223\2\13\1\0\1\13\1\0\24\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\10\13"+
    "\1\224\13\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\15\13\1\225\6\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\10\13\1\226\13\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\10\13\1\227\13\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\5\13"+
    "\1\230\16\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\1\13\1\231\22\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\10\13\1\232\13\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\2\13\1\233\21\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\1\234"+
    "\23\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\5\13\1\235\16\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\7\13\1\236\14\13\22\0\13\13\7\0"+
    "\1\237\3\13\1\0\1\13\1\0\24\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\7\13\1\240\14\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\10\13"+
    "\1\241\13\13\22\0\13\13\7\0\1\242\3\13\1\0"+
    "\1\13\1\0\24\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\11\13\1\154\12\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\5\13\1\243\16\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\23\13\1\244"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\20\13"+
    "\1\245\3\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\5\13\1\246\16\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\24\13\22\0\3\13\1\247\7\13"+
    "\7\0\4\13\1\0\1\13\1\0\24\13\22\0\2\13"+
    "\1\250\10\13\11\0\1\251\74\0\4\13\1\0\1\13"+
    "\1\0\10\13\1\252\13\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\5\13\1\253\16\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\4\13\1\254\17\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\5\13"+
    "\1\255\16\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\23\13\1\256\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\3\13\1\257\20\13\22\0\13\13\7\0"+
    "\1\13\1\260\2\13\1\0\1\13\1\0\24\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\4\13\1\261"+
    "\17\13\22\0\13\13\7\0\1\13\1\262\2\13\1\0"+
    "\1\13\1\0\24\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\4\13\1\263\17\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\1\264\23\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\14\13\1\265\7\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\11\13"+
    "\1\266\12\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\4\13\1\267\17\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\6\13\1\270\15\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\15\13\1\271\6\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\6\13"+
    "\1\272\15\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\3\13\1\273\20\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\5\13\1\274\16\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\15\13\1\275\6\13"+
    "\22\0\13\13\7\0\1\13\1\276\2\13\1\0\1\13"+
    "\1\0\24\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\5\13\1\277\16\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\1\300\23\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\22\13\1\301\1\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\24\13\22\0"+
    "\3\13\1\302\7\13\11\0\1\303\74\0\4\13\1\0"+
    "\1\13\1\0\7\13\1\304\14\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\10\13\1\305\13\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\5\13\1\306"+
    "\16\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\24\13\22\0\3\13\1\307\1\310\6\13\7\0\4\13"+
    "\1\0\1\13\1\0\10\13\1\311\13\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\13\13\1\312\10\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\5\13"+
    "\1\313\16\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\1\314\23\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\4\13\1\315\17\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\13\13\1\316\10\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\4\13\1\317"+
    "\17\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\7\13\1\320\14\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\2\13\1\321\21\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\7\13\1\322\14\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\13\13\1\323"+
    "\10\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\10\13\1\324\13\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\23\13\1\325\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\1\13\1\326\22\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\10\13\1\327\13\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\10\13"+
    "\1\330\13\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\15\13\1\331\6\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\10\13\1\332\13\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\13\13\1\333\10\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\2\13"+
    "\1\334\21\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\24\13\22\0\2\13\1\335\10\13\11\0\1\64"+
    "\74\0\4\13\1\0\1\13\1\0\6\13\1\336\15\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\22\13"+
    "\1\337\1\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\4\13\1\340\17\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\4\13\1\341\17\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\24\13\22\0\3\13"+
    "\1\342\1\343\6\13\7\0\4\13\1\0\1\13\1\0"+
    "\13\13\1\344\10\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\12\13\1\345\11\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\10\13\1\346\13\13\22\0"+
    "\13\13\7\0\1\13\1\347\2\13\1\0\1\13\1\0"+
    "\24\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\7\13\1\350\14\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\12\13\1\351\11\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\11\13\1\352\12\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\1\13\1\353"+
    "\22\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\5\13\1\354\16\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\24\13\22\0\4\13\1\355\6\13\7\0"+
    "\4\13\1\0\1\13\1\0\13\13\1\356\10\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\10\13\1\357"+
    "\13\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\2\13\1\360\21\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\3\13\1\361\20\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\22\13\1\362\1\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\4\13\1\363"+
    "\17\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\10\13\1\364\13\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\10\13\1\365\13\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\13\13\1\366\10\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\15\13\1\367"+
    "\6\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\12\13\1\370\11\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\5\13\1\371\16\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\10\13\1\372\13\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\4\13\1\373"+
    "\17\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\10\13\1\374\13\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\10\13\1\375\13\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\24\13\22\0\12\13\1\376"+
    "\7\0\4\13\1\0\1\13\1\0\2\13\1\377\21\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\3\13"+
    "\1\u0100\20\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\5\13\1\u0101\16\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\10\13\1\u0102\13\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\6\13\1\u0103\15\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\3\13"+
    "\1\u0104\20\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\6\13\1\u0105\15\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\10\13\1\u0106\13\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\10\13\1\u0107\13\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\24\13"+
    "\22\0\12\13\1\u0108\7\0\4\13\1\0\1\13\1\0"+
    "\5\13\1\u0109\16\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\24\13\22\0\12\13\1\u010a\7\0\4\13"+
    "\1\0\1\13\1\0\12\13\1\u010b\11\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\10\13\1\u010c\13\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\11\13"+
    "\1\u010d\12\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\10\13\1\u010e\13\13\22\0\13\13\7\0\4\13"+
    "\1\0\1\13\1\0\5\13\1\u010f\16\13\22\0\13\13"+
    "\7\0\4\13\1\0\1\13\1\0\12\13\1\u0110\11\13"+
    "\22\0\13\13\7\0\4\13\1\0\1\13\1\0\12\13"+
    "\1\u0111\11\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\1\u0112\23\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\5\13\1\u0113\16\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\5\13\1\u0114\16\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\3\13\1\u0115"+
    "\20\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\1\u0116\23\13\22\0\13\13\7\0\4\13\1\0\1\13"+
    "\1\0\1\u0117\23\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\6\13\1\u0118\15\13\22\0\13\13\7\0"+
    "\4\13\1\0\1\13\1\0\3\13\1\u0119\20\13\22\0"+
    "\13\13\7\0\4\13\1\0\1\13\1\0\3\13\1\u011a"+
    "\20\13\22\0\13\13\7\0\4\13\1\0\1\13\1\0"+
    "\6\13\1\u011b\15\13\22\0\13\13\7\0\4\13\1\0"+
    "\1\13\1\0\6\13\1\u011c\15\13\22\0\13\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13734];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\4\1\1\11\22\1\22\11"+
    "\5\1\1\0\1\11\1\0\2\1\2\0\1\11\40\1"+
    "\1\0\47\1\1\11\1\0\43\1\1\0\31\1\1\0"+
    "\131\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public EdlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 71: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 72: break;
          case 3: 
            { return S_SLASH;
            }
          case 73: break;
          case 4: 
            { return S_STAR;
            }
          case 74: break;
          case 5: 
            { return S_ID;
            }
          case 75: break;
          case 6: 
            { return S_NUMBER;
            }
          case 76: break;
          case 7: 
            { return S_DOT;
            }
          case 77: break;
          case 8: 
            { return S_COLON;
            }
          case 78: break;
          case 9: 
            { return S_COMMA;
            }
          case 79: break;
          case 10: 
            { return S_SEMICOLON;
            }
          case 80: break;
          case 11: 
            { return S_EQ;
            }
          case 81: break;
          case 12: 
            { return S_CURLY_LEFT;
            }
          case 82: break;
          case 13: 
            { return S_CURLY_RIGHT;
            }
          case 83: break;
          case 14: 
            { return S_BRACKET_LEFT;
            }
          case 84: break;
          case 15: 
            { return S_BRACKET_RIGHT;
            }
          case 85: break;
          case 16: 
            { return S_TILDA;
            }
          case 86: break;
          case 17: 
            { return S_PLUS;
            }
          case 87: break;
          case 18: 
            { return S_PAREN_LEFT;
            }
          case 88: break;
          case 19: 
            { return S_PAREN_RIGHT;
            }
          case 89: break;
          case 20: 
            { return S_ANGLE_LEFT;
            }
          case 90: break;
          case 21: 
            { return S_ANGLE_RIGHT;
            }
          case 91: break;
          case 22: 
            { return S_AT;
            }
          case 92: break;
          case 23: 
            { return S_HASH;
            }
          case 93: break;
          case 24: 
            { return S_UNDERSCORE;
            }
          case 94: break;
          case 25: 
            { return S_BANG;
            }
          case 95: break;
          case 26: 
            { return S_COMMENT;
            }
          case 96: break;
          case 27: 
            { return S_BLOCK_COMMENT;
            }
          case 97: break;
          case 28: 
            { return S_STRING;
            }
          case 98: break;
          case 29: 
            { return S_MAP;
            }
          case 99: break;
          case 30: 
            { return S_GET;
            }
          case 100: break;
          case 31: 
            { return S_PUT;
            }
          case 101: break;
          case 32: 
            { return S_META;
            }
          case 102: break;
          case 33: 
            { return S_PATH;
            }
          case 103: break;
          case 34: 
            { return S_OP_READ;
            }
          case 104: break;
          case 35: 
            { return S_BOOLEAN;
            }
          case 105: break;
          case 36: 
            { return S_NULL;
            }
          case 106: break;
          case 37: 
            { return S_ENUM;
            }
          case 107: break;
          case 38: 
            { return S_LIST;
            }
          case 108: break;
          case 39: 
            { return S_LONG_T;
            }
          case 109: break;
          case 40: 
            { return S_WITH;
            }
          case 110: break;
          case 41: 
            { return S_POST;
            }
          case 111: break;
          case 42: 
            { return S_OP_UPDATE;
            }
          case 112: break;
          case 43: 
            { return S_IMPORT;
            }
          case 113: break;
          case 44: 
            { return S_METHOD;
            }
          case 114: break;
          case 45: 
            { return S_RECORD;
            }
          case 115: break;
          case 46: 
            { return S_STRING_T;
            }
          case 116: break;
          case 47: 
            { return S_OP_CUSTOM;
            }
          case 117: break;
          case 48: 
            { return S_OP_CREATE;
            }
          case 118: break;
          case 49: 
            { return S_DOUBLE_T;
            }
          case 119: break;
          case 50: 
            { return S_OP_DELETE;
            }
          case 120: break;
          case 51: 
            { return S_DELETE;
            }
          case 121: break;
          case 52: 
            { return S_BOOLEAN_T;
            }
          case 122: break;
          case 53: 
            { return S_INTEGER_T;
            }
          case 123: break;
          case 54: 
            { return S_EXTENDS;
            }
          case 124: break;
          case 55: 
            { return S_DEFAULT;
            }
          case 125: break;
          case 56: 
            { return S_VARTYPE;
            }
          case 126: break;
          case 57: 
            { return S_OVERRIDE;
            }
          case 127: break;
          case 58: 
            { return S_RESOURCE;
            }
          case 128: break;
          case 59: 
            { return S_REQUIRED;
            }
          case 129: break;
          case 60: 
            { return S_ABSTRACT;
            }
          case 130: break;
          case 61: 
            { return S_INPUT_TYPE;
            }
          case 131: break;
          case 62: 
            { return S_NODEFAULT;
            }
          case 132: break;
          case 63: 
            { return S_NAMESPACE;
            }
          case 133: break;
          case 64: 
            { return S_FORBIDDEN;
            }
          case 134: break;
          case 65: 
            { return S_OUTPUT_TYPE;
            }
          case 135: break;
          case 66: 
            { return S_SUPPLEMENT;
            }
          case 136: break;
          case 67: 
            { return S_SUPPLEMENTS;
            }
          case 137: break;
          case 68: 
            { return S_INPUT_PROJECTION;
            }
          case 138: break;
          case 69: 
            { return S_OUTPUT_PROJECTION;
            }
          case 139: break;
          case 70: 
            { return S_DELETE_PROJECTION;
            }
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
