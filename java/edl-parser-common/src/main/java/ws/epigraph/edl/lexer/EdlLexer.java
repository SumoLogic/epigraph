/*
 * Copyright 2016 Sumo Logic
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package ws.epigraph.edl.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static ws.epigraph.edl.lexer.EdlElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>EdlLexer.flex</tt>
 */
public class EdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13728 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\77\1\35\1\55\1\101\1\1\1\57\1\52\1\102\1\77\1\35\1\12"+
    "\1\103\1\57\1\104\1\52\1\105\1\106\1\107\1\12\1\110\1\111\1\1\1\64\1\1\1\24"+
    "\2\12\1\112\1\111\1\113\2\1\1\114\1\115\1\116\1\117\1\120\1\121\2\1\1\70\1"+
    "\1\1\113\1\1\1\122\1\12\1\123\1\1\1\124\7\1\2\12\1\27\1\104\1\113\1\125\1"+
    "\126\1\127\1\130\1\113\2\12\1\131\2\12\1\132\24\12\1\133\1\134\2\12\1\133"+
    "\2\12\1\135\1\136\1\13\3\12\1\136\3\12\1\27\2\1\1\12\1\1\5\12\1\137\1\24\45"+
    "\12\1\140\1\12\1\24\1\27\4\12\1\27\1\141\1\142\1\15\1\12\1\15\1\12\1\15\1"+
    "\142\1\70\3\12\1\143\1\1\1\144\1\113\2\1\1\113\5\12\1\26\2\12\1\145\4\12\1"+
    "\37\1\12\1\146\2\1\1\64\1\12\1\147\1\46\2\12\1\150\1\12\1\76\1\113\2\1\1\12"+
    "\1\111\3\12\1\46\2\1\2\113\1\151\5\1\1\106\2\12\1\143\1\152\1\113\2\1\1\153"+
    "\1\12\1\154\1\41\2\12\1\37\1\1\2\12\1\143\1\1\1\155\1\41\1\12\1\147\6\1\1"+
    "\156\1\157\14\12\4\1\21\12\1\137\2\12\1\137\1\160\1\12\1\147\3\12\1\161\1"+
    "\162\1\163\1\123\1\162\7\1\1\164\1\1\1\123\6\1\1\165\1\166\1\167\1\170\1\171"+
    "\3\1\1\172\147\1\2\12\1\146\2\12\1\146\10\12\1\173\1\174\2\12\1\131\3\12\1"+
    "\175\1\1\1\12\1\111\4\176\4\1\1\104\35\1\1\177\2\1\1\200\1\24\4\12\1\201\1"+
    "\24\4\12\1\132\1\106\1\12\1\147\1\24\4\12\1\146\1\1\1\12\1\27\3\1\1\12\40"+
    "\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\123\4\1\2\12\1\147\20\12\1\123"+
    "\1\12\1\202\1\1\2\12\1\146\1\104\1\12\1\147\4\12\1\37\2\1\1\203\1\204\5\12"+
    "\1\205\1\12\1\147\1\26\3\1\1\203\1\206\1\12\1\30\1\1\3\12\1\143\1\204\2\12"+
    "\1\143\1\1\1\113\1\1\1\207\1\41\1\12\1\37\1\12\1\111\1\1\1\12\1\123\1\47\2"+
    "\12\1\30\1\104\1\113\1\210\1\211\2\12\1\45\1\1\1\212\1\113\1\12\1\213\3\12"+
    "\1\214\1\215\1\216\1\27\1\65\1\217\1\220\1\176\2\12\1\132\1\37\7\12\1\30\1"+
    "\113\72\12\1\143\1\12\1\221\2\12\1\150\20\1\26\12\1\147\6\12\1\76\2\1\1\111"+
    "\1\222\1\55\1\223\1\224\6\12\1\15\1\1\1\153\25\12\1\147\1\1\4\12\1\204\2\12"+
    "\1\26\2\1\1\150\7\1\1\210\7\12\1\123\1\1\1\113\1\24\1\27\1\24\1\27\1\225\4"+
    "\12\1\146\1\226\1\227\2\1\1\230\1\12\1\13\1\231\2\147\2\1\7\12\1\27\30\1\1"+
    "\12\1\123\3\12\1\70\2\1\2\12\1\1\1\12\1\232\2\12\1\37\1\12\1\147\2\12\1\233"+
    "\3\1\11\12\1\147\1\113\5\1\2\12\1\26\3\12\1\143\11\1\23\12\1\111\1\12\1\37"+
    "\1\26\11\1\1\234\2\12\1\235\1\12\1\37\1\12\1\111\1\12\1\146\4\1\1\12\1\236"+
    "\1\12\1\37\1\12\1\76\4\1\3\12\1\237\4\1\1\70\1\240\1\12\1\143\2\1\1\12\1\123"+
    "\1\12\1\123\2\1\1\122\1\12\1\46\1\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15"+
    "\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1\153\2\12\1\26\2\1\1\64\1\1\1"+
    "\153\2\12\2\1\1\12\1\45\1\113\1\153\1\12\1\111\1\64\1\1\2\12\1\241\1\153\2"+
    "\12\1\30\1\242\1\243\2\1\1\12\1\21\1\150\5\1\1\244\1\245\1\45\2\12\1\146\1"+
    "\1\1\113\1\72\1\54\1\55\1\67\1\1\1\246\1\15\21\1\3\12\1\1\1\247\1\113\12\1"+
    "\2\12\1\146\2\1\1\250\2\1\3\12\1\1\1\251\1\113\2\1\2\12\1\27\1\1\1\113\3\1"+
    "\1\12\1\76\1\1\1\113\26\1\4\12\1\113\1\104\34\1\3\12\1\45\20\1\71\12\1\76"+
    "\16\1\14\12\1\143\53\1\2\12\1\146\75\1\44\12\1\111\33\1\43\12\1\45\1\12\1"+
    "\146\1\113\6\1\1\12\1\147\1\1\3\12\1\1\1\143\1\113\1\153\1\252\1\12\67\1\4"+
    "\12\1\46\1\70\3\1\1\153\6\1\1\15\77\1\6\12\1\27\1\123\1\45\1\76\66\1\5\12"+
    "\1\210\3\12\1\142\1\253\1\254\1\255\3\12\1\256\1\257\1\12\1\260\1\261\1\35"+
    "\24\12\1\262\1\12\1\35\1\132\1\12\1\132\1\12\1\210\1\12\1\210\1\146\1\12\1"+
    "\146\1\12\1\55\1\12\1\55\1\12\1\263\3\264\14\12\1\46\123\1\1\255\1\12\1\265"+
    "\1\266\1\267\1\270\1\271\1\272\1\273\1\150\1\274\1\150\24\1\55\12\1\111\2"+
    "\1\103\12\1\46\15\12\1\147\150\12\1\15\25\1\41\12\1\147\36\1");

  /* The ZZ_CMAP_A table has 3024 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\2\2\1\1\22\0\1\2\1\63\1\5\1\61\4\0\1\54\1\55\1\4\1\53\1\43\1"+
    "\0\1\13\1\3\12\11\1\42\1\44\1\56\1\45\1\57\1\0\1\60\1\75\1\14\1\77\1\76\1"+
    "\66\1\14\1\65\4\14\1\100\1\101\1\14\1\71\1\70\1\14\1\74\1\72\1\67\1\73\5\14"+
    "\1\50\1\6\1\51\1\0\1\62\1\15\1\25\1\7\1\30\1\31\1\26\1\32\1\41\1\36\1\16\1"+
    "\102\1\14\1\33\1\17\1\24\1\21\1\20\1\64\1\22\1\27\1\23\1\10\1\37\1\35\1\34"+
    "\1\40\1\14\1\46\1\0\1\47\1\52\13\0\1\14\12\0\1\14\4\0\1\14\5\0\27\14\1\0\12"+
    "\14\4\0\14\14\16\0\5\14\7\0\1\14\1\0\1\14\1\0\5\14\1\0\2\14\2\0\4\14\1\0\1"+
    "\14\6\0\1\14\1\0\3\14\1\0\1\14\1\0\4\14\1\0\23\14\1\0\13\14\10\0\6\14\1\0"+
    "\26\14\2\0\1\14\6\0\10\14\10\0\13\14\5\0\3\14\15\0\12\12\4\0\6\14\1\0\1\14"+
    "\17\0\2\14\7\0\2\14\12\12\3\14\2\0\2\14\1\0\16\14\15\0\11\14\13\0\1\14\16"+
    "\0\12\12\6\14\4\0\2\14\4\0\1\14\5\0\6\14\4\0\1\14\11\0\1\14\3\0\1\14\7\0\11"+
    "\14\7\0\5\14\17\0\26\14\3\0\1\14\2\0\1\14\7\0\12\14\4\0\12\12\1\14\4\0\10"+
    "\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14\3\0\1\14\20\0\1\14\15\0"+
    "\2\14\1\0\1\14\5\0\6\14\4\0\2\14\1\0\2\14\1\0\2\14\1\0\2\14\17\0\4\14\1\0"+
    "\1\14\7\0\12\12\2\0\3\14\20\0\11\14\1\0\2\14\1\0\2\14\1\0\5\14\3\0\1\14\2"+
    "\0\1\14\30\0\1\14\13\0\10\14\2\0\1\14\3\0\1\14\1\0\6\14\3\0\3\14\1\0\4\14"+
    "\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14\3\0\3\14\3\0\14\14\13\0\10\14\1\0\2\14"+
    "\10\0\3\14\5\0\4\14\1\0\5\14\3\0\1\14\3\0\2\14\15\0\13\14\2\0\1\14\21\0\1"+
    "\14\12\0\6\14\5\0\22\14\3\0\10\14\1\0\11\14\1\0\1\14\2\0\7\14\11\0\1\14\1"+
    "\0\2\14\14\0\12\12\7\0\2\14\1\0\1\14\2\0\2\14\1\0\1\14\2\0\1\14\6\0\4\14\1"+
    "\0\7\14\1\0\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\0\2\14\11\0\1\14\2"+
    "\0\5\14\1\0\1\14\11\0\12\12\2\0\14\14\1\0\24\14\13\0\5\14\3\0\6\14\4\0\4\14"+
    "\3\0\1\14\3\0\2\14\7\0\3\14\4\0\15\14\14\0\1\14\1\0\6\14\1\0\1\14\5\0\1\14"+
    "\2\0\13\14\1\0\15\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\1\14\1\0\4\14"+
    "\2\0\7\14\1\0\1\14\1\0\4\14\2\0\16\14\2\0\6\14\2\0\15\14\2\0\1\14\1\0\10\14"+
    "\7\0\15\14\1\0\6\14\23\0\1\14\4\0\1\14\3\0\11\14\1\0\1\14\5\0\17\14\1\0\16"+
    "\14\2\0\14\14\13\0\1\14\15\0\7\14\7\0\16\14\15\0\2\14\12\12\3\0\3\14\11\0"+
    "\4\14\1\0\4\14\3\0\2\14\11\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\6\14\1\0"+
    "\7\14\1\0\1\14\3\0\3\14\1\0\7\14\3\0\4\14\2\0\6\14\5\0\1\14\15\0\1\14\2\0"+
    "\1\14\4\0\1\14\2\0\12\14\1\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\4\14\1\0\13\14\2\0\4\14\5\0\5\14\4\0\1\14\4\0\2\14\13\0\5\14\6\0\4\14\3\0"+
    "\2\14\14\0\10\14\7\0\10\14\1\0\7\14\6\0\2\14\12\0\5\14\5\0\2\14\3\0\7\14\6"+
    "\0\3\14\12\12\2\14\13\0\11\14\2\0\27\14\2\0\7\14\1\0\3\14\1\0\4\14\1\0\4\14"+
    "\2\0\6\14\3\0\1\14\1\0\1\14\2\0\5\14\1\0\12\14\12\12\5\14\1\0\3\14\1\0\10"+
    "\14\4\0\7\14\3\0\1\14\3\0\2\14\1\0\1\14\3\0\2\14\2\0\5\14\2\0\1\14\1\0\1\14"+
    "\30\0\3\14\3\0\6\14\2\0\6\14\2\0\6\14\11\0\7\14\4\0\5\14\3\0\5\14\5\0\1\14"+
    "\1\0\10\14\1\0\5\14\1\0\1\14\1\0\2\14\1\0\2\14\1\0\12\14\6\0\12\14\2\0\6\14"+
    "\2\0\6\14\2\0\6\14\2\0\3\14\3\0\14\14\1\0\16\14\1\0\2\14\1\0\2\14\1\0\10\14"+
    "\6\0\4\14\4\0\16\14\2\0\1\14\1\0\14\14\1\0\2\14\3\0\1\14\2\0\4\14\1\0\2\14"+
    "\12\0\10\14\6\0\6\14\1\0\3\14\1\0\12\14\3\0\1\14\12\0\4\14\13\0\12\12\1\14"+
    "\1\0\1\14\3\0\7\14\1\0\1\14\1\0\4\14\1\0\17\14\1\0\2\14\14\0\3\14\4\0\2\14"+
    "\1\0\1\14\20\0\4\14\10\0\1\14\13\0\10\14\5\0\3\14\2\0\1\14\2\0\2\14\2\0\4"+
    "\14\1\0\14\14\1\0\1\14\1\0\7\14\1\0\21\14\1\0\4\14\2\0\10\14\1\0\7\14\1\0"+
    "\14\14\1\0\4\14\1\0\5\14\1\0\1\14\3\0\14\14\2\0\13\14\1\0\10\14\2\0\22\12"+
    "\1\0\2\14\1\0\1\14\2\0\1\14\1\0\12\14\1\0\4\14\1\0\1\14\1\0\1\14\6\0\1\14"+
    "\4\0\1\14\1\0\1\14\1\0\1\14\1\0\3\14\1\0\2\14\1\0\1\14\2\0\1\14\1\0\1\14\1"+
    "\0\1\14\1\0\1\14\1\0\1\14\1\0\2\14\1\0\1\14\2\0\4\14\1\0\7\14\1\0\4\14\1\0"+
    "\4\14\1\0\1\14\1\0\12\14\1\0\5\14\1\0\3\14\1\0\5\14\1\0\5\14");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\2\5\1\6"+
    "\1\7\1\1\17\5\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\6\5\1\32\1\33"+
    "\1\0\1\34\1\0\1\5\2\0\42\5\1\33\1\0"+
    "\1\5\1\6\3\5\1\35\31\5\1\36\1\5\1\37"+
    "\5\5\1\33\1\0\4\5\1\40\1\5\1\41\5\5"+
    "\1\42\1\43\3\5\1\44\7\5\1\45\1\46\1\47"+
    "\1\5\1\50\1\5\1\51\3\5\1\0\31\5\1\0"+
    "\1\5\1\52\3\5\1\53\3\5\1\54\6\5\1\55"+
    "\1\56\4\5\1\57\1\60\1\61\1\62\1\63\2\5"+
    "\1\64\10\5\1\65\1\5\1\66\2\5\1\67\4\5"+
    "\1\70\1\71\1\72\2\5\1\73\3\5\1\74\3\5"+
    "\1\75\1\76\2\5\1\77\1\5\1\100\1\5\1\101"+
    "\3\5\1\102\12\5\1\103\2\5\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\103\0\u010c\0\u014f\0\u0192"+
    "\0\u01d5\0\103\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367"+
    "\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f"+
    "\0\u05c2\0\u0605\0\103\0\103\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\u0648\0\u068b\0\u06ce\0\u0711"+
    "\0\u0754\0\u0797\0\u07da\0\u081d\0\u010c\0\103\0\u0860\0\u08a3"+
    "\0\u08e6\0\u0218\0\103\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d"+
    "\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u08e6"+
    "\0\u1295\0\u12d8\0\u131b\0\u0192\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f"+
    "\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857"+
    "\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u0192\0\u19e9\0\u0192"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\103\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u1c87\0\u0192\0\u1cca\0\u0192\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u1e19\0\u0192\0\u0192\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u0192\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7"+
    "\0\u0192\0\u0192\0\u0192\0\u20fa\0\u0192\0\u213d\0\u0192\0\u2180"+
    "\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398"+
    "\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0"+
    "\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8"+
    "\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u0192\0\u299d"+
    "\0\u29e0\0\u2a23\0\u0192\0\u2a66\0\u2aa9\0\u2aec\0\u0192\0\u2b2f"+
    "\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u0192\0\u0192\0\u2cc1"+
    "\0\u2d04\0\u2d47\0\u2d8a\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192"+
    "\0\u2dcd\0\u2e10\0\u0192\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f"+
    "\0\u2fa2\0\u2fe5\0\u3028\0\u0192\0\u306b\0\u0192\0\u30ae\0\u30f1"+
    "\0\u0192\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u0192\0\u0192\0\u0192"+
    "\0\u3240\0\u3283\0\u0192\0\u32c6\0\u3309\0\u334c\0\u0192\0\u338f"+
    "\0\u33d2\0\u3415\0\u0192\0\u0192\0\u3458\0\u349b\0\u0192\0\u34de"+
    "\0\u0192\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u0192\0\u3670"+
    "\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888"+
    "\0\u38cb\0\u0192\0\u390e\0\u3951\0\u0192\0\u0192";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\2\11\1\12\1\10\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\10\1\26"+
    "\1\27\1\30\1\10\1\31\1\10\1\32\2\10\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\10\1\55\2\10\1\56\2\10\1\57\1\60"+
    "\1\10\1\61\1\62\3\10\104\0\2\3\103\0\1\63"+
    "\1\64\76\0\5\65\1\66\1\67\74\65\7\0\4\10"+
    "\1\0\1\10\1\0\3\10\1\70\20\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\24\10\22\0\17\10"+
    "\11\0\2\11\1\71\67\0\15\72\1\73\65\72\7\0"+
    "\4\10\1\0\1\10\1\0\1\10\1\74\4\10\1\75"+
    "\15\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\7\10\1\76\1\77\13\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\7\10\1\100\14\10\22\0\17\10"+
    "\7\0\1\10\1\101\2\10\1\0\1\10\1\0\21\10"+
    "\1\102\2\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\10\10\1\103\13\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\4\10\1\104\17\10\22\0\17\10"+
    "\7\0\1\10\1\105\2\10\1\0\1\10\1\0\3\10"+
    "\1\106\3\10\1\107\14\10\22\0\17\10\7\0\1\110"+
    "\3\10\1\0\1\10\1\0\24\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\6\10\1\111\7\10\1\112"+
    "\5\10\22\0\17\10\7\0\1\10\1\113\2\10\1\0"+
    "\1\10\1\0\5\10\1\114\16\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\3\10\1\115\4\10\1\116"+
    "\13\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\3\10\1\117\3\10\1\120\14\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\1\121\2\10\1\122\20\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\1\123"+
    "\23\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\7\10\1\124\14\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\24\10\22\0\2\10\1\125\14\10\7\0"+
    "\4\10\1\0\1\10\1\0\24\10\22\0\5\10\1\126"+
    "\1\10\1\127\7\10\7\0\4\10\1\0\1\10\1\0"+
    "\24\10\22\0\4\10\1\130\12\10\7\0\4\10\1\0"+
    "\1\10\1\0\24\10\22\0\2\10\1\131\14\10\7\0"+
    "\4\10\1\0\1\10\1\0\24\10\22\0\2\10\1\132"+
    "\14\10\7\0\4\10\1\0\1\10\1\0\24\10\22\0"+
    "\7\10\1\133\1\134\6\10\1\63\1\0\101\63\4\64"+
    "\1\135\76\64\3\0\1\65\1\0\3\65\1\136\11\0"+
    "\3\65\5\0\1\65\57\0\4\10\1\0\1\10\1\0"+
    "\3\10\1\137\20\10\22\0\17\10\11\0\2\140\77\0"+
    "\4\10\1\0\1\10\1\0\2\10\1\141\21\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\2\10\1\142"+
    "\2\10\1\143\16\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\2\10\1\144\21\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\5\10\1\145\16\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\5\10\1\146"+
    "\16\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\5\10\1\147\16\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\10\10\1\150\13\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\11\10\1\151\1\152\11\10"+
    "\22\0\1\153\16\10\7\0\1\10\1\154\2\10\1\0"+
    "\1\10\1\0\24\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\15\10\1\155\6\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\13\10\1\156\10\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\1\10\1\157"+
    "\22\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\11\10\1\160\12\10\22\0\17\10\7\0\1\10\1\161"+
    "\2\10\1\0\1\10\1\0\24\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\5\10\1\162\16\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\2\10\1\163"+
    "\21\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\4\10\1\164\17\10\22\0\17\10\7\0\1\10\1\165"+
    "\2\10\1\0\1\10\1\0\24\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\14\10\1\166\1\167\6\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\4\10"+
    "\1\170\17\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\15\10\1\171\6\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\11\10\1\172\12\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\6\10\1\173\15\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\5\10"+
    "\1\174\16\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\4\10\1\175\17\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\24\10\22\0\3\10\1\176\13\10"+
    "\7\0\4\10\1\0\1\10\1\0\24\10\22\0\6\10"+
    "\1\177\10\10\7\0\4\10\1\0\1\10\1\0\24\10"+
    "\22\0\3\10\1\200\13\10\7\0\4\10\1\0\1\10"+
    "\1\0\24\10\22\0\12\10\1\201\4\10\7\0\4\10"+
    "\1\0\1\10\1\0\24\10\22\0\11\10\1\202\5\10"+
    "\7\0\4\10\1\0\1\10\1\0\24\10\22\0\14\10"+
    "\1\203\2\10\7\0\4\10\1\0\1\10\1\0\24\10"+
    "\22\0\6\10\1\204\10\10\7\0\4\10\1\0\1\10"+
    "\1\0\24\10\22\0\2\10\1\205\14\10\3\64\1\206"+
    "\1\135\76\64\11\0\1\207\100\0\4\10\1\0\1\10"+
    "\1\0\15\10\1\210\6\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\3\10\1\211\20\10\22\0\17\10"+
    "\7\0\1\10\1\212\2\10\1\0\1\10\1\0\24\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\10\10"+
    "\1\213\13\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\7\10\1\214\10\10\1\215\3\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\20\10\1\216\3\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\2\10"+
    "\1\217\21\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\4\10\1\220\17\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\3\10\1\221\20\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\3\10\1\222\20\10"+
    "\22\0\17\10\7\0\1\10\1\223\2\10\1\0\1\10"+
    "\1\0\24\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\10\10\1\224\13\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\15\10\1\225\6\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\10\10\1\226\13\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\10\10"+
    "\1\227\13\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\5\10\1\230\16\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\1\10\1\231\22\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\10\10\1\232\13\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\2\10"+
    "\1\233\21\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\1\234\23\10\22\0\17\10\7\0\1\235\3\10"+
    "\1\0\1\10\1\0\24\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\7\10\1\236\14\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\10\10\1\237\13\10"+
    "\22\0\17\10\7\0\1\240\3\10\1\0\1\10\1\0"+
    "\24\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\11\10\1\154\12\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\5\10\1\241\16\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\23\10\1\242\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\20\10\1\243\3\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\5\10"+
    "\1\244\16\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\24\10\22\0\3\10\1\245\13\10\7\0\4\10"+
    "\1\0\1\10\1\0\24\10\22\0\11\10\1\246\5\10"+
    "\7\0\4\10\1\0\1\10\1\0\24\10\22\0\12\10"+
    "\1\247\4\10\7\0\4\10\1\0\1\10\1\0\24\10"+
    "\22\0\2\10\1\250\14\10\7\0\4\10\1\0\1\10"+
    "\1\0\24\10\22\0\3\10\1\251\13\10\7\0\4\10"+
    "\1\0\1\10\1\0\24\10\22\0\11\10\1\252\5\10"+
    "\11\0\1\253\100\0\4\10\1\0\1\10\1\0\10\10"+
    "\1\254\13\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\4\10\1\255\17\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\5\10\1\256\16\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\23\10\1\257\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\3\10\1\260"+
    "\20\10\22\0\17\10\7\0\1\10\1\261\2\10\1\0"+
    "\1\10\1\0\24\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\4\10\1\262\17\10\22\0\17\10\7\0"+
    "\1\10\1\263\2\10\1\0\1\10\1\0\24\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\4\10\1\264"+
    "\17\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\1\265\23\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\14\10\1\266\7\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\11\10\1\267\12\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\4\10\1\270\17\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\6\10"+
    "\1\271\15\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\15\10\1\272\6\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\6\10\1\273\15\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\15\10\1\274\6\10"+
    "\22\0\17\10\7\0\1\10\1\275\2\10\1\0\1\10"+
    "\1\0\24\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\5\10\1\276\16\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\1\277\23\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\22\10\1\300\1\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\24\10\22\0"+
    "\3\10\1\301\13\10\7\0\4\10\1\0\1\10\1\0"+
    "\24\10\22\0\3\10\1\302\13\10\7\0\4\10\1\0"+
    "\1\10\1\0\24\10\22\0\5\10\1\303\11\10\7\0"+
    "\4\10\1\0\1\10\1\0\24\10\22\0\3\10\1\304"+
    "\13\10\11\0\1\305\100\0\4\10\1\0\1\10\1\0"+
    "\7\10\1\306\14\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\5\10\1\307\16\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\24\10\22\0\3\10\1\310"+
    "\1\311\12\10\7\0\4\10\1\0\1\10\1\0\10\10"+
    "\1\312\13\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\13\10\1\313\10\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\5\10\1\314\16\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\1\315\23\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\4\10\1\316"+
    "\17\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\13\10\1\317\10\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\4\10\1\320\17\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\7\10\1\321\14\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\2\10\1\322"+
    "\21\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\7\10\1\323\14\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\13\10\1\324\10\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\10\10\1\325\13\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\23\10\1\326"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\10\10"+
    "\1\327\13\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\15\10\1\330\6\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\10\10\1\331\13\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\13\10\1\332\10\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\2\10"+
    "\1\333\21\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\24\10\22\0\2\10\1\334\14\10\7\0\4\10"+
    "\1\0\1\10\1\0\24\10\22\0\2\10\1\335\14\10"+
    "\7\0\4\10\1\0\1\10\1\0\24\10\22\0\15\10"+
    "\1\336\1\10\7\0\4\10\1\0\1\10\1\0\24\10"+
    "\22\0\2\10\1\337\14\10\11\0\1\65\100\0\4\10"+
    "\1\0\1\10\1\0\6\10\1\340\15\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\22\10\1\341\1\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\4\10"+
    "\1\342\17\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\4\10\1\343\17\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\24\10\22\0\3\10\1\344\1\345"+
    "\12\10\7\0\4\10\1\0\1\10\1\0\13\10\1\346"+
    "\10\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\12\10\1\347\11\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\10\10\1\350\13\10\22\0\17\10\7\0"+
    "\1\10\1\351\2\10\1\0\1\10\1\0\24\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\7\10\1\352"+
    "\14\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\12\10\1\353\11\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\11\10\1\354\12\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\1\10\1\355\22\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\5\10\1\356"+
    "\16\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\24\10\22\0\4\10\1\357\12\10\7\0\4\10\1\0"+
    "\1\10\1\0\13\10\1\360\10\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\10\10\1\361\13\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\2\10\1\362"+
    "\21\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\3\10\1\363\20\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\22\10\1\364\1\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\4\10\1\365\17\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\10\10\1\366"+
    "\13\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\10\10\1\367\13\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\13\10\1\370\10\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\15\10\1\371\6\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\12\10\1\372"+
    "\11\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\5\10\1\373\16\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\10\10\1\374\13\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\4\10\1\375\17\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\10\10\1\376"+
    "\13\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\10\10\1\377\13\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\24\10\22\0\16\10\1\u0100\7\0\4\10"+
    "\1\0\1\10\1\0\2\10\1\u0101\21\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\3\10\1\u0102\20\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\5\10"+
    "\1\u0103\16\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\10\10\1\u0104\13\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\6\10\1\u0105\15\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\3\10\1\u0106\20\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\6\10"+
    "\1\u0107\15\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\10\10\1\u0108\13\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\10\10\1\u0109\13\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\24\10\22\0\16\10"+
    "\1\u010a\7\0\4\10\1\0\1\10\1\0\5\10\1\u010b"+
    "\16\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\24\10\22\0\16\10\1\u010c\7\0\4\10\1\0\1\10"+
    "\1\0\12\10\1\u010d\11\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\10\10\1\u010e\13\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\11\10\1\u010f\12\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\10\10"+
    "\1\u0110\13\10\22\0\17\10\7\0\4\10\1\0\1\10"+
    "\1\0\5\10\1\u0111\16\10\22\0\17\10\7\0\4\10"+
    "\1\0\1\10\1\0\12\10\1\u0112\11\10\22\0\17\10"+
    "\7\0\4\10\1\0\1\10\1\0\12\10\1\u0113\11\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\1\u0114"+
    "\23\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\5\10\1\u0115\16\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\5\10\1\u0116\16\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\3\10\1\u0117\20\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\1\u0118\23\10"+
    "\22\0\17\10\7\0\4\10\1\0\1\10\1\0\1\u0119"+
    "\23\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\6\10\1\u011a\15\10\22\0\17\10\7\0\4\10\1\0"+
    "\1\10\1\0\3\10\1\u011b\20\10\22\0\17\10\7\0"+
    "\4\10\1\0\1\10\1\0\3\10\1\u011c\20\10\22\0"+
    "\17\10\7\0\4\10\1\0\1\10\1\0\6\10\1\u011d"+
    "\15\10\22\0\17\10\7\0\4\10\1\0\1\10\1\0"+
    "\6\10\1\u011e\15\10\22\0\17\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\4\1\1\11\20\1\22\11"+
    "\10\1\1\0\1\11\1\0\1\1\2\0\1\11\42\1"+
    "\1\0\47\1\1\11\1\0\43\1\1\0\31\1\1\0"+
    "\131\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public EdlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 70: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 71: break;
          case 3: 
            { return E_SLASH;
            }
          case 72: break;
          case 4: 
            { return E_STAR;
            }
          case 73: break;
          case 5: 
            { return E_ID;
            }
          case 74: break;
          case 6: 
            { return E_NUMBER;
            }
          case 75: break;
          case 7: 
            { return E_DOT;
            }
          case 76: break;
          case 8: 
            { return E_COLON;
            }
          case 77: break;
          case 9: 
            { return E_COMMA;
            }
          case 78: break;
          case 10: 
            { return E_SEMICOLON;
            }
          case 79: break;
          case 11: 
            { return E_EQ;
            }
          case 80: break;
          case 12: 
            { return E_CURLY_LEFT;
            }
          case 81: break;
          case 13: 
            { return E_CURLY_RIGHT;
            }
          case 82: break;
          case 14: 
            { return E_BRACKET_LEFT;
            }
          case 83: break;
          case 15: 
            { return E_BRACKET_RIGHT;
            }
          case 84: break;
          case 16: 
            { return E_TILDA;
            }
          case 85: break;
          case 17: 
            { return E_PLUS;
            }
          case 86: break;
          case 18: 
            { return E_PAREN_LEFT;
            }
          case 87: break;
          case 19: 
            { return E_PAREN_RIGHT;
            }
          case 88: break;
          case 20: 
            { return E_ANGLE_LEFT;
            }
          case 89: break;
          case 21: 
            { return E_ANGLE_RIGHT;
            }
          case 90: break;
          case 22: 
            { return E_AT;
            }
          case 91: break;
          case 23: 
            { return E_HASH;
            }
          case 92: break;
          case 24: 
            { return E_UNDERSCORE;
            }
          case 93: break;
          case 25: 
            { return E_BANG;
            }
          case 94: break;
          case 26: 
            { return E_COMMENT;
            }
          case 95: break;
          case 27: 
            { return E_BLOCK_COMMENT;
            }
          case 96: break;
          case 28: 
            { return E_STRING;
            }
          case 97: break;
          case 29: 
            { return E_MAP;
            }
          case 98: break;
          case 30: 
            { return E_GET;
            }
          case 99: break;
          case 31: 
            { return E_PUT;
            }
          case 100: break;
          case 32: 
            { return E_META;
            }
          case 101: break;
          case 33: 
            { return E_PATH;
            }
          case 102: break;
          case 34: 
            { return E_BOOLEAN;
            }
          case 103: break;
          case 35: 
            { return E_NULL;
            }
          case 104: break;
          case 36: 
            { return E_ENUM;
            }
          case 105: break;
          case 37: 
            { return E_LIST;
            }
          case 106: break;
          case 38: 
            { return E_LONG_T;
            }
          case 107: break;
          case 39: 
            { return E_WITH;
            }
          case 108: break;
          case 40: 
            { return E_POST;
            }
          case 109: break;
          case 41: 
            { return E_READ;
            }
          case 110: break;
          case 42: 
            { return E_IMPORT;
            }
          case 111: break;
          case 43: 
            { return E_METHOD;
            }
          case 112: break;
          case 44: 
            { return E_RECORD;
            }
          case 113: break;
          case 45: 
            { return E_STRING_T;
            }
          case 114: break;
          case 46: 
            { return E_DOUBLE_T;
            }
          case 115: break;
          case 47: 
            { return E_UPDATE;
            }
          case 116: break;
          case 48: 
            { return E_DELETE;
            }
          case 117: break;
          case 49: 
            { return E_CUSTOM;
            }
          case 118: break;
          case 50: 
            { return E_CREATE;
            }
          case 119: break;
          case 51: 
            { return E_BOOLEAN_T;
            }
          case 120: break;
          case 52: 
            { return E_INTEGER_T;
            }
          case 121: break;
          case 53: 
            { return E_EXTENDS;
            }
          case 122: break;
          case 54: 
            { return E_DEFAULT;
            }
          case 123: break;
          case 55: 
            { return E_VARTYPE;
            }
          case 124: break;
          case 56: 
            { return E_OVERRIDE;
            }
          case 125: break;
          case 57: 
            { return E_RESOURCE;
            }
          case 126: break;
          case 58: 
            { return E_REQUIRED;
            }
          case 127: break;
          case 59: 
            { return E_ABSTRACT;
            }
          case 128: break;
          case 60: 
            { return E_INPUT_TYPE;
            }
          case 129: break;
          case 61: 
            { return E_NODEFAULT;
            }
          case 130: break;
          case 62: 
            { return E_NAMESPACE;
            }
          case 131: break;
          case 63: 
            { return E_FORBIDDEN;
            }
          case 132: break;
          case 64: 
            { return E_OUTPUT_TYPE;
            }
          case 133: break;
          case 65: 
            { return E_SUPPLEMENT;
            }
          case 134: break;
          case 66: 
            { return E_SUPPLEMENTS;
            }
          case 135: break;
          case 67: 
            { return E_INPUT_PROJECTION;
            }
          case 136: break;
          case 68: 
            { return E_OUTPUT_PROJECTION;
            }
          case 137: break;
          case 69: 
            { return E_DELETE_PROJECTION;
            }
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
