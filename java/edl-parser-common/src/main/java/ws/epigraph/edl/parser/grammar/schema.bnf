/*
 * Copyright 2016 Sumo Logic
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
// todo rename to `ws.epigraph.dl.parser.EdlParser, change prefixes to E_, Edl
  parserClass="ws.epigraph.edl.parser.EdlParser"

  elementTypeHolderClass="ws.epigraph.edl.lexer.EdlElementTypes"
  elementTypePrefix="S_"
  elementTypeClass="ws.epigraph.edl.lexer.EdlElementType"
  tokenTypeClass="ws.epigraph.edl.lexer.EdlElementType"

  psiClassPrefix="Edl"
  psiImplClassSuffix="Impl"
  psiPackage="ws.epigraph.edl.parser.psi"
  psiImplPackage="ws.epigraph.edl.parser.psi.impl"
  psiImplUtilClass="ws.epigraph.edl.parser.psi.impl.EdlPsiImplUtil"

  generateTokenAccessors=true

  tokens=[
    NAMESPACE = 'namespace'
    IMPORT = 'import'
    MAP = 'map'
    DEFAULT = 'default'
    NODEFAULT = 'nodefault'
    LIST = 'list'
    RECORD = 'record'
    EXTENDS = 'extends'
    VARTYPE='vartype'
    ENUM='enum'
    META='meta'
    SUPPLEMENT='supplement'
    SUPPLEMENTS='supplements'
    WITH='with'
    ABSTRACT='abstract'
    OVERRIDE='override'
    // todo add final, primitive, any?

    INTEGER_T='integer'
    LONG_T='long'
    DOUBLE_T='double'
    BOOLEAN_T='boolean'
    STRING_T='string'

    // idl - specific
    FORBIDDEN = 'forbidden'
    REQUIRED = 'required'
    DEFAULT = 'default'
    RESOURCE = 'resource'
    // http methods
    GET = 'GET'
    POST = 'POST'
    PUT = 'PUT'
    DELETE = 'DELETE'
    // operation types // todo: change to lower case
    READ = 'READ'
    CREATE = 'CREATE'
    UPDATE = 'UPDATE'
    // DELETE = 'DELETE'
    CUSTOM = 'CUSTOM'
    METHOD = 'method'
    INPUT_TYPE = 'inputType'
    INPUT_PROJECTION = 'inputProjection'
    OUTPUT_TYPE = 'outputType'
    OUTPUT_PROJECTION = 'outputProjection'
    DELETE_PROJECTION = 'deleteProjection'
    PATH = 'path'

    COLON = ':'
    DOT = '.'
    COMMA = ','
    SEMICOLON = ';'
    EQ = '='
    CURLY_LEFT = '{'
    CURLY_RIGHT = '}'
    BRACKET_LEFT = '['
    BRACKET_RIGHT = ']'
    TILDA = '~'
    STAR = '*'
    PLUS = '+'
    AT = '@'
    HASH = '#'
    UNDERSCORE = '_'
    BANG = '!'

    space='regexp:\s+'
    comment='regexp://.*'
    block_comment='regexp:/\*((?<!\*/)(.|\n))*'

    id = 'regexp:(\p{Alpha}\p{Alnum}*)|(`([^`]*)`)'

    // for data lang
    NULL = 'null'
    SLASH = '/'
    PAREN_LEFT = '('
    PAREN_RIGHT = ')'
    ANGLE_LEFT = '<'
    ANGLE_RIGHT = '>'

    number="regexp:([0-9])+"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    boolean="regexp:true|false"
  ]

  pin(".*Body") = 1
//  recoverWhile(".*Body") = "declBodyRecover"

  recoverWhile(".*Part") = "partRecover"

  // extends(".*.TypeDef") = "typeDef" // types hierarchy doesn't work with stubs
  implements(".*TypeDef")="ws.epigraph.edl.parser.psi.EdlTypeDef"

  implements(".*TypeBody") = "ws.epigraph.edl.parser.psi.AnnotationsHolder"
  extends(".*TypeBody") = "ws.epigraph.edl.parser.psi.impl.AnnotationsHolderImpl"
}

root ::= namespaceDecl imports defs

// either quoted or unquoted id
qid ::= id {
  methods=[getName setName getCanonicalName]
}

imports ::= importStatement*
importStatement ::= 'import' qn {pin=1 recoverWhile="importRecover"}

namespaceDecl ::= 'namespace' qn namespaceBody? {
  methods=[getFqn toString]
  stubClass="ws.epigraph.edl.parser.psi.stubs.EdlNamespaceDeclStub"
  elementTypeClass="ws.epigraph.edl.parser.psi.stubs.EdlNamespaceDeclStubElementType"
  pin=1
  recoverWhile="namespaceDeclRecover"
}

private namespaceBody ::= '{' namespaceBodyPart* '}'
private namespaceBodyPart ::= annotation // | ...

qnSegment ::= qid {
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[getName setName getNameIdentifier getEdlFqn getEdlFqnTypeRef isLast getReference getQn]
}
qn ::= qnSegment ('.' qnSegment)* { methods=[getQn] }

private typeName ::= qid
typeRef ::= qnTypeRef | anonList | anonMap {name="type"}
qnTypeRef ::= qn { methods=[resolve] extends="typeRef" }
varTagRef ::= qid {
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[setName getNameIdentifier getReference]
}

/// defs

defs ::= def*
private def ::= typeDefWrapper | supplementDef | resourceDef {recoverWhile="declRecover"}

// ============= schema language =============

// need a wrapper because inheritance doesn't play nicely with PSI stubs
typeDefWrapper ::= varTypeDef | recordTypeDef | mapTypeDef | listTypeDef | primitiveTypeDef | enumTypeDef {
  name="type definition"
  methods=[getElement delete toString]
  stubClass="ws.epigraph.edl.parser.psi.stubs.EdlTypeDefWrapperStub"
  elementTypeClass="ws.epigraph.edl.parser.psi.stubs.EdlTypeDefWrapperStubElementType"
}

private typeDefModifiers ::= 'abstract'?
private typeMemberModifiers ::= 'override'? 'abstract'?

valueTypeRef ::= typeRef defaultOverride?

anonList ::= 'list' '[' valueTypeRef ']' {pin=1 extends="typeRef" }
anonMap ::= 'map' '[' typeRef ',' valueTypeRef ']' {pin=1 extends="typeRef" }

extendsDecl ::= 'extends' qnTypeRef (',' qnTypeRef)* {pin=1}
supplementsDecl ::= 'supplements' qnTypeRef (',' qnTypeRef)* {pin=1}

// TODO Fix: varTagRef doesn't resolve
defaultOverride ::= 'default' varTagRef
annotation ::= qid '=' dataValue {
  name="custom annotation"
  implements="com.intellij.psi.PsiNamedElement"
  methods = [getName setName getNameIdentifier]
  pin = 2
}

metaDecl ::= 'meta' qnTypeRef { pin=1 } // we don't allow anonList or anonMap as meta

/// vartype

varTypeDef ::= typeDefModifiers 'vartype' typeName extendsDecl? supplementsDecl? varTypeBody? {
  methods=[supplemented]
  extends="ws.epigraph.edl.parser.psi.impl.EdlVarTypeDefImplBase"
  stubClass="ws.epigraph.edl.parser.psi.stubs.EdlVarTypeDefStub"
  elementTypeClass="ws.epigraph.edl.parser.psi.stubs.EdlVarTypeDefStubElementType"
  pin=2
}
varTypeBody ::= '{' (varTypeBodyPart ','?)* '}'
private varTypeBodyPart ::= varTagDecl | annotation
varTagDecl ::= typeMemberModifiers qid ':' typeRef varTypeMemberBody? {
  implements=["ws.epigraph.edl.parser.psi.AnnotationsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="ws.epigraph.edl.parser.psi.impl.AnnotationsHolderImpl"
  methods=[getName setName getNameIdentifier getTextOffset getPresentation getVarTypeDef]
  pin=3
}
private varTypeMemberBody ::= '{' (varTypeMemberBodyPart ','?)* '}'
private varTypeMemberBodyPart ::= annotation

/// record

recordTypeDef ::= typeDefModifiers 'record' typeName extendsDecl? metaDecl? supplementsDecl? recordTypeBody? {
  methods=[supplemented]
  extends="ws.epigraph.edl.parser.psi.impl.EdlRecordTypeDefImplBase"
  stubClass="ws.epigraph.edl.parser.psi.stubs.EdlRecordTypeDefStub"
  elementTypeClass="ws.epigraph.edl.parser.psi.stubs.EdlRecordTypeDefStubElementType"
  pin=2
}
recordTypeBody ::= '{' (recordBodyPart ','?)* '}'
private recordBodyPart ::= fieldDecl | annotation
fieldDecl ::= typeMemberModifiers qid ':' valueTypeRef fieldBody? {
  implements=["ws.epigraph.edl.parser.psi.AnnotationsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="ws.epigraph.edl.parser.psi.impl.AnnotationsHolderImpl"
  methods=[getName setName getNameIdentifier getTextOffset getPresentation getRecordTypeDef]
  pin=3
}
private fieldBody ::= '{' (fieldBodyPart ','?)* '}'
private fieldBodyPart ::= annotation

/// list

//listTypeDef2 ::= 'list' typeName extendsDecl listTypeBody? // allows inheritance from lists w/o type params
listTypeDef ::= typeDefModifiers anonList typeName extendsDecl? metaDecl? supplementsDecl? listTypeBody? {
  extends="ws.epigraph.edl.parser.psi.impl.EdlListTypeDefImplBase"
  stubClass="ws.epigraph.edl.parser.psi.stubs.EdlListTypeDefStub"
  elementTypeClass="ws.epigraph.edl.parser.psi.stubs.EdlListTypeDefStubElementType"
  pin=2
}
listTypeBody ::= '{' (listTypeBodyPart ','?)* '}'
private listTypeBodyPart ::= annotation

/// map

mapTypeDef ::= typeDefModifiers anonMap typeName extendsDecl? metaDecl? supplementsDecl? mapTypeBody? {
  extends="ws.epigraph.edl.parser.psi.impl.EdlMapTypeDefImplBase"
  stubClass="ws.epigraph.edl.parser.psi.stubs.EdlMapTypeDefStub"
  elementTypeClass="ws.epigraph.edl.parser.psi.stubs.EdlMapTypeDefStubElementType"
  pin=2
}
mapTypeBody ::= '{' (mapTypeBodyPart ','?)* '}'
private mapTypeBodyPart ::= annotation

/// enum

// abstract?
enumTypeDef ::= 'enum' typeName metaDecl? enumTypeBody { // extends?
  extends="ws.epigraph.edl.parser.psi.impl.EdlEnumTypeDefImplBase"
  stubClass="ws.epigraph.edl.parser.psi.stubs.EdlEnumTypeDefStub"
  elementTypeClass="ws.epigraph.edl.parser.psi.stubs.EdlEnumTypeDefStubElementType"
  pin=1
}
enumTypeBody ::= '{' (enumTypeBodyPart ','?)* '}'
private enumTypeBodyPart ::= annotation | enumMemberDecl { recoverWhile = enumPartRecover }
enumMemberDecl ::= qid enumMemberBody? {
  implements=["ws.epigraph.edl.parser.psi.AnnotationsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="ws.epigraph.edl.parser.psi.impl.AnnotationsHolderImpl"
  methods=[getName setName getNameIdentifier]
  pin=1
}
private enumMemberBody ::='{' (enumMemberBodyPar ','?)* '}'
private enumMemberBodyPar ::= annotation

private enumPartRecover ::= ! (',' | qid | '}')

/// primitive

primitiveTypeDef ::= typeDefModifiers primitiveKind typeName extendsDecl? metaDecl? supplementsDecl? primitiveTypeBody? {
  extends="ws.epigraph.edl.parser.psi.impl.EdlPrimitiveTypeDefImplBase"
  methods=[getPrimitiveTypeKind]
  stubClass="ws.epigraph.edl.parser.psi.stubs.EdlPrimitiveTypeDefStub"
  elementTypeClass="ws.epigraph.edl.parser.psi.stubs.EdlPrimitiveTypeDefStubElementType"
  pin=2
}
private primitiveKind ::= 'string' | 'integer' | 'long' | 'double' | 'boolean'
primitiveTypeBody ::= '{' (primitiveBodyPart ','?)* '}'
private primitiveBodyPart ::= annotation

supplementDef ::= 'supplement' qnTypeRef (',' qnTypeRef)* 'with' qnTypeRef {
  methods=[sourceRef supplementedRefs source supplemented getPresentation toString]
  stubClass="ws.epigraph.edl.parser.psi.stubs.EdlSupplementDefStub"
  elementTypeClass="ws.epigraph.edl.parser.psi.stubs.EdlSupplementDefStubElementType"
  pin=1
}

private namespaceDeclRecover ::= ! ('import' | 'namespace' | 'abstract' | 'record' | ',' |
                           'map' | 'list' | 'vartype' | 'enum' | 'supplement'|
                           'string' | 'integer' | 'long' | 'double' | 'boolean' | 'resource')

private importRecover ::= namespaceDeclRecover
private declRecover ::= namespaceDeclRecover
//private declRecover ::= ! ('import' | 'namespace' | 'record' | ',' |
//                           'vartype' | 'enum' | 'supplement'|
//                           'string' | 'integer' | 'long' | 'double' | 'boolean')

// todo fixme - take idl into account
private partRecover ::= ! ('}' | qid '=' | qid ':' | 'abstract' | 'override' | ',' )
//private partRecover ::= ! ('}' | qid | 'abstract' | 'override' | ',' )

// ============= idl language =============

tagName ::= qid | '_' // `_` is default tag

resourceDef ::= 'resource' resourceName resourceType resourceDefBody
resourceName ::= qid
resourceType ::= ':' valueTypeRef

private resourceDefBody ::= '{' (resourceDefPart ','?)* '}'
private resourceDefPart ::= operationDef { recoverWhile = operationBodyRecover }

private operationBodyRecover ::= ! ( '}' | ',' |
  'method' | 'inputType' | 'inputProjection' | 'outputType' | 'outputProjection' | 'deleteProjection' | 'path' |
  (id '=') | (id? ('READ' | 'CREATE' | 'UPDATE' | 'DELETE' | 'CUSTOM') ) )

// operation def parts
operationName ::= 'default' | qid
operationMethod ::= 'method' ('GET' | 'POST' | 'PUT' | 'DELETE') {pin=1}// add 'PATCH' too?
operationPath ::= 'path' opFieldPath {pin=1}
operationInputType ::= 'inputType' typeRef {pin=1}
operationInputProjection ::= 'inputProjection' opInputFieldProjection {pin=1}
operationOutputType ::= 'outputType' valueTypeRef {pin=1}
operationOutputProjection ::= 'outputProjection' opOutputFieldProjection {pin=1}
operationDeleteProjection ::= 'deleteProjection' opDeleteFieldProjection {pin=1}

operationDef ::= createOperationDef | readOperationDef | updateOperationDef | deleteOperationDef | customOperationDef

createOperationDef ::= operationName? 'CREATE' createOperationBody {pin=2}
private createOperationBody ::= '{' (createOperationBodyPart ','?)* '}'
createOperationBodyPart ::= operationPath |
                            operationInputType |
                            operationInputProjection |
                            operationOutputType |
                            operationOutputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

readOperationDef ::= operationName? 'READ' readOperationBody {pin=2}
private readOperationBody ::= '{' (readOperationBodyPart ','?)* '}'
readOperationBodyPart ::= operationPath |
                          operationOutputProjection |
                          annotation {
  recoverWhile = operationBodyRecover
}

updateOperationDef ::= operationName? 'UPDATE' updateOperationBody {pin=2}
private updateOperationBody ::= '{' (updateOperationBodyPart ','?)* '}'
updateOperationBodyPart ::= operationPath |
                            operationInputType |
                            operationInputProjection |
                            operationOutputType |
                            operationOutputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

deleteOperationDef ::= operationName? 'DELETE' deleteOperationBody {pin=2}
private deleteOperationBody ::= '{' (deleteOperationBodyPart ','?)* '}'
deleteOperationBodyPart ::= operationPath |
                            operationDeleteProjection |
                            operationOutputType |
                            operationOutputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

customOperationDef ::= operationName 'CUSTOM' customOperationBody {pin=2}
private customOperationBody ::= '{' (customOperationBodyPart ','?)* '}'
customOperationBodyPart ::= operationMethod |
                            operationPath |
                            operationInputType |
                            operationInputProjection |
                            operationOutputType |
                            operationOutputProjection |
                            annotation {
  recoverWhile = operationBodyRecover
}

// ============= op projections =============

opParam ::= ';' '+'? qid ':' typeRef opInputModelProjection opParamDefault? opParamBody? { pin = 1 }
private opParamDefault ::= '=' datum { pin=1 }
private opParamBody ::= '{' ( opParamBodyPart ','? )* '}'
private opParamBodyPart ::= opParam | annotation

// op path --------------------------------------------------------

// no tails, no branching, no meta

// :tag / field / * / field
// :tag { ;foo:String } / field { ;foo:String } / * { ;foo:String }

opVarPath ::= ( ':' tagName)? opVarPathBody? opModelPath
private opVarPathBody ::= '{' (opModelPathProperty ','?)* '}' {pin=1}

opModelPathProperty ::= opParam | annotation

opModelPath ::= ( opRecordModelPath
                | opMapModelPath
                )?

// op record path
opRecordModelPath ::= '/' opFieldPathEntry
opFieldPathEntry ::= qid opFieldPath
opFieldPath ::= opFieldPathBody? opVarPath {pin=1}
private opFieldPathBody ::= '{' (opFieldPathBodyPart ','? )* '}'
opFieldPathBodyPart ::= opParam | annotation

// op map path
opMapModelPath ::= '/' opPathKeyProjection opVarPath {pin=2}
opPathKeyProjection ::= '.' opPathKeyProjectionBody? {pin=1}
opPathKeyProjectionBody ::= '{' (opPathKeyProjectionPart ','?)*  '}' {pin=1}
opPathKeyProjectionPart ::= opParam | annotation

// output --------------------------------------------------------

opOutputModelMeta ::= 'meta' ':' opOutputModelProjection

opOutputVarProjection ::= ( opOutputMultiTagProjection | opOutputSingleTagProjection ) opOutputVarPolymorphicTail?
private opOutputBracedVarProjection ::= '(' opOutputVarProjection ')'

opOutputMultiTagProjection ::= ':' '(' (opOutputMultiTagProjectionItem ','?)* ')' {pin=2}
opOutputSingleTagProjection ::= ( ':' tagName)? (opOutputComplexTagProjection | opOutputSimpleTagProjection )
opOutputMultiTagProjectionItem ::= tagName ( opOutputComplexTagProjection | opOutputSimpleTagProjection )

private opOutputSimpleTagProjection ::= opOutputModelProjection
private opOutputComplexTagProjection ::= '{' (opOutputModelProperty ','?)* '}' opOutputModelProjection {pin=1}

//
opOutputVarPolymorphicTail ::= opOutputVarSingleTail | opOutputVarMultiTail
opOutputVarSingleTail ::= '~' typeRef opOutputVarProjection
opOutputVarMultiTail ::= '~' '(' (opOutputVarMultiTailItem ','?)* ')' {pin=2}
opOutputVarMultiTailItem ::= typeRef opOutputVarProjection

opOutputModelProperty ::= opParam | annotation | opOutputModelMeta

opOutputModelProjection ::= ( opOutputRecordModelProjection
                            | opOutputListModelProjection
                            | opOutputMapModelProjection
                            )?

// op output record
opOutputRecordModelProjection ::= '(' (opOutputFieldProjectionEntry ','?)* ')' { pin=1 }
opOutputFieldProjectionEntry ::= qid opOutputFieldProjection
opOutputFieldProjection ::= (opOutputComplexFieldProjection | opOutputSimpleFieldProjection)
private opOutputComplexFieldProjection ::= '{' (opOutputFieldProjectionBodyPart ','? )* '}' opOutputVarProjection
private opOutputSimpleFieldProjection ::= opOutputVarProjection
opOutputFieldProjectionBodyPart ::= opParam | annotation

// op output list
opOutputListModelProjection ::= '*' ( opOutputBracedVarProjection | opOutputVarProjection ) { pin=1 }

// op output map
opOutputMapModelProjection ::= opOutputKeyProjection ( opOutputBracedVarProjection | opOutputVarProjection )  { pin=1 }
opOutputKeyProjection ::= '[' opOutputKeyProjectionInt ']' {pin=1}
private opOutputKeyProjectionInt ::= ('required' ','?| 'forbidden' ','?)? (opOutputKeyProjectionPart ','?)*
opOutputKeyProjectionPart ::= opParam | annotation {
  recoverWhile = opOutputKeyProjectionRecover
}
private opOutputKeyProjectionRecover ::= ! ( ']' | ',' )

// input --------------------------------------------------------

opInputModelProperty ::= opInputDefaultValue | opParam | annotation | opInputModelMeta {
  recoverWhile = opInputModelPropertyRecover
}
private opInputModelPropertyRecover ::= ! ( '}' )
opInputDefaultValue ::= 'default' ':' datum {pin=1}

opInputModelMeta ::= 'meta' ':' '+'? opInputModelProjection

opInputVarPolymorphicTail ::= opInputVarSingleTail | opInputVarMultiTail
opInputVarSingleTail ::= '~' typeRef opInputVarProjection
opInputVarMultiTail ::= '~' '(' (opInputVarMultiTailItem ','?)* ')' {pin=2}
// todo: recovery. Commented out one breaks parsing tests
opInputVarMultiTailItem ::= typeRef opInputVarProjection // {recoverWhile = opInputVarMultiTailItemRecover}
//private opInputVarMultiTailItemRecover ::= ! ( ')' )

// todo: recovery. Commented out one breaks parsing tests
opInputFieldProjectionBodyPart ::= opParam | annotation // {recoverWhile=opInputFieldProjectionBodyPartRecover}
//private opInputFieldProjectionBodyPartRecover ::= ! ( '}' )


opInputVarProjection ::= ( opInputMultiTagProjection | opInputSingleTagProjection ) opInputVarPolymorphicTail?
private opInputBracedVarProjection ::= '(' opInputVarProjection ')'

opInputMultiTagProjection ::= ':' '(' (opInputMultiTagProjectionItem ','?)* ')' {pin=2}
opInputSingleTagProjection ::= ( ':' '+'? tagName)? (opInputComplexTagProjection | opInputSimpleTagProjection )
opInputMultiTagProjectionItem ::= '+'? tagName ( opInputComplexTagProjection | opInputSimpleTagProjection )

private opInputSimpleTagProjection ::= opInputModelProjection
private opInputComplexTagProjection ::= '{' (opInputModelProperty ','?)* '}' opInputModelProjection {pin=1}
//

opInputModelProjection ::= ( opInputRecordModelProjection
                           | opInputListModelProjection
                           | opInputMapModelProjection
                           )?

// op input record
opInputRecordModelProjection ::= '(' (opInputFieldProjectionEntry ','?)* ')' { pin=1 }
opInputFieldProjectionEntry ::= '+'? qid opInputFieldProjection // '+' means that field itself must be present
opInputFieldProjection ::= opInputComplexFieldProjection | opInputSimpleFieldProjection
private opInputComplexFieldProjection ::= '{' (opInputFieldProjectionBodyPart ','? )* '}' opInputVarProjection
private opInputSimpleFieldProjection ::= opInputVarProjection

// op input list
opInputListModelProjection ::= '*' ( opInputBracedVarProjection | opInputVarProjection ) { pin=1 }

// op input map
opInputMapModelProjection ::= opInputKeyProjection ( opInputBracedVarProjection | opInputVarProjection ) { pin=1 }
opInputKeyProjection ::= '[' opInputKeyProjectionInt ']' {pin=1} // todo add required|forbidden as in delete projection
private opInputKeyProjectionInt ::= ('required' ','?| 'forbidden' ','?)? (opInputKeyProjectionPart ','?)*
opInputKeyProjectionPart ::= opParam | annotation {
  recoverWhile = opInputKeyProjectionRecover
}
private opInputKeyProjectionRecover ::= ! ( ']' | ',' )

// delete --------------------------------------------------------

// can delete current entity or a link to bestFriend:
// + :record ( bestFriend )

// can delete current entity or a bestFriend entity
// + :record ( bestFriend + )

opDeleteVarProjection ::= '+'? ( opDeleteMultiTagProjection | opDeleteSingleTagProjection ) opDeleteVarPolymorphicTail?
private opDeleteBracedVarProjection ::= '(' opDeleteVarProjection ')'

opDeleteMultiTagProjection ::= ':' '(' (opDeleteMultiTagProjectionItem ','?)* ')' {pin=2}
opDeleteSingleTagProjection ::= ( ':' tagName)? (opDeleteComplexTagProjection | opDeleteSimpleTagProjection )
opDeleteMultiTagProjectionItem ::= tagName ( opDeleteComplexTagProjection | opDeleteSimpleTagProjection )

private opDeleteSimpleTagProjection ::= opDeleteModelProjection
private opDeleteComplexTagProjection ::= '{' (opDeleteModelProperty ','?)* '}' opDeleteModelProjection {pin=1}

//
opDeleteVarPolymorphicTail ::= opDeleteVarSingleTail | opDeleteVarMultiTail
opDeleteVarSingleTail ::= '~' typeRef opDeleteVarProjection
opDeleteVarMultiTail ::= '~' '(' (opDeleteVarMultiTailItem ','?)* ')' {pin=2}
opDeleteVarMultiTailItem ::= typeRef opDeleteVarProjection

opDeleteModelProperty ::= opParam | annotation

opDeleteModelProjection ::= ( opDeleteRecordModelProjection
                            | opDeleteListModelProjection
                            | opDeleteMapModelProjection
                            )?

// op delete record
opDeleteRecordModelProjection ::= '(' (opDeleteFieldProjectionEntry ','?)* ')' { pin=1 }
opDeleteFieldProjectionEntry ::= qid opDeleteFieldProjection
opDeleteFieldProjection ::= opDeleteComplexFieldProjection | opDeleteSimpleFieldProjection
private opDeleteComplexFieldProjection ::= '{' (opDeleteFieldProjectionBodyPart ','? )* '}' opDeleteVarProjection
private opDeleteSimpleFieldProjection ::= opDeleteVarProjection
opDeleteFieldProjectionBodyPart ::= opParam | annotation

// op delete list
opDeleteListModelProjection ::= '*' ( opDeleteBracedVarProjection | opDeleteVarProjection ) { pin=1 }

// op delete map
opDeleteMapModelProjection ::= opDeleteKeyProjection ( opDeleteBracedVarProjection | opDeleteVarProjection ) { pin=1 }
opDeleteKeyProjection ::= '[' opDeleteKeyProjectionInt ']' {pin=1}
private opDeleteKeyProjectionInt ::= ('required' ','?| 'forbidden' ','?)? (opDeleteKeyProjectionPart ','?)*
opDeleteKeyProjectionPart ::= opParam | annotation {
  recoverWhile = opDeleteKeyProjectionRecover
}
private opDeleteKeyProjectionRecover ::= ! ( ']' | ',' )

// ============= data language =============
// please keep in sync with data language from url.bnf

dataValue ::= data | datum
private dataTypeSpec ::= typeRef

data ::= dataTypeSpec? '<' dataEntry* '>' {pin=2}
dataEntry ::= qid ':' datum ','? {pin=2 recoverWhile=dataValueRecover}

datum ::= recordDatum | mapDatum | listDatum | primitiveDatum | enumDatum | nullDatum

recordDatum ::= dataTypeSpec? '{' recordDatumEntry* '}' {pin=2 extends=datum}
recordDatumEntry ::= qid ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

mapDatum ::= dataTypeSpec? '(' mapDatumEntry* ')' {pin=2 extends=datum}
mapDatumEntry ::= datum ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

listDatum ::= dataTypeSpec? '[' (dataValue ','?)* ']' {pin=2 extends=datum}

primitiveDatum ::= (dataTypeSpec '@')? (string | number | boolean) {extends=datum}

enumDatum ::= '#' qid {extends=datum pin=1}

nullDatum ::= (dataTypeSpec '@')? 'null' {extends=datum}

private dataValueRecover ::= ! ( '#' | qid | primitiveDatum | '}' | ')' | '>' | ']' | 'abstract' | 'override' | ',' )
