{
  parserClass="io.epigraph.schema.parser.SchemaParser"

  elementTypeHolderClass="io.epigraph.schema.lexer.SchemaElementTypes"
  elementTypePrefix="S_"
  elementTypeClass="io.epigraph.schema.lexer.SchemaElementType"
  tokenTypeClass="io.epigraph.schema.lexer.SchemaElementType"

  psiClassPrefix="Schema"
  psiImplClassSuffix="Impl"
  psiPackage="io.epigraph.schema.parser.psi"
  psiImplPackage="io.epigraph.schema.parser.psi.impl"
  psiImplUtilClass="io.epigraph.schema.parser.psi.impl.SchemaPsiImplUtil"

  generateTokenAccessors=true

  tokens=[
    NAMESPACE = 'namespace'
    IMPORT = 'import'
    MAP = 'map'
    DEFAULT = 'default'
    NODEFAULT = 'nodefault'
    LIST = 'list'
    RECORD = 'record'
    EXTENDS = 'extends'
    VARTYPE='vartype'
    ENUM='enum'
    META='meta'
    SUPPLEMENT='supplement'
    SUPPLEMENTS='supplements'
    WITH='with'
    POLYMORPHIC='polymorphic'
    ABSTRACT='abstract'
    OVERRIDE='override'

    INTEGER_T='integer'
    LONG_T='long'
    DOUBLE_T='double'
    BOOLEAN_T='boolean'
    STRING_T='string'

    COLON = ':'
    DOT = '.'
    COMMA = ','
    EQ = '='
    CURLY_LEFT = '{'
    CURLY_RIGHT = '}'
    BRACKET_LEFT = '['
    BRACKET_RIGHT = ']'

    space='regexp:\s+'
    comment='regexp://.*'
    block_comment='regexp:/\*((?<!\*/)(.|\n))*'

    id = 'regexp:(\p{Alpha}\p{Alnum}*)|(`([^`]*)`)'

    // for data lang
    NULL = 'null'
    SLASH = '/'
    PAREN_LEFT = '('
    PAREN_RIGHT = ')'
    ANGLE_LEFT = '<'
    ANGLE_RIGHT = '>'
    number="regexp:([0-9])+"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    boolean="regexp:true|false"
  ]

  pin(".*Body") = 1
//  recoverWhile(".*Body") = "declBodyRecover"

  recoverWhile(".*Part") = "partRecover"

  // extends(".*.TypeDef") = "typeDef" // types hierarchy doesn't work with stubs
  implements(".*TypeDef")="io.epigraph.schema.parser.psi.SchemaTypeDef"

  implements(".*TypeBody") = "io.epigraph.schema.parser.psi.CustomParamsHolder"
  extends(".*TypeBody") = "io.epigraph.schema.parser.psi.impl.CustomParamHolderImpl"
}

root ::= namespaceDecl imports defs

// either quoted or unquoted id
qid ::= id {
  methods=[getName setName getCanonicalName]
}

imports ::= importStatement*
importStatement ::= 'import' fqn {pin=1 recoverWhile="importRecover"}

namespaceDecl ::= 'namespace' fqn namespaceBody? {
  methods=[getFqn2 toString]
  stubClass="io.epigraph.schema.parser.psi.stubs.SchemaNamespaceDeclStub"
  elementTypeClass="io.epigraph.schema.parser.psi.stubs.SchemaNamespaceDeclStubElementType"
  pin=1
  recoverWhile="namespaceDeclRecover"
}

private namespaceBody ::= '{' namespaceBodyPart* '}'
private namespaceBodyPart ::= customParam // | ...

fqnSegment ::= qid {
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[getName setName getNameIdentifier getSchemaFqn getSchemaFqnTypeRef isLast getReference getFqn]
}
fqn ::= fqnSegment ('.' fqnSegment)* { methods=[getFqn] }

private typeName ::= qid
typeRef ::= fqnTypeRef | anonList | anonMap {name="type"}
fqnTypeRef ::= fqn { methods=[resolve] extends="typeRef" }
varTagRef ::= qid {
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[setName getNameIdentifier getReference]
}

/// defs

defs ::= def*
private def ::= typeDefWrapper | supplementDef {recoverWhile="declRecover"}

// need a wrapper because inheritance doesn't play nicely with PSI stubs
typeDefWrapper ::= varTypeDef | recordTypeDef | mapTypeDef | listTypeDef | primitiveTypeDef | enumTypeDef {
  name="type definition"
  methods=[getElement delete toString]
  stubClass="io.epigraph.schema.parser.psi.stubs.SchemaTypeDefWrapperStub"
  elementTypeClass="io.epigraph.schema.parser.psi.stubs.SchemaTypeDefWrapperStubElementType"
}

private typeDefModifiers ::= 'abstract'?
private typeMemberModifiers ::= 'override'? 'abstract'?

valueTypeRef ::= 'polymorphic'? typeRef defaultOverride?

anonList ::= 'list' '[' valueTypeRef ']' {pin=1 extends="typeRef" }
anonMap ::= 'map' '[' typeRef ',' valueTypeRef ']' {pin=1 extends="typeRef" }

extendsDecl ::= 'extends' fqnTypeRef (',' fqnTypeRef)* {pin=1}
supplementsDecl ::= 'supplements' fqnTypeRef (',' fqnTypeRef)* {pin=1}

// TODO Fix: varTagRef doesn't resolve
defaultOverride ::= 'default' varTagRef
customParam ::= qid '=' dataValue {
  name="custom attribute"
  implements="com.intellij.psi.PsiNamedElement"
  methods = [getName setName getNameIdentifier]
  pin = 2
}

metaDecl ::= 'meta' fqnTypeRef { pin=1 } // we don't allow anonList or anonMap as meta

/// vartype

varTypeDef ::= typeDefModifiers 'vartype' typeName extendsDecl? supplementsDecl? varTypeBody? {
  methods=[supplemented]
  extends="io.epigraph.schema.parser.psi.impl.SchemaVarTypeDefImplBase"
  stubClass="io.epigraph.schema.parser.psi.stubs.SchemaVarTypeDefStub"
  elementTypeClass="io.epigraph.schema.parser.psi.stubs.SchemaVarTypeDefStubElementType"
  pin=2
}
varTypeBody ::= '{' (varTypeBodyPart ','?)* '}'
private varTypeBodyPart ::= varTagDecl | customParam
varTagDecl ::= typeMemberModifiers qid ':' typeRef varTypeMemberBody? {
  implements=["io.epigraph.schema.parser.psi.CustomParamsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="io.epigraph.schema.parser.psi.impl.CustomParamHolderImpl"
  methods=[getName setName getNameIdentifier getTextOffset getPresentation getVarTypeDef]
  pin=3
}
private varTypeMemberBody ::= '{' (varTypeMemberBodyPart ','?)* '}'
private varTypeMemberBodyPart ::= customParam

/// record

recordTypeDef ::= typeDefModifiers 'record' typeName extendsDecl? metaDecl? supplementsDecl? recordTypeBody? {
  methods=[supplemented]
  extends="io.epigraph.schema.parser.psi.impl.SchemaRecordTypeDefImplBase"
  stubClass="io.epigraph.schema.parser.psi.stubs.SchemaRecordTypeDefStub"
  elementTypeClass="io.epigraph.schema.parser.psi.stubs.SchemaRecordTypeDefStubElementType"
  pin=2
}
recordTypeBody ::= '{' (recordBodyPart ','?)* '}'
private recordBodyPart ::= fieldDecl | customParam
fieldDecl ::= typeMemberModifiers qid ':' valueTypeRef fieldBody? {
  implements=["io.epigraph.schema.parser.psi.CustomParamsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="io.epigraph.schema.parser.psi.impl.CustomParamHolderImpl"
  methods=[getName setName getNameIdentifier getTextOffset getPresentation getRecordTypeDef]
  pin=3
}
private fieldBody ::= '{' (fieldBodyPart ','?)* '}'
private fieldBodyPart ::= customParam

/// list

//listTypeDef2 ::= 'list' typeName extendsDecl listTypeBody? // allows inheritance from lists w/o type params
listTypeDef ::= typeDefModifiers anonList typeName extendsDecl? metaDecl? supplementsDecl? listTypeBody? {
  extends="io.epigraph.schema.parser.psi.impl.SchemaListTypeDefImplBase"
  stubClass="io.epigraph.schema.parser.psi.stubs.SchemaListTypeDefStub"
  elementTypeClass="io.epigraph.schema.parser.psi.stubs.SchemaListTypeDefStubElementType"
  pin=2
}
listTypeBody ::= '{' (listTypeBodyPart ','?)* '}'
private listTypeBodyPart ::= customParam

/// map

mapTypeDef ::= typeDefModifiers anonMap typeName extendsDecl? metaDecl? supplementsDecl? mapTypeBody? {
  extends="io.epigraph.schema.parser.psi.impl.SchemaMapTypeDefImplBase"
  stubClass="io.epigraph.schema.parser.psi.stubs.SchemaMapTypeDefStub"
  elementTypeClass="io.epigraph.schema.parser.psi.stubs.SchemaMapTypeDefStubElementType"
  pin=2
}
mapTypeBody ::= '{' (mapTypeBodyPart ','?)* '}'
private mapTypeBodyPart ::= customParam

/// enum

// abstract? polymorphic?
enumTypeDef ::= 'enum' typeName metaDecl? enumTypeBody { // extends?
  extends="io.epigraph.schema.parser.psi.impl.SchemaEnumTypeDefImplBase"
  stubClass="io.epigraph.schema.parser.psi.stubs.SchemaEnumTypeDefStub"
  elementTypeClass="io.epigraph.schema.parser.psi.stubs.SchemaEnumTypeDefStubElementType"
  pin=1
}
enumTypeBody ::= '{' (enumTypeBodyPart ','?)* '}'
private enumTypeBodyPart ::= customParam | enumMemberDecl { recoverWhile = enumPartRecover }
enumMemberDecl ::= qid enumMemberBody? {
  implements=["io.epigraph.schema.parser.psi.CustomParamsHolder" "com.intellij.psi.PsiNamedElement"]
  extends="io.epigraph.schema.parser.psi.impl.CustomParamHolderImpl"
  methods=[getName setName getNameIdentifier]
  pin=1
}
private enumMemberBody ::='{' (enumMemberBodyPar ','?)* '}'
private enumMemberBodyPar ::= customParam

private enumPartRecover ::= ! (',' | qid | '}')

/// primitive

primitiveTypeDef ::= typeDefModifiers primitiveKind typeName extendsDecl? metaDecl? supplementsDecl? primitiveTypeBody? {
  extends="io.epigraph.schema.parser.psi.impl.SchemaPrimitiveTypeDefImplBase"
  methods=[getPrimitiveTypeKind]
  stubClass="io.epigraph.schema.parser.psi.stubs.SchemaPrimitiveTypeDefStub"
  elementTypeClass="io.epigraph.schema.parser.psi.stubs.SchemaPrimitiveTypeDefStubElementType"
  pin=2
}
private primitiveKind ::= 'string' | 'integer' | 'long' | 'double' | 'boolean'
primitiveTypeBody ::= '{' (primitiveBodyPart ','?)* '}'
private primitiveBodyPart ::= customParam

supplementDef ::= 'supplement' fqnTypeRef (',' fqnTypeRef)* 'with' fqnTypeRef {
  methods=[sourceRef supplementedRefs source supplemented getPresentation toString]
  stubClass="io.epigraph.schema.parser.psi.stubs.SchemaSupplementDefStub"
  elementTypeClass="io.epigraph.schema.parser.psi.stubs.SchemaSupplementDefStubElementType"
  pin=1
}

private namespaceDeclRecover ::= ! ('import' | 'namespace' | 'polymorphic' | 'abstract' | 'record' | ',' |
                           'map' | 'list' | 'vartype' | 'enum' | 'supplement'|
                           'string' | 'integer' | 'long' | 'double' | 'boolean')

private importRecover ::= namespaceDeclRecover
private declRecover ::= namespaceDeclRecover
//private declRecover ::= ! ('import' | 'namespace' | 'polymorphic' | 'record' | ',' |
//                           'vartype' | 'enum' | 'supplement'|
//                           'string' | 'integer' | 'long' | 'double' | 'boolean')

private partRecover ::= ! ('}' | qid '=' | qid ':' | 'abstract' | 'override' | ',' )
//private partRecover ::= ! ('}' | qid | 'abstract' | 'override' | ',' )

// ------------- data language -------------

//dataValue ::= dataTypeSpec? (dataVar | dataVarValue)
//private dataVarValue ::= dataRecord | dataMap | dataList | dataEnum | dataPrimitiveValue | 'null'
//private dataTypeSpec ::= ( fqnTypeRef '/' )*
dataValue ::= dataTypeSpec? (dataVar | varValue)
private dataVarValue ::= dataTypeSpec? varValue   // because we want (foo/bar:baz) ?
private varValue ::= dataRecord | dataMap | dataList | dataEnum | dataPrimitive | 'null'
private dataTypeSpec ::= ( fqnTypeRef '/' )* // TODO we only need single type spec now

dataVar ::= '<' dataVarEntry* '>' {pin=1 extends=dataValue}
dataVarEntry ::= qid ':' dataVarValue ','? {pin=2 recoverWhile=dataValueRecover}

dataRecord ::= '{' dataRecordEntry* '}' {pin=1 extends=dataValue}
dataRecordEntry ::= qid ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

dataMap ::= '(' dataMapEntry* ')' {pin=1 extends=dataValue}
dataMapEntry ::= dataVarValue ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

dataList ::= '[' (dataValue ','?)* ']' {pin=1 extends=dataValue}

dataEnum ::= qid {extends=dataValue}

dataPrimitive ::= string | number | boolean // | opOutputVarProjection

private dataValueRecover ::= ! ( qid | dataPrimitive | '}' | ')' | '>' | ']' | 'abstract' | 'override' | ',' )

// ------------- op projections -------------

//opParamProjection ::= qid ':' opInputModelProjection
//opParameters ::= 'parameters' ':' '{' (opParamProjection ','?)* '}'
//
//opOutputVarProjection ::= ('{' opOutputTagProjection* '}') | 'default' opOutputModelProjection
//opOutputTagProjection ::= qid ':' opOutputModelProjection // custom params?
//
//opOutputModelProjection ::= (opOutputRecordModelProjection | opOutputListModelProjection |
//                             opOutputMapModelProjection | opOutputEnumModelProjection |
//                             opOutputPrimitiveModelProjection ) opOutputModelProjectionBody
//
//opOutputModelProjectionBody ::= '{' (opOutputModelProjectionBodyPart ','?)* '}'
//opOutputModelProjectionBodyPart ::= 'required' | opParameters | customParam
//
//// op output record
//opOutputRecordModelProjection ::= '(' (opOutputFieldProjection ','?)* ')' opOutputRecordPolyBranch*
//opOutputFieldProjection ::= qid opOutputFieldProjectionBody? (':' opOutputVarProjection)?
//opOutputFieldProjectionBody ::= '{' (opOutputFieldProjectionBodyPart ','?)* '}'
//opOutputFieldProjectionBodyPart ::= opParameters | customParam
//opOutputRecordPolyBranch ::= '~' fqnTypeRef '<' opOutputRecordModelProjection '>'
//
//// files : Files default FileList *(..) ~FileList2(..)
//// op output list
//opOutputListModelProjection ::= '*' opOutputVarProjection opOutputListPolyBranch*
//opOutputListPolyBranch ::= '~' fqnTypeRef '<' opOutputListModelProjection '>' // or straight for elements ?
//
//opOutputMapModelProjection ::= opOutputKeyProjection '*' opOutputVarProjection opOutputMapPolyBranch
//opOutputKeyProjection ::= '[' (opOutputKeyProjectionPart ','?)* ']'
//opOutputKeyProjectionPart ::= 'forbidden' | 'required' | opParameters | customParam
//opOutputMapPolyBranch ::= '~' fqnTypeRef '<' opOutputMapModelProjection '>'
//
//opOutputEnumModelProjection ::= 'enum' // ?
//opOutputPrimitiveModelProjection ::= 'primitive' // ?
