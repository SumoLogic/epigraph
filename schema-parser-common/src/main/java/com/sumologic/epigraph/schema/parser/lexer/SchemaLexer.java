/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.sumologic.epigraph.schema.parser.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.sumologic.epigraph.schema.parser.lexer.SchemaElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SchemaLexer.flex</tt>
 */
public class SchemaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BACKTICK = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\2\1\2\1\1\22\0\1\2\1\0\1\5"+
    "\5\0\1\51\1\52\1\4\1\0\1\43\1\0\1\13\1\3\12\11"+
    "\1\42\1\0\1\53\1\44\1\54\2\0\32\14\1\47\1\6\1\50"+
    "\2\0\1\15\1\25\1\7\1\30\1\31\1\26\1\32\1\41\1\36"+
    "\1\16\2\14\1\33\1\17\1\24\1\21\1\20\1\14\1\22\1\27"+
    "\1\23\1\10\1\37\1\35\1\34\1\40\1\14\1\45\1\0\1\46"+
    "\54\0\1\14\12\0\1\14\4\0\1\14\5\0\27\14\1\0\37\14"+
    "\1\0\u01ca\14\4\0\14\14\16\0\5\14\7\0\1\14\1\0\1\14"+
    "\201\0\5\14\1\0\2\14\2\0\4\14\1\0\1\14\6\0\1\14"+
    "\1\0\3\14\1\0\1\14\1\0\24\14\1\0\123\14\1\0\213\14"+
    "\10\0\246\14\1\0\46\14\2\0\1\14\7\0\47\14\110\0\33\14"+
    "\5\0\3\14\55\0\53\14\25\0\12\12\4\0\2\14\1\0\143\14"+
    "\1\0\1\14\17\0\2\14\7\0\2\14\12\12\3\14\2\0\1\14"+
    "\20\0\1\14\1\0\36\14\35\0\131\14\13\0\1\14\16\0\12\12"+
    "\41\14\11\0\2\14\4\0\1\14\5\0\26\14\4\0\1\14\11\0"+
    "\1\14\3\0\1\14\27\0\31\14\107\0\25\14\117\0\66\14\3\0"+
    "\1\14\22\0\1\14\7\0\12\14\4\0\12\12\1\0\20\14\4\0"+
    "\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0"+
    "\4\14\3\0\1\14\20\0\1\14\15\0\2\14\1\0\3\14\4\0"+
    "\12\12\2\14\23\0\6\14\4\0\2\14\2\0\26\14\1\0\7\14"+
    "\1\0\2\14\1\0\2\14\1\0\2\14\37\0\4\14\1\0\1\14"+
    "\7\0\12\12\2\0\3\14\20\0\11\14\1\0\3\14\1\0\26\14"+
    "\1\0\7\14\1\0\2\14\1\0\5\14\3\0\1\14\22\0\1\14"+
    "\17\0\2\14\4\0\12\12\11\0\1\14\13\0\10\14\2\0\2\14"+
    "\2\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14\3\0\1\14"+
    "\36\0\2\14\1\0\3\14\4\0\12\12\1\0\1\14\21\0\1\14"+
    "\1\0\6\14\3\0\3\14\1\0\4\14\3\0\2\14\1\0\1\14"+
    "\1\0\2\14\3\0\2\14\3\0\3\14\3\0\14\14\26\0\1\14"+
    "\25\0\12\12\25\0\10\14\1\0\3\14\1\0\27\14\1\0\20\14"+
    "\3\0\1\14\32\0\3\14\5\0\2\14\4\0\12\12\25\0\10\14"+
    "\1\0\3\14\1\0\27\14\1\0\12\14\1\0\5\14\3\0\1\14"+
    "\40\0\1\14\1\0\2\14\4\0\12\12\1\0\2\14\22\0\10\14"+
    "\1\0\3\14\1\0\51\14\2\0\1\14\20\0\1\14\20\0\3\14"+
    "\4\0\12\12\12\0\6\14\5\0\22\14\3\0\30\14\1\0\11\14"+
    "\1\0\1\14\2\0\7\14\37\0\12\12\21\0\60\14\1\0\2\14"+
    "\14\0\7\14\11\0\12\12\47\0\2\14\1\0\1\14\2\0\2\14"+
    "\1\0\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1\0\3\14"+
    "\1\0\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\0\2\14"+
    "\11\0\1\14\2\0\5\14\1\0\1\14\11\0\12\12\2\0\4\14"+
    "\40\0\1\14\37\0\12\12\26\0\10\14\1\0\44\14\33\0\5\14"+
    "\163\0\53\14\24\0\1\14\12\12\6\0\6\14\4\0\4\14\3\0"+
    "\1\14\3\0\2\14\7\0\3\14\4\0\15\14\14\0\1\14\1\0"+
    "\12\12\6\0\46\14\1\0\1\14\5\0\1\14\2\0\53\14\1\0"+
    "\u014d\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0"+
    "\51\14\1\0\4\14\2\0\41\14\1\0\4\14\2\0\7\14\1\0"+
    "\1\14\1\0\4\14\2\0\17\14\1\0\71\14\1\0\4\14\2\0"+
    "\103\14\45\0\20\14\20\0\126\14\2\0\6\14\3\0\u026c\14\2\0"+
    "\21\14\1\0\32\14\5\0\113\14\6\0\10\14\7\0\15\14\1\0"+
    "\4\14\16\0\22\14\16\0\22\14\16\0\15\14\1\0\3\14\17\0"+
    "\64\14\43\0\1\14\4\0\1\14\3\0\12\12\46\0\12\12\6\0"+
    "\130\14\10\0\51\14\1\0\1\14\5\0\106\14\12\0\37\14\47\0"+
    "\12\12\36\14\2\0\5\14\13\0\54\14\4\0\32\14\6\0\12\12"+
    "\46\0\27\14\11\0\65\14\53\0\12\12\6\0\12\12\15\0\1\14"+
    "\135\0\57\14\21\0\7\14\4\0\12\12\51\0\36\14\15\0\2\14"+
    "\12\12\54\14\32\0\44\14\34\0\12\12\3\0\3\14\12\12\44\14"+
    "\153\0\4\14\1\0\4\14\3\0\2\14\11\0\300\14\100\0\u0116\14"+
    "\2\0\6\14\2\0\46\14\2\0\6\14\2\0\10\14\1\0\1\14"+
    "\1\0\1\14\1\0\1\14\1\0\37\14\2\0\65\14\1\0\7\14"+
    "\1\0\1\14\3\0\3\14\1\0\7\14\3\0\4\14\2\0\6\14"+
    "\4\0\15\14\5\0\3\14\1\0\7\14\164\0\1\14\15\0\1\14"+
    "\20\0\15\14\145\0\1\14\4\0\1\14\2\0\12\14\1\0\1\14"+
    "\3\0\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0\4\14"+
    "\1\0\13\14\2\0\4\14\5\0\5\14\4\0\1\14\64\0\2\14"+
    "\u0a7b\0\57\14\1\0\57\14\1\0\205\14\6\0\4\14\3\0\2\14"+
    "\14\0\46\14\1\0\1\14\5\0\1\14\2\0\70\14\7\0\1\14"+
    "\20\0\27\14\11\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14"+
    "\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14\120\0\1\14"+
    "\u01d5\0\2\14\52\0\5\14\5\0\2\14\4\0\126\14\6\0\3\14"+
    "\1\0\132\14\1\0\4\14\5\0\51\14\3\0\136\14\21\0\33\14"+
    "\65\0\20\14\u0200\0\u19b6\14\112\0\u51d6\14\52\0\u048d\14\103\0\56\14"+
    "\2\0\u010d\14\3\0\20\14\12\12\2\14\24\0\57\14\20\0\37\14"+
    "\2\0\106\14\61\0\11\14\2\0\147\14\2\0\43\14\2\0\10\14"+
    "\77\0\13\14\1\0\3\14\1\0\4\14\1\0\27\14\35\0\64\14"+
    "\16\0\62\14\34\0\12\12\30\0\6\14\3\0\1\14\1\0\1\14"+
    "\2\0\12\12\34\14\12\0\27\14\31\0\35\14\7\0\57\14\34\0"+
    "\1\14\12\12\6\0\5\14\1\0\12\14\12\12\5\14\1\0\51\14"+
    "\27\0\3\14\1\0\10\14\4\0\12\12\6\0\27\14\3\0\1\14"+
    "\3\0\62\14\1\0\1\14\3\0\2\14\2\0\5\14\2\0\1\14"+
    "\1\0\1\14\30\0\3\14\2\0\13\14\7\0\3\14\14\0\6\14"+
    "\2\0\6\14\2\0\6\14\11\0\7\14\1\0\7\14\1\0\53\14"+
    "\1\0\12\14\12\0\163\14\15\0\12\12\6\0\u2ba4\14\14\0\27\14"+
    "\4\0\61\14\u2104\0\u016e\14\2\0\152\14\46\0\7\14\14\0\5\14"+
    "\5\0\1\14\1\0\12\14\1\0\15\14\1\0\5\14\1\0\1\14"+
    "\1\0\2\14\1\0\2\14\1\0\154\14\41\0\u016b\14\22\0\100\14"+
    "\2\0\66\14\50\0\14\14\164\0\5\14\1\0\207\14\23\0\12\12"+
    "\7\0\32\14\6\0\32\14\13\0\131\14\3\0\6\14\2\0\6\14"+
    "\2\0\6\14\2\0\3\14\43\0\14\14\1\0\32\14\1\0\23\14"+
    "\1\0\2\14\1\0\17\14\2\0\16\14\42\0\173\14\u0185\0\35\14"+
    "\3\0\61\14\57\0\40\14\20\0\21\14\1\0\10\14\6\0\46\14"+
    "\12\0\36\14\2\0\44\14\4\0\10\14\60\0\236\14\2\0\12\12"+
    "\126\0\50\14\10\0\64\14\234\0\u0137\14\11\0\26\14\12\0\10\14"+
    "\230\0\6\14\2\0\1\14\1\0\54\14\1\0\2\14\3\0\1\14"+
    "\2\0\27\14\12\0\27\14\11\0\37\14\101\0\23\14\1\0\2\14"+
    "\12\0\26\14\12\0\32\14\106\0\70\14\6\0\2\14\100\0\1\14"+
    "\17\0\4\14\1\0\3\14\1\0\33\14\54\0\35\14\3\0\35\14"+
    "\43\0\10\14\1\0\34\14\33\0\66\14\12\0\26\14\12\0\23\14"+
    "\15\0\22\14\156\0\111\14\67\0\63\14\15\0\63\14\u0310\0\65\14"+
    "\56\0\12\12\23\0\55\14\40\0\31\14\7\0\12\12\11\0\44\14"+
    "\17\0\12\12\20\0\43\14\3\0\1\14\14\0\60\14\16\0\4\14"+
    "\13\0\12\12\1\14\1\0\1\14\43\0\22\14\1\0\31\14\124\0"+
    "\7\14\1\0\1\14\1\0\4\14\1\0\17\14\1\0\12\14\7\0"+
    "\57\14\21\0\12\12\13\0\10\14\2\0\2\14\2\0\26\14\1\0"+
    "\7\14\1\0\2\14\1\0\5\14\3\0\1\14\22\0\1\14\14\0"+
    "\5\14\u011e\0\60\14\24\0\2\14\1\0\1\14\10\0\12\12\246\0"+
    "\57\14\51\0\4\14\44\0\60\14\24\0\1\14\13\0\12\12\46\0"+
    "\53\14\25\0\12\12\66\0\32\14\26\0\12\12\u0166\0\100\14\12\12"+
    "\25\0\1\14\u01c0\0\71\14\u0507\0\u039a\14\346\0\304\14\u0abc\0\u042f\14"+
    "\u0fd1\0\u0247\14\u21b9\0\u0239\14\7\0\37\14\1\0\12\12\146\0\36\14"+
    "\22\0\60\14\20\0\4\14\14\0\12\12\11\0\25\14\5\0\23\14"+
    "\u0370\0\105\14\13\0\1\14\102\0\15\14\u4060\0\2\14\u0bfe\0\153\14"+
    "\5\0\15\14\3\0\11\14\7\0\12\14\u1766\0\125\14\1\0\107\14"+
    "\1\0\2\14\2\0\1\14\2\0\2\14\2\0\4\14\1\0\14\14"+
    "\1\0\1\14\1\0\7\14\1\0\101\14\1\0\4\14\2\0\10\14"+
    "\1\0\7\14\1\0\34\14\1\0\4\14\1\0\5\14\1\0\1\14"+
    "\3\0\7\14\1\0\u0154\14\2\0\31\14\1\0\31\14\1\0\37\14"+
    "\1\0\31\14\1\0\37\14\1\0\31\14\1\0\37\14\1\0\31\14"+
    "\1\0\37\14\1\0\31\14\1\0\10\14\2\0\62\12\u1000\0\305\14"+
    "\u053b\0\4\14\1\0\33\14\1\0\2\14\1\0\1\14\2\0\1\14"+
    "\1\0\12\14\1\0\4\14\1\0\1\14\1\0\1\14\6\0\1\14"+
    "\4\0\1\14\1\0\1\14\1\0\1\14\1\0\3\14\1\0\2\14"+
    "\1\0\1\14\2\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14"+
    "\1\0\1\14\1\0\2\14\1\0\1\14\2\0\4\14\1\0\7\14"+
    "\1\0\4\14\1\0\4\14\1\0\1\14\1\0\12\14\1\0\21\14"+
    "\5\0\3\14\1\0\5\14\1\0\21\14\u1144\0\ua6d7\14\51\0\u1035\14"+
    "\13\0\336\14\2\0\u1682\14\u295e\0\u021e\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\1\2\5\1\6"+
    "\1\7\1\10\15\5\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\0\1\27\1\0\1\5\1\0\25\5\1\26"+
    "\1\0\1\5\1\6\2\5\1\30\22\5\1\26\1\0"+
    "\3\5\1\31\3\5\1\32\3\5\1\33\5\5\1\34"+
    "\1\35\1\36\1\5\1\0\17\5\1\0\1\5\1\37"+
    "\3\5\1\40\5\5\1\41\1\42\2\5\1\43\1\44"+
    "\5\5\1\45\1\5\1\46\1\47\1\5\1\50\2\5"+
    "\1\51\2\5\1\52\1\53\2\5\1\54\1\55\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\132\0\341\0\u010e"+
    "\0\u013b\0\u0168\0\132\0\132\0\u0195\0\u01c2\0\u01ef\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\132\0\132\0\132\0\132\0\132\0\132\0\132"+
    "\0\132\0\132\0\132\0\132\0\132\0\u03de\0\u040b\0\341"+
    "\0\132\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546"+
    "\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae"+
    "\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u0492\0\u08f7\0\u0924\0\u013b"+
    "\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c"+
    "\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\u0c21\0\u0c4e\0\132\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u013b"+
    "\0\u0d2f\0\u0d5c\0\u0d89\0\u013b\0\u0db6\0\u0de3\0\u0e10\0\u013b"+
    "\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u013b\0\u013b\0\u013b"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\u013b\0\u1275\0\u12a2\0\u12cf\0\u013b"+
    "\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u013b\0\u013b\0\u13dd"+
    "\0\u140a\0\u013b\0\u013b\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb"+
    "\0\u013b\0\u1518\0\u013b\0\u013b\0\u1545\0\u013b\0\u1572\0\u159f"+
    "\0\u013b\0\u15cc\0\u15f9\0\u013b\0\u013b\0\u1626\0\u1653\0\u1680"+
    "\0\u013b\0\u013b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\2\12\1\13\1\11\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\11\1\22\1\23\1\24\1\25\1\11\1\26"+
    "\1\11\1\27\1\11\1\30\1\11\1\31\2\11\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\7\3\2\11\3\3\1\11\1\45\24\11"+
    "\13\3\56\0\2\4\55\0\1\46\1\47\50\0\5\50"+
    "\1\51\1\52\46\50\7\0\4\11\1\0\1\11\1\0"+
    "\3\11\1\53\20\11\22\0\4\11\1\0\1\11\1\0"+
    "\24\11\24\0\2\12\1\54\50\0\4\11\1\0\1\11"+
    "\1\0\1\11\1\55\4\11\1\56\15\11\22\0\4\11"+
    "\1\0\1\11\1\0\7\11\1\57\1\60\13\11\22\0"+
    "\4\11\1\0\1\11\1\0\3\11\1\61\20\11\22\0"+
    "\4\11\1\0\1\11\1\0\21\11\1\62\2\11\22\0"+
    "\4\11\1\0\1\11\1\0\10\11\1\63\13\11\22\0"+
    "\1\11\1\64\2\11\1\0\1\11\1\0\3\11\1\65"+
    "\3\11\1\66\14\11\22\0\1\67\3\11\1\0\1\11"+
    "\1\0\24\11\22\0\4\11\1\0\1\11\1\0\6\11"+
    "\1\70\7\11\1\71\5\11\22\0\1\11\1\72\2\11"+
    "\1\0\1\11\1\0\5\11\1\73\16\11\22\0\4\11"+
    "\1\0\1\11\1\0\3\11\1\74\4\11\1\75\13\11"+
    "\22\0\4\11\1\0\1\11\1\0\1\76\2\11\1\77"+
    "\20\11\22\0\4\11\1\0\1\11\1\0\1\100\23\11"+
    "\22\0\4\11\1\0\1\11\1\0\7\11\1\101\14\11"+
    "\13\0\1\46\1\0\53\46\4\47\1\102\50\47\3\0"+
    "\1\50\1\0\3\50\1\103\11\0\3\50\5\0\1\50"+
    "\31\0\4\11\1\0\1\11\1\0\3\11\1\104\20\11"+
    "\24\0\2\105\51\0\4\11\1\0\1\11\1\0\2\11"+
    "\1\106\21\11\22\0\4\11\1\0\1\11\1\0\5\11"+
    "\1\107\16\11\22\0\4\11\1\0\1\11\1\0\2\11"+
    "\1\110\21\11\22\0\4\11\1\0\1\11\1\0\5\11"+
    "\1\111\16\11\22\0\4\11\1\0\1\11\1\0\15\11"+
    "\1\112\6\11\22\0\4\11\1\0\1\11\1\0\10\11"+
    "\1\113\13\11\22\0\4\11\1\0\1\11\1\0\12\11"+
    "\1\114\11\11\22\0\4\11\1\0\1\11\1\0\15\11"+
    "\1\115\6\11\22\0\4\11\1\0\1\11\1\0\13\11"+
    "\1\116\10\11\22\0\4\11\1\0\1\11\1\0\1\11"+
    "\1\117\22\11\22\0\4\11\1\0\1\11\1\0\11\11"+
    "\1\120\12\11\22\0\1\11\1\121\2\11\1\0\1\11"+
    "\1\0\24\11\22\0\4\11\1\0\1\11\1\0\5\11"+
    "\1\122\16\11\22\0\4\11\1\0\1\11\1\0\2\11"+
    "\1\123\21\11\22\0\4\11\1\0\1\11\1\0\4\11"+
    "\1\124\17\11\22\0\1\11\1\125\2\11\1\0\1\11"+
    "\1\0\24\11\22\0\4\11\1\0\1\11\1\0\14\11"+
    "\1\126\7\11\22\0\4\11\1\0\1\11\1\0\11\11"+
    "\1\127\12\11\22\0\4\11\1\0\1\11\1\0\6\11"+
    "\1\130\15\11\22\0\4\11\1\0\1\11\1\0\5\11"+
    "\1\131\16\11\22\0\4\11\1\0\1\11\1\0\4\11"+
    "\1\132\17\11\13\0\3\47\1\133\1\102\50\47\11\0"+
    "\1\134\52\0\4\11\1\0\1\11\1\0\15\11\1\135"+
    "\6\11\22\0\4\11\1\0\1\11\1\0\3\11\1\136"+
    "\20\11\22\0\4\11\1\0\1\11\1\0\10\11\1\137"+
    "\13\11\22\0\4\11\1\0\1\11\1\0\7\11\1\140"+
    "\14\11\22\0\4\11\1\0\1\11\1\0\22\11\1\141"+
    "\1\11\22\0\4\11\1\0\1\11\1\0\4\11\1\142"+
    "\17\11\22\0\4\11\1\0\1\11\1\0\3\11\1\143"+
    "\20\11\22\0\4\11\1\0\1\11\1\0\15\11\1\144"+
    "\6\11\22\0\4\11\1\0\1\11\1\0\10\11\1\145"+
    "\13\11\22\0\4\11\1\0\1\11\1\0\10\11\1\146"+
    "\13\11\22\0\4\11\1\0\1\11\1\0\5\11\1\147"+
    "\16\11\22\0\4\11\1\0\1\11\1\0\1\11\1\150"+
    "\22\11\22\0\4\11\1\0\1\11\1\0\10\11\1\151"+
    "\13\11\22\0\4\11\1\0\1\11\1\0\2\11\1\152"+
    "\21\11\22\0\4\11\1\0\1\11\1\0\1\153\23\11"+
    "\22\0\1\154\3\11\1\0\1\11\1\0\24\11\22\0"+
    "\4\11\1\0\1\11\1\0\7\11\1\155\14\11\22\0"+
    "\4\11\1\0\1\11\1\0\5\11\1\156\16\11\22\0"+
    "\4\11\1\0\1\11\1\0\23\11\1\157\22\0\4\11"+
    "\1\0\1\11\1\0\20\11\1\160\3\11\22\0\4\11"+
    "\1\0\1\11\1\0\5\11\1\161\16\11\24\0\1\162"+
    "\52\0\4\11\1\0\1\11\1\0\10\11\1\163\13\11"+
    "\22\0\4\11\1\0\1\11\1\0\4\11\1\164\17\11"+
    "\22\0\4\11\1\0\1\11\1\0\23\11\1\165\22\0"+
    "\4\11\1\0\1\11\1\0\1\11\1\166\22\11\22\0"+
    "\4\11\1\0\1\11\1\0\4\11\1\167\17\11\22\0"+
    "\4\11\1\0\1\11\1\0\4\11\1\170\17\11\22\0"+
    "\4\11\1\0\1\11\1\0\14\11\1\171\7\11\22\0"+
    "\4\11\1\0\1\11\1\0\11\11\1\172\12\11\22\0"+
    "\4\11\1\0\1\11\1\0\4\11\1\173\17\11\22\0"+
    "\4\11\1\0\1\11\1\0\6\11\1\174\15\11\22\0"+
    "\4\11\1\0\1\11\1\0\15\11\1\175\6\11\22\0"+
    "\4\11\1\0\1\11\1\0\6\11\1\176\15\11\22\0"+
    "\4\11\1\0\1\11\1\0\15\11\1\177\6\11\22\0"+
    "\1\11\1\200\2\11\1\0\1\11\1\0\24\11\22\0"+
    "\4\11\1\0\1\11\1\0\22\11\1\201\1\11\24\0"+
    "\1\202\52\0\4\11\1\0\1\11\1\0\7\11\1\203"+
    "\14\11\22\0\4\11\1\0\1\11\1\0\5\11\1\204"+
    "\16\11\22\0\4\11\1\0\1\11\1\0\10\11\1\205"+
    "\13\11\22\0\4\11\1\0\1\11\1\0\3\11\1\206"+
    "\20\11\22\0\4\11\1\0\1\11\1\0\1\207\23\11"+
    "\22\0\4\11\1\0\1\11\1\0\13\11\1\210\10\11"+
    "\22\0\4\11\1\0\1\11\1\0\7\11\1\211\14\11"+
    "\22\0\4\11\1\0\1\11\1\0\2\11\1\212\21\11"+
    "\22\0\4\11\1\0\1\11\1\0\7\11\1\213\14\11"+
    "\22\0\4\11\1\0\1\11\1\0\13\11\1\214\10\11"+
    "\22\0\4\11\1\0\1\11\1\0\10\11\1\215\13\11"+
    "\22\0\4\11\1\0\1\11\1\0\23\11\1\216\22\0"+
    "\4\11\1\0\1\11\1\0\10\11\1\217\13\11\22\0"+
    "\4\11\1\0\1\11\1\0\15\11\1\220\6\11\22\0"+
    "\4\11\1\0\1\11\1\0\2\11\1\221\21\11\24\0"+
    "\1\50\52\0\4\11\1\0\1\11\1\0\6\11\1\222"+
    "\15\11\22\0\4\11\1\0\1\11\1\0\4\11\1\223"+
    "\17\11\22\0\4\11\1\0\1\11\1\0\4\11\1\224"+
    "\17\11\22\0\4\11\1\0\1\11\1\0\13\11\1\225"+
    "\10\11\22\0\1\11\1\226\2\11\1\0\1\11\1\0"+
    "\24\11\22\0\4\11\1\0\1\11\1\0\7\11\1\227"+
    "\14\11\22\0\4\11\1\0\1\11\1\0\12\11\1\230"+
    "\11\11\22\0\4\11\1\0\1\11\1\0\11\11\1\231"+
    "\12\11\22\0\4\11\1\0\1\11\1\0\1\11\1\232"+
    "\22\11\22\0\4\11\1\0\1\11\1\0\5\11\1\233"+
    "\16\11\22\0\4\11\1\0\1\11\1\0\10\11\1\234"+
    "\13\11\22\0\4\11\1\0\1\11\1\0\2\11\1\235"+
    "\21\11\22\0\4\11\1\0\1\11\1\0\10\11\1\236"+
    "\13\11\22\0\4\11\1\0\1\11\1\0\15\11\1\237"+
    "\6\11\22\0\4\11\1\0\1\11\1\0\12\11\1\240"+
    "\11\11\22\0\4\11\1\0\1\11\1\0\5\11\1\241"+
    "\16\11\22\0\4\11\1\0\1\11\1\0\10\11\1\242"+
    "\13\11\22\0\4\11\1\0\1\11\1\0\20\11\1\243"+
    "\3\11\22\0\4\11\1\0\1\11\1\0\5\11\1\244"+
    "\16\11\22\0\4\11\1\0\1\11\1\0\10\11\1\245"+
    "\13\11\22\0\4\11\1\0\1\11\1\0\6\11\1\246"+
    "\15\11\22\0\4\11\1\0\1\11\1\0\1\247\23\11"+
    "\22\0\4\11\1\0\1\11\1\0\5\11\1\250\16\11"+
    "\22\0\4\11\1\0\1\11\1\0\12\11\1\251\11\11"+
    "\22\0\4\11\1\0\1\11\1\0\11\11\1\252\12\11"+
    "\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5805];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\4\1\2\11\15\1\14\11"+
    "\2\1\1\0\1\11\1\0\1\1\1\0\26\1\1\0"+
    "\27\1\1\11\1\0\25\1\1\0\17\1\1\0\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int curlyCount = 0;

  public SchemaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SchemaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2522) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 47: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 48: break;
          case 3: 
            { return S_SLASH;
            }
          case 49: break;
          case 4: 
            { return S_STAR;
            }
          case 50: break;
          case 5: 
            { return S_ID;
            }
          case 51: break;
          case 6: 
            { return S_NUMBER;
            }
          case 52: break;
          case 7: 
            { return S_DOT;
            }
          case 53: break;
          case 8: 
            { yybegin(BACKTICK); return S_BACKTICK;
            }
          case 54: break;
          case 9: 
            { return S_COLON;
            }
          case 55: break;
          case 10: 
            { return S_COMMA;
            }
          case 56: break;
          case 11: 
            { return S_EQ;
            }
          case 57: break;
          case 12: 
            { curlyCount++; return S_CURLY_LEFT;
            }
          case 58: break;
          case 13: 
            { curlyCount = (curlyCount == 0 ? 0 : curlyCount - 1) ; return S_CURLY_RIGHT;
            }
          case 59: break;
          case 14: 
            { return S_BRACKET_LEFT;
            }
          case 60: break;
          case 15: 
            { return S_BRACKET_RIGHT;
            }
          case 61: break;
          case 16: 
            { return S_PAREN_LEFT;
            }
          case 62: break;
          case 17: 
            { return S_PAREN_RIGHT;
            }
          case 63: break;
          case 18: 
            { return S_ANGLE_LEFT;
            }
          case 64: break;
          case 19: 
            { return S_ANGLE_RIGHT;
            }
          case 65: break;
          case 20: 
            { yybegin(YYINITIAL); return S_BACKTICK;
            }
          case 66: break;
          case 21: 
            { return S_COMMENT;
            }
          case 67: break;
          case 22: 
            { return S_BLOCK_COMMENT;
            }
          case 68: break;
          case 23: 
            { return S_STRING;
            }
          case 69: break;
          case 24: 
            { return curlyCount < 2 ? S_MAP : S_ID;
            }
          case 70: break;
          case 25: 
            { return curlyCount == 0 ? S_META : S_ID;
            }
          case 71: break;
          case 26: 
            { return S_NULL;
            }
          case 72: break;
          case 27: 
            { return curlyCount == 0 ? S_ENUM : S_ID;
            }
          case 73: break;
          case 28: 
            { return curlyCount < 2 ? S_LIST : S_ID;
            }
          case 74: break;
          case 29: 
            { return curlyCount == 0 ? S_LONG_T : S_ID;
            }
          case 75: break;
          case 30: 
            { return curlyCount == 0 ? S_WITH : S_ID;
            }
          case 76: break;
          case 31: 
            { return curlyCount == 0 ? S_IMPORT : S_ID;
            }
          case 77: break;
          case 32: 
            { return curlyCount == 0 ? S_RECORD : S_ID;
            }
          case 78: break;
          case 33: 
            { return curlyCount == 0 ? S_STRING_T : S_ID;
            }
          case 79: break;
          case 34: 
            { return curlyCount == 0 ? S_DOUBLE_T : S_ID;
            }
          case 80: break;
          case 35: 
            { return curlyCount == 0 ? S_BOOLEAN_T : S_ID;
            }
          case 81: break;
          case 36: 
            { return curlyCount == 0 ? S_INTEGER_T : S_ID;
            }
          case 82: break;
          case 37: 
            { return curlyCount == 0 ? S_EXTENDS : S_ID;
            }
          case 83: break;
          case 38: 
            { return curlyCount < 2 ? S_DEFAULT : S_ID;
            }
          case 84: break;
          case 39: 
            { return curlyCount == 0 ? S_VARTYPE : S_ID;
            }
          case 85: break;
          case 40: 
            { return curlyCount == 1 ? S_OVERRIDE : S_ID;
            }
          case 86: break;
          case 41: 
            { return curlyCount < 2 ? S_ABSTRACT : S_ID;
            }
          case 87: break;
          case 42: 
            { return curlyCount < 2 ? S_NODEFAULT : S_ID;
            }
          case 88: break;
          case 43: 
            { return curlyCount == 0 ? S_NAMESPACE : S_ID;
            }
          case 89: break;
          case 44: 
            { return curlyCount == 0 ? S_SUPPLEMENT : S_ID;
            }
          case 90: break;
          case 45: 
            { return curlyCount == 0 ? S_POLYMORPHIC : S_ID;
            }
          case 91: break;
          case 46: 
            { return curlyCount == 0 ? S_SUPPLEMENTS : S_ID;
            }
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
