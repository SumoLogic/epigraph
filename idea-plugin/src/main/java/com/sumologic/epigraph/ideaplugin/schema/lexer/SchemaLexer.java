/* The following code was generated by JFlex 1.4.3 on 5/10/16 5:00 PM */

package com.sumologic.epigraph.ideaplugin.schema.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.sumologic.epigraph.ideaplugin.schema.lexer.SchemaElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/10/16 5:00 PM from the specification file
 * <tt>/Users/konstantin/workspace/epigraph/project/idea-plugin/src/main/java/com/sumologic/epigraph/ideaplugin/schema/lexer/SchemaLexer.flex</tt>
 */
public class SchemaLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DATA_VALUE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\2\1\2\1\1\22\0\1\2\11\0\1\4"+
    "\1\40\1\36\1\0\1\35\1\3\12\7\1\34\1\5\1\0\1\37"+
    "\3\0\32\6\1\43\1\0\1\44\3\0\1\17\1\33\1\22\1\23"+
    "\1\20\1\24\1\32\1\31\1\10\2\6\1\26\1\11\1\16\1\13"+
    "\1\12\1\6\1\14\1\21\1\15\1\25\1\6\1\30\1\27\2\6"+
    "\1\41\1\0\1\42\54\0\1\6\12\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\201\0\5\6\1\0\2\6\2\0\4\6\10\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0"+
    "\213\6\10\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6\110\0"+
    "\33\6\5\0\3\6\55\0\53\6\25\0\12\7\4\0\2\6\1\0"+
    "\143\6\1\0\1\6\17\0\2\6\7\0\2\6\12\7\3\6\2\0"+
    "\1\6\20\0\1\6\1\0\36\6\35\0\131\6\13\0\1\6\16\0"+
    "\12\7\41\6\11\0\2\6\4\0\1\6\5\0\26\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\27\0\31\6\107\0\1\6\1\0\13\6"+
    "\127\0\66\6\3\0\1\6\22\0\1\6\7\0\12\6\4\0\12\7"+
    "\1\0\7\6\1\0\7\6\5\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\1\6\3\0\4\6\3\0\1\6\20\0\1\6"+
    "\15\0\2\6\1\0\3\6\4\0\12\7\2\6\23\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\37\0\4\6\1\0\1\6\7\0\12\7\2\0\3\6\20\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\3\0\1\6\22\0\1\6\17\0\2\6\4\0\12\7\25\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\3\0\1\6\36\0\2\6\1\0\3\6\4\0\12\7\1\0"+
    "\1\6\21\0\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\14\6\26\0\1\6\25\0\12\7\25\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\12\6\1\0\5\6\3\0\1\6\32\0\2\6\6\0"+
    "\2\6\4\0\12\7\25\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\3\0\1\6\40\0\1\6\1\0\2\6\4\0"+
    "\12\7\1\0\2\6\22\0\10\6\1\0\3\6\1\0\51\6\2\0"+
    "\1\6\20\0\1\6\21\0\2\6\4\0\12\7\12\0\6\6\5\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\72\0"+
    "\60\6\1\0\2\6\14\0\7\6\11\0\12\7\47\0\2\6\1\0"+
    "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0"+
    "\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0"+
    "\4\6\1\0\2\6\11\0\1\6\2\0\5\6\1\0\1\6\11\0"+
    "\12\7\2\0\4\6\40\0\1\6\37\0\12\7\26\0\10\6\1\0"+
    "\44\6\33\0\5\6\163\0\53\6\24\0\1\6\12\7\6\0\6\6"+
    "\4\0\4\6\3\0\1\6\3\0\2\6\7\0\3\6\4\0\15\6"+
    "\14\0\1\6\1\0\12\7\6\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6"+
    "\1\0\4\6\2\0\103\6\45\0\20\6\20\0\125\6\14\0\u026c\6"+
    "\2\0\21\6\1\0\32\6\5\0\113\6\25\0\15\6\1\0\4\6"+
    "\16\0\22\6\16\0\22\6\16\0\15\6\1\0\3\6\17\0\64\6"+
    "\43\0\1\6\4\0\1\6\3\0\12\7\46\0\12\7\6\0\130\6"+
    "\10\0\51\6\1\0\1\6\5\0\106\6\12\0\35\6\51\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\25\0\7\6\10\0\12\7\46\0"+
    "\27\6\11\0\65\6\53\0\12\7\6\0\12\7\15\0\1\6\135\0"+
    "\57\6\21\0\7\6\4\0\12\7\51\0\36\6\15\0\2\6\12\7"+
    "\54\6\32\0\44\6\34\0\12\7\3\0\3\6\12\7\44\6\153\0"+
    "\4\6\1\0\4\6\3\0\2\6\11\0\300\6\100\0\u0116\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\164\0\1\6\15\0\1\6\20\0"+
    "\15\6\145\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0"+
    "\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\13\6\2\0\4\6\5\0\5\6\4\0\1\6\64\0\2\6\u0a7b\0"+
    "\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\0\2\6\14\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\20\0"+
    "\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\120\0\1\6\u01d5\0"+
    "\2\6\52\0\5\6\5\0\2\6\4\0\126\6\6\0\3\6\1\0"+
    "\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0"+
    "\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0"+
    "\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\20\0\31\6\10\0"+
    "\106\6\61\0\11\6\2\0\147\6\2\0\4\6\1\0\4\6\14\0"+
    "\13\6\115\0\12\6\1\0\3\6\1\0\4\6\1\0\27\6\35\0"+
    "\64\6\16\0\62\6\34\0\12\7\30\0\6\6\3\0\1\6\4\0"+
    "\12\7\34\6\12\0\27\6\31\0\35\6\7\0\57\6\34\0\1\6"+
    "\12\7\46\0\51\6\27\0\3\6\1\0\10\6\4\0\12\7\6\0"+
    "\27\6\3\0\1\6\5\0\60\6\1\0\1\6\3\0\2\6\2\0"+
    "\5\6\2\0\1\6\1\0\1\6\30\0\3\6\2\0\13\6\7\0"+
    "\3\6\14\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0"+
    "\7\6\221\0\43\6\15\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0"+
    "\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\0\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\14\6\164\0\5\6\1\0\207\6\23\0\12\7\7\0"+
    "\32\6\6\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\4\1\5\14\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\1\1\20\1\21\1\22\22\6\1\22\2\6"+
    "\1\23\17\6\1\22\2\6\1\24\3\6\1\25\6\6"+
    "\1\26\1\27\1\30\3\6\1\31\7\6\1\32\1\6"+
    "\1\33\1\6\1\34\2\6\1\35\1\6\1\36\2\6"+
    "\1\37\1\6\1\40\1\6\1\41\1\42\2\6\1\43"+
    "\1\6\1\44\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\112\0\112\0\271"+
    "\0\336\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1"+
    "\0\u0206\0\u022b\0\u0250\0\112\0\112\0\112\0\112\0\112"+
    "\0\112\0\112\0\112\0\112\0\u0275\0\112\0\u029a\0\u02bf"+
    "\0\u02e4\0\u0309\0\u032e\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7"+
    "\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f"+
    "\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8\0\271\0\u05ed\0\u0612"+
    "\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a"+
    "\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\112\0\u0818\0\u083d"+
    "\0\271\0\u0862\0\u0887\0\u08ac\0\271\0\u08d1\0\u08f6\0\u091b"+
    "\0\u0940\0\u0965\0\u098a\0\271\0\271\0\271\0\u09af\0\u09d4"+
    "\0\u09f9\0\271\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7"+
    "\0\u0afc\0\271\0\u0b21\0\271\0\u0b46\0\271\0\u0b6b\0\u0b90"+
    "\0\271\0\u0bb5\0\271\0\u0bda\0\u0bff\0\271\0\u0c24\0\271"+
    "\0\u0c49\0\271\0\271\0\u0c6e\0\u0c93\0\271\0\u0cb8\0\u0cdd"+
    "\0\271";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\2\10\1\13\1\10\1\14\1\10\1\15\1\16"+
    "\1\10\1\17\1\10\1\20\1\21\1\10\1\22\2\10"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\5\35\1\36\37\35\46\0\2\4\45\0"+
    "\1\37\1\40\46\0\26\10\17\0\3\10\1\41\4\10"+
    "\1\42\15\10\17\0\11\10\1\43\1\44\4\10\1\45"+
    "\6\10\17\0\12\10\1\46\13\10\17\0\11\10\1\47"+
    "\14\10\17\0\10\10\1\50\10\10\1\51\4\10\17\0"+
    "\7\10\1\52\7\10\1\53\6\10\17\0\5\10\1\54"+
    "\4\10\1\55\13\10\17\0\10\10\1\56\15\10\17\0"+
    "\2\10\1\57\2\10\1\60\20\10\17\0\2\10\1\61"+
    "\23\10\17\0\5\10\1\62\20\10\11\0\5\35\1\0"+
    "\37\35\1\37\1\0\43\37\4\40\1\63\40\40\6\0"+
    "\4\10\1\64\21\10\17\0\7\10\1\65\16\10\17\0"+
    "\4\10\1\66\21\10\17\0\7\10\1\67\16\10\17\0"+
    "\20\10\1\70\5\10\17\0\14\10\1\71\11\10\17\0"+
    "\3\10\1\72\22\10\17\0\17\10\1\73\6\10\17\0"+
    "\7\10\1\74\16\10\17\0\6\10\1\75\17\10\17\0"+
    "\4\10\1\76\21\10\17\0\17\10\1\77\6\10\17\0"+
    "\16\10\1\100\7\10\17\0\2\10\1\101\23\10\17\0"+
    "\13\10\1\102\12\10\17\0\10\10\1\103\15\10\17\0"+
    "\7\10\1\104\16\10\17\0\5\10\1\105\20\10\11\0"+
    "\3\40\1\106\1\63\40\40\6\0\5\10\1\107\20\10"+
    "\17\0\12\10\1\110\13\10\17\0\11\10\1\111\14\10"+
    "\17\0\7\10\1\112\16\10\17\0\5\10\1\113\20\10"+
    "\17\0\12\10\1\114\13\10\17\0\3\10\1\115\22\10"+
    "\17\0\12\10\1\116\13\10\17\0\2\10\1\117\23\10"+
    "\17\0\4\10\1\120\21\10\17\0\25\10\1\121\17\0"+
    "\11\10\1\122\14\10\17\0\5\10\1\123\20\10\17\0"+
    "\7\10\1\124\16\10\17\0\24\10\1\125\1\10\17\0"+
    "\23\10\1\126\2\10\17\0\20\10\1\127\5\10\17\0"+
    "\6\10\1\130\17\10\17\0\24\10\1\131\1\10\17\0"+
    "\2\10\1\132\23\10\17\0\6\10\1\133\17\10\17\0"+
    "\13\10\1\134\12\10\17\0\10\10\1\135\15\10\17\0"+
    "\10\10\1\136\15\10\17\0\20\10\1\137\5\10\17\0"+
    "\20\10\1\140\5\10\17\0\17\10\1\141\6\10\17\0"+
    "\10\10\1\142\15\10\17\0\12\10\1\143\13\10\17\0"+
    "\7\10\1\144\16\10\17\0\12\10\1\145\13\10\17\0"+
    "\15\10\1\146\10\10\17\0\4\10\1\147\21\10\17\0"+
    "\15\10\1\150\10\10\17\0\24\10\1\151\1\10\17\0"+
    "\12\10\1\152\13\10\17\0\12\10\1\153\13\10\17\0"+
    "\20\10\1\154\5\10\17\0\11\10\1\155\14\10\17\0"+
    "\6\10\1\156\17\10\17\0\11\10\1\157\14\10\17\0"+
    "\13\10\1\160\12\10\17\0\3\10\1\161\22\10\17\0"+
    "\7\10\1\162\16\10\17\0\10\10\1\163\15\10\17\0"+
    "\14\10\1\164\11\10\17\0\12\10\1\165\13\10\17\0"+
    "\12\10\1\166\13\10\17\0\10\10\1\167\15\10\17\0"+
    "\7\10\1\170\16\10\17\0\13\10\1\171\12\10\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3330];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\2\1\2\11\14\1\11\11\1\1"+
    "\1\11\47\1\1\11\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  int curlyCount = 0;

  public SchemaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SchemaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1688) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { return curlyCount == 0 ? S_RECORD : S_ID;
          }
        case 38: break;
        case 34: 
          { return curlyCount == 0 ? S_BOOLEAN_T : S_ID;
          }
        case 39: break;
        case 8: 
          { return S_DOT;
          }
        case 40: break;
        case 15: 
          { return S_BRACKET_RIGHT;
          }
        case 41: break;
        case 6: 
          { return S_ID;
          }
        case 42: break;
        case 19: 
          { return curlyCount < 2 ? S_MAP : S_ID;
          }
        case 43: break;
        case 1: 
          { return S_DATA_VALUE;
          }
        case 44: break;
        case 25: 
          { return curlyCount == 0 ? S_MULTI : S_ID;
          }
        case 45: break;
        case 17: 
          { return S_COMMENT;
          }
        case 46: break;
        case 5: 
          { return S_SEMI_COLON;
          }
        case 47: break;
        case 16: 
          { yybegin(YYINITIAL); return S_SEMI_COLON;
          }
        case 48: break;
        case 9: 
          { return S_COMMA;
          }
        case 49: break;
        case 11: 
          { return S_PLUS;
          }
        case 50: break;
        case 23: 
          { return curlyCount == 0 ? S_LONG_T : S_ID;
          }
        case 51: break;
        case 37: 
          { return curlyCount == 0 ? S_SUPPLEMENTS : S_ID;
          }
        case 52: break;
        case 30: 
          { return curlyCount == 0 ? S_DOUBLE_T : S_ID;
          }
        case 53: break;
        case 7: 
          { return S_COLON;
          }
        case 54: break;
        case 4: 
          { return S_STAR;
          }
        case 55: break;
        case 21: 
          { return curlyCount == 0 ? S_ENUM : S_ID;
          }
        case 56: break;
        case 36: 
          { return curlyCount == 0 ? S_SUPPLEMENT : S_ID;
          }
        case 57: break;
        case 33: 
          { return curlyCount < 2 ? S_DEFAULT : S_ID;
          }
        case 58: break;
        case 20: 
          { return curlyCount == 0 ? S_META : S_ID;
          }
        case 59: break;
        case 14: 
          { return S_BRACKET_LEFT;
          }
        case 60: break;
        case 35: 
          { return curlyCount == 0 ? S_NAMESPACE : S_ID;
          }
        case 61: break;
        case 12: 
          { curlyCount++; return S_CURLY_LEFT;
          }
        case 62: break;
        case 29: 
          { return curlyCount == 0 ? S_STRING_T : S_ID;
          }
        case 63: break;
        case 24: 
          { return curlyCount == 0 ? S_WITH : S_ID;
          }
        case 64: break;
        case 3: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 65: break;
        case 32: 
          { return curlyCount == 0 ? S_EXTENDS : S_ID;
          }
        case 66: break;
        case 31: 
          { return curlyCount == 0 ? S_INTEGER_T : S_ID;
          }
        case 67: break;
        case 27: 
          { return curlyCount == 0 ? S_IMPORT : S_ID;
          }
        case 68: break;
        case 10: 
          { yybegin(DATA_VALUE); return S_EQ;
          }
        case 69: break;
        case 22: 
          { return curlyCount < 2 ? S_LIST : S_ID;
          }
        case 70: break;
        case 18: 
          { return S_BLOCK_COMMENT;
          }
        case 71: break;
        case 13: 
          { curlyCount = (curlyCount == 0 ? 0 : curlyCount - 1) ; return S_CURLY_RIGHT;
          }
        case 72: break;
        case 26: 
          { return curlyCount == 0 ? S_UNION : S_ID;
          }
        case 73: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 74: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
