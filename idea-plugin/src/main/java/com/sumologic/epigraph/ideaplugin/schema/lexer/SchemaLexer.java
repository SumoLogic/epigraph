/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.sumologic.epigraph.ideaplugin.schema.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.sumologic.epigraph.ideaplugin.schema.lexer.SchemaElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SchemaLexer.flex</tt>
 */
public class SchemaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BACKTICK = 2;
  public static final int DATA_VALUE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\2\1\2\1\1\22\0\1\2\11\0\1\4"+
    "\1\0\1\41\1\0\1\40\1\3\12\7\1\37\1\5\1\0\1\42"+
    "\3\0\32\6\1\45\1\0\1\46\2\0\1\10\1\20\1\35\1\23"+
    "\1\24\1\21\1\25\1\36\1\32\1\11\2\6\1\27\1\12\1\17"+
    "\1\14\1\13\1\6\1\15\1\22\1\16\1\26\1\33\1\31\1\30"+
    "\1\34\1\6\1\43\1\0\1\44\54\0\1\6\12\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0"+
    "\5\6\7\0\1\6\1\0\1\6\201\0\5\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\123\6\1\0\213\6\10\0\246\6\1\0\46\6\2\0"+
    "\1\6\7\0\47\6\110\0\33\6\5\0\3\6\55\0\53\6\25\0"+
    "\12\7\4\0\2\6\1\0\143\6\1\0\1\6\17\0\2\6\7\0"+
    "\2\6\12\7\3\6\2\0\1\6\20\0\1\6\1\0\36\6\35\0"+
    "\131\6\13\0\1\6\16\0\12\7\41\6\11\0\2\6\4\0\1\6"+
    "\5\0\26\6\4\0\1\6\11\0\1\6\3\0\1\6\27\0\31\6"+
    "\107\0\25\6\117\0\66\6\3\0\1\6\22\0\1\6\7\0\12\6"+
    "\4\0\12\7\1\0\20\6\4\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\1\6\3\0\4\6\3\0\1\6\20\0\1\6"+
    "\15\0\2\6\1\0\3\6\4\0\12\7\2\6\23\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\37\0\4\6\1\0\1\6\7\0\12\7\2\0\3\6\20\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\3\0\1\6\22\0\1\6\17\0\2\6\4\0\12\7\11\0"+
    "\1\6\13\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\3\0\1\6\36\0\2\6\1\0\3\6\4\0"+
    "\12\7\1\0\1\6\21\0\1\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"+
    "\3\6\3\0\14\6\26\0\1\6\25\0\12\7\25\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\20\6\3\0\1\6\32\0\3\6\5\0"+
    "\2\6\4\0\12\7\25\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\3\0\1\6\40\0\1\6\1\0\2\6\4\0"+
    "\12\7\1\0\2\6\22\0\10\6\1\0\3\6\1\0\51\6\2\0"+
    "\1\6\20\0\1\6\20\0\3\6\4\0\12\7\12\0\6\6\5\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\37\0"+
    "\12\7\21\0\60\6\1\0\2\6\14\0\7\6\11\0\12\7\47\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
    "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\0\2\6\11\0\1\6\2\0\5\6\1\0"+
    "\1\6\11\0\12\7\2\0\4\6\40\0\1\6\37\0\12\7\26\0"+
    "\10\6\1\0\44\6\33\0\5\6\163\0\53\6\24\0\1\6\12\7"+
    "\6\0\6\6\4\0\4\6\3\0\1\6\3\0\2\6\7\0\3\6"+
    "\4\0\15\6\14\0\1\6\1\0\12\7\6\0\46\6\1\0\1\6"+
    "\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6"+
    "\1\0\71\6\1\0\4\6\2\0\103\6\45\0\20\6\20\0\126\6"+
    "\2\0\6\6\3\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6"+
    "\6\0\10\6\7\0\15\6\1\0\4\6\16\0\22\6\16\0\22\6"+
    "\16\0\15\6\1\0\3\6\17\0\64\6\43\0\1\6\4\0\1\6"+
    "\3\0\12\7\46\0\12\7\6\0\130\6\10\0\51\6\1\0\1\6"+
    "\5\0\106\6\12\0\37\6\47\0\12\7\36\6\2\0\5\6\13\0"+
    "\54\6\4\0\32\6\6\0\12\7\46\0\27\6\11\0\65\6\53\0"+
    "\12\7\6\0\12\7\15\0\1\6\135\0\57\6\21\0\7\6\4\0"+
    "\12\7\51\0\36\6\15\0\2\6\12\7\54\6\32\0\44\6\34\0"+
    "\12\7\3\0\3\6\12\7\44\6\153\0\4\6\1\0\4\6\3\0"+
    "\2\6\11\0\300\6\100\0\u0116\6\2\0\6\6\2\0\46\6\2\0"+
    "\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0"+
    "\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0"+
    "\7\6\164\0\1\6\15\0\1\6\20\0\15\6\145\0\1\6\4\0"+
    "\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0"+
    "\5\6\4\0\1\6\64\0\2\6\u0a7b\0\57\6\1\0\57\6\1\0"+
    "\205\6\6\0\4\6\3\0\2\6\14\0\46\6\1\0\1\6\5\0"+
    "\1\6\2\0\70\6\7\0\1\6\20\0\27\6\11\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\120\0\1\6\u01d5\0\2\6\52\0\5\6\5\0"+
    "\2\6\4\0\126\6\6\0\3\6\1\0\132\6\1\0\4\6\5\0"+
    "\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0"+
    "\u51d6\6\52\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7"+
    "\2\6\24\0\57\6\20\0\37\6\2\0\106\6\61\0\11\6\2\0"+
    "\147\6\2\0\43\6\2\0\10\6\77\0\13\6\1\0\3\6\1\0"+
    "\4\6\1\0\27\6\35\0\64\6\16\0\62\6\34\0\12\7\30\0"+
    "\6\6\3\0\1\6\1\0\1\6\2\0\12\7\34\6\12\0\27\6"+
    "\31\0\35\6\7\0\57\6\34\0\1\6\12\7\6\0\5\6\1\0"+
    "\12\6\12\7\5\6\1\0\51\6\27\0\3\6\1\0\10\6\4\0"+
    "\12\7\6\0\27\6\3\0\1\6\3\0\62\6\1\0\1\6\3\0"+
    "\2\6\2\0\5\6\2\0\1\6\1\0\1\6\30\0\3\6\2\0"+
    "\13\6\7\0\3\6\14\0\6\6\2\0\6\6\2\0\6\6\11\0"+
    "\7\6\1\0\7\6\1\0\53\6\1\0\12\6\12\0\163\6\15\0"+
    "\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0"+
    "\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\0\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\14\6\164\0"+
    "\5\6\1\0\207\6\23\0\12\7\7\0\32\6\6\0\32\6\13\0"+
    "\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\43\0"+
    "\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0"+
    "\16\6\42\0\173\6\u0185\0\35\6\3\0\61\6\57\0\40\6\20\0"+
    "\21\6\1\0\10\6\6\0\46\6\12\0\36\6\2\0\44\6\4\0"+
    "\10\6\60\0\236\6\2\0\12\7\126\0\50\6\10\0\64\6\234\0"+
    "\u0137\6\11\0\26\6\12\0\10\6\230\0\6\6\2\0\1\6\1\0"+
    "\54\6\1\0\2\6\3\0\1\6\2\0\27\6\12\0\27\6\11\0"+
    "\37\6\101\0\23\6\1\0\2\6\12\0\26\6\12\0\32\6\106\0"+
    "\70\6\6\0\2\6\100\0\1\6\17\0\4\6\1\0\3\6\1\0"+
    "\33\6\54\0\35\6\3\0\35\6\43\0\10\6\1\0\34\6\33\0"+
    "\66\6\12\0\26\6\12\0\23\6\15\0\22\6\156\0\111\6\67\0"+
    "\63\6\15\0\63\6\u0310\0\65\6\56\0\12\7\23\0\55\6\40\0"+
    "\31\6\7\0\12\7\11\0\44\6\17\0\12\7\20\0\43\6\3\0"+
    "\1\6\14\0\60\6\16\0\4\6\13\0\12\7\1\6\1\0\1\6"+
    "\43\0\22\6\1\0\31\6\124\0\7\6\1\0\1\6\1\0\4\6"+
    "\1\0\17\6\1\0\12\6\7\0\57\6\21\0\12\7\13\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\3\0\1\6\22\0\1\6\14\0\5\6\u011e\0\60\6\24\0\2\6"+
    "\1\0\1\6\10\0\12\7\246\0\57\6\51\0\4\6\44\0\60\6"+
    "\24\0\1\6\13\0\12\7\46\0\53\6\25\0\12\7\66\0\32\6"+
    "\26\0\12\7\u0166\0\100\6\12\7\25\0\1\6\u01c0\0\71\6\u0507\0"+
    "\u039a\6\346\0\304\6\u0abc\0\u042f\6\u0fd1\0\u0247\6\u21b9\0\u0239\6\7\0"+
    "\37\6\1\0\12\7\146\0\36\6\22\0\60\6\20\0\4\6\14\0"+
    "\12\7\11\0\25\6\5\0\23\6\u0370\0\105\6\13\0\1\6\102\0"+
    "\15\6\u4060\0\2\6\u0bfe\0\153\6\5\0\15\6\3\0\11\6\7\0"+
    "\12\6\u1766\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0"+
    "\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0"+
    "\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0"+
    "\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0"+
    "\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\10\6\2\0\62\7\u1000\0\305\6\u053b\0\4\6\1\0\33\6\1\0"+
    "\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0"+
    "\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0"+
    "\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0"+
    "\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\2\0\u1682\6\u295e\0"+
    "\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\16\6\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\1\1\21\1\22\1\23\25\6"+
    "\1\23\2\6\1\24\22\6\1\23\2\6\1\25\6\6"+
    "\1\26\5\6\1\27\1\30\1\31\21\6\1\32\3\6"+
    "\1\33\4\6\1\34\1\6\1\35\3\6\1\36\5\6"+
    "\1\37\1\6\1\40\1\41\1\42\1\6\1\43\2\6"+
    "\1\44\2\6\1\45\1\46\2\6\1\47\1\50\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\165\0\165"+
    "\0\352\0\165\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4"+
    "\0\u01fb\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c"+
    "\0\165\0\165\0\165\0\165\0\165\0\165\0\165\0\165"+
    "\0\165\0\u0333\0\165\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6"+
    "\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e"+
    "\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666"+
    "\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\352\0\u0750\0\u0777"+
    "\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af"+
    "\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7"+
    "\0\165\0\u0a0e\0\u0a35\0\352\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1"+
    "\0\u0af8\0\u0b1f\0\352\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2"+
    "\0\352\0\352\0\352\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5"+
    "\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd"+
    "\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\352\0\u0ea0\0\u0ec7\0\u0eee"+
    "\0\352\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\352\0\u0fb1\0\352"+
    "\0\u0fd8\0\u0fff\0\u1026\0\352\0\u104d\0\u1074\0\u109b\0\u10c2"+
    "\0\u10e9\0\352\0\u1110\0\352\0\352\0\352\0\u1137\0\352"+
    "\0\u115e\0\u1185\0\352\0\u11ac\0\u11d3\0\352\0\352\0\u11fa"+
    "\0\u1221\0\u1248\0\352\0\352";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\11\1\20\1\21"+
    "\1\22\1\23\1\11\1\24\2\11\1\25\1\11\1\26"+
    "\1\11\1\27\1\11\1\30\1\11\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\6\4\1\11\1\4"+
    "\1\41\26\11\10\4\5\42\1\43\41\42\50\0\2\5"+
    "\47\0\1\44\1\45\50\0\2\11\1\0\26\11\16\0"+
    "\2\11\1\0\1\11\1\46\4\11\1\47\17\11\16\0"+
    "\2\11\1\0\7\11\1\50\1\51\15\11\16\0\2\11"+
    "\1\0\3\11\1\52\22\11\16\0\2\11\1\0\22\11"+
    "\1\53\3\11\16\0\2\11\1\0\10\11\1\54\15\11"+
    "\16\0\2\11\1\0\3\11\1\55\3\11\1\56\16\11"+
    "\16\0\2\11\1\0\24\11\1\57\1\11\16\0\2\11"+
    "\1\0\6\11\1\60\10\11\1\61\6\11\16\0\2\11"+
    "\1\0\5\11\1\62\7\11\1\63\10\11\16\0\2\11"+
    "\1\0\3\11\1\64\4\11\1\65\15\11\16\0\2\11"+
    "\1\0\1\66\2\11\1\67\22\11\16\0\2\11\1\0"+
    "\1\70\25\11\16\0\2\11\1\0\7\11\1\71\16\11"+
    "\16\0\2\11\1\0\3\11\1\72\22\11\10\0\5\42"+
    "\1\0\41\42\1\44\1\0\45\44\4\45\1\73\42\45"+
    "\6\0\2\11\1\0\2\11\1\74\23\11\16\0\2\11"+
    "\1\0\5\11\1\75\20\11\16\0\2\11\1\0\2\11"+
    "\1\76\23\11\16\0\2\11\1\0\5\11\1\77\20\11"+
    "\16\0\2\11\1\0\16\11\1\100\7\11\16\0\2\11"+
    "\1\0\10\11\1\101\15\11\16\0\2\11\1\0\12\11"+
    "\1\102\13\11\16\0\2\11\1\0\13\11\1\103\12\11"+
    "\16\0\2\11\1\0\1\11\1\104\24\11\16\0\2\11"+
    "\1\0\11\11\1\105\14\11\16\0\2\11\1\0\15\11"+
    "\1\106\10\11\16\0\2\11\1\0\5\11\1\107\20\11"+
    "\16\0\2\11\1\0\4\11\1\110\21\11\16\0\2\11"+
    "\1\0\2\11\1\111\23\11\16\0\2\11\1\0\15\11"+
    "\1\112\10\11\16\0\2\11\1\0\14\11\1\113\11\11"+
    "\16\0\2\11\1\0\11\11\1\114\14\11\16\0\2\11"+
    "\1\0\6\11\1\115\17\11\16\0\2\11\1\0\5\11"+
    "\1\116\20\11\16\0\2\11\1\0\4\11\1\117\21\11"+
    "\16\0\2\11\1\0\3\11\1\120\22\11\10\0\3\45"+
    "\1\121\1\73\42\45\6\0\2\11\1\0\3\11\1\122"+
    "\22\11\16\0\2\11\1\0\10\11\1\123\15\11\16\0"+
    "\2\11\1\0\7\11\1\124\16\11\16\0\2\11\1\0"+
    "\23\11\1\125\2\11\16\0\2\11\1\0\4\11\1\126"+
    "\21\11\16\0\2\11\1\0\3\11\1\127\22\11\16\0"+
    "\2\11\1\0\10\11\1\130\15\11\16\0\2\11\1\0"+
    "\10\11\1\131\15\11\16\0\2\11\1\0\5\11\1\132"+
    "\20\11\16\0\2\11\1\0\1\11\1\133\24\11\16\0"+
    "\2\11\1\0\10\11\1\134\15\11\16\0\2\11\1\0"+
    "\1\135\25\11\16\0\2\11\1\0\2\11\1\136\23\11"+
    "\16\0\2\11\1\0\24\11\1\137\1\11\16\0\2\11"+
    "\1\0\7\11\1\140\16\11\16\0\2\11\1\0\5\11"+
    "\1\141\20\11\16\0\2\11\1\0\25\11\1\142\16\0"+
    "\2\11\1\0\21\11\1\143\4\11\16\0\2\11\1\0"+
    "\5\11\1\144\20\11\16\0\2\11\1\0\16\11\1\145"+
    "\7\11\16\0\2\11\1\0\4\11\1\146\21\11\16\0"+
    "\2\11\1\0\25\11\1\147\16\0\2\11\1\0\1\11"+
    "\1\150\24\11\16\0\2\11\1\0\4\11\1\151\21\11"+
    "\16\0\2\11\1\0\4\11\1\152\21\11\16\0\2\11"+
    "\1\0\14\11\1\153\11\11\16\0\2\11\1\0\11\11"+
    "\1\154\14\11\16\0\2\11\1\0\4\11\1\155\21\11"+
    "\16\0\2\11\1\0\6\11\1\156\17\11\16\0\2\11"+
    "\1\0\6\11\1\157\17\11\16\0\2\11\1\0\16\11"+
    "\1\160\7\11\16\0\2\11\1\0\16\11\1\161\7\11"+
    "\16\0\2\11\1\0\15\11\1\162\10\11\16\0\2\11"+
    "\1\0\23\11\1\163\2\11\16\0\2\11\1\0\10\11"+
    "\1\164\15\11\16\0\2\11\1\0\5\11\1\165\20\11"+
    "\16\0\2\11\1\0\10\11\1\166\15\11\16\0\2\11"+
    "\1\0\3\11\1\167\22\11\16\0\2\11\1\0\1\170"+
    "\25\11\16\0\2\11\1\0\13\11\1\171\12\11\16\0"+
    "\2\11\1\0\7\11\1\172\16\11\16\0\2\11\1\0"+
    "\2\11\1\173\23\11\16\0\2\11\1\0\7\11\1\174"+
    "\16\11\16\0\2\11\1\0\13\11\1\175\12\11\16\0"+
    "\2\11\1\0\25\11\1\176\16\0\2\11\1\0\10\11"+
    "\1\177\15\11\16\0\2\11\1\0\10\11\1\200\15\11"+
    "\16\0\2\11\1\0\16\11\1\201\7\11\16\0\2\11"+
    "\1\0\2\11\1\202\23\11\16\0\2\11\1\0\7\11"+
    "\1\203\16\11\16\0\2\11\1\0\4\11\1\204\21\11"+
    "\16\0\2\11\1\0\4\11\1\205\21\11\16\0\2\11"+
    "\1\0\13\11\1\206\12\11\16\0\2\11\1\0\15\11"+
    "\1\207\10\11\16\0\2\11\1\0\7\11\1\210\16\11"+
    "\16\0\2\11\1\0\12\11\1\211\13\11\16\0\2\11"+
    "\1\0\11\11\1\212\14\11\16\0\2\11\1\0\1\11"+
    "\1\213\24\11\16\0\2\11\1\0\5\11\1\214\20\11"+
    "\16\0\2\11\1\0\10\11\1\215\15\11\16\0\2\11"+
    "\1\0\6\11\1\216\17\11\16\0\2\11\1\0\2\11"+
    "\1\217\23\11\16\0\2\11\1\0\10\11\1\220\15\11"+
    "\16\0\2\11\1\0\16\11\1\221\7\11\16\0\2\11"+
    "\1\0\12\11\1\222\13\11\16\0\2\11\1\0\5\11"+
    "\1\223\20\11\16\0\2\11\1\0\10\11\1\224\15\11"+
    "\16\0\2\11\1\0\21\11\1\225\4\11\16\0\2\11"+
    "\1\0\5\11\1\226\20\11\16\0\2\11\1\0\10\11"+
    "\1\227\15\11\16\0\2\11\1\0\6\11\1\230\17\11"+
    "\16\0\2\11\1\0\1\231\25\11\16\0\2\11\1\0"+
    "\5\11\1\232\20\11\16\0\2\11\1\0\12\11\1\233"+
    "\13\11\16\0\2\11\1\0\11\11\1\234\14\11\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4719];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\2\1\2\11\1\1\1\11\16\1"+
    "\11\11\1\1\1\11\55\1\1\11\113\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int curlyCount = 0;

  public SchemaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SchemaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2512) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return S_DATA_VALUE;
            }
          case 42: break;
          case 2: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 43: break;
          case 3: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 44: break;
          case 4: 
            { return S_STAR;
            }
          case 45: break;
          case 5: 
            { return S_SEMI_COLON;
            }
          case 46: break;
          case 6: 
            { return S_ID;
            }
          case 47: break;
          case 7: 
            { yybegin(BACKTICK); return S_BACKTICK;
            }
          case 48: break;
          case 8: 
            { return S_COLON;
            }
          case 49: break;
          case 9: 
            { return S_DOT;
            }
          case 50: break;
          case 10: 
            { return S_COMMA;
            }
          case 51: break;
          case 11: 
            { yybegin(DATA_VALUE); return S_EQ;
            }
          case 52: break;
          case 12: 
            { curlyCount++; return S_CURLY_LEFT;
            }
          case 53: break;
          case 13: 
            { curlyCount = (curlyCount == 0 ? 0 : curlyCount - 1) ; return S_CURLY_RIGHT;
            }
          case 54: break;
          case 14: 
            { return S_BRACKET_LEFT;
            }
          case 55: break;
          case 15: 
            { return S_BRACKET_RIGHT;
            }
          case 56: break;
          case 16: 
            { yybegin(YYINITIAL); return S_BACKTICK;
            }
          case 57: break;
          case 17: 
            { yybegin(YYINITIAL); return S_SEMI_COLON;
            }
          case 58: break;
          case 18: 
            { return S_COMMENT;
            }
          case 59: break;
          case 19: 
            { return S_BLOCK_COMMENT;
            }
          case 60: break;
          case 20: 
            { return curlyCount < 2 ? S_MAP : S_ID;
            }
          case 61: break;
          case 21: 
            { return curlyCount == 0 ? S_META : S_ID;
            }
          case 62: break;
          case 22: 
            { return curlyCount == 0 ? S_ENUM : S_ID;
            }
          case 63: break;
          case 23: 
            { return curlyCount < 2 ? S_LIST : S_ID;
            }
          case 64: break;
          case 24: 
            { return curlyCount == 0 ? S_LONG_T : S_ID;
            }
          case 65: break;
          case 25: 
            { return curlyCount == 0 ? S_WITH : S_ID;
            }
          case 66: break;
          case 26: 
            { return curlyCount == 0 ? S_IMPORT : S_ID;
            }
          case 67: break;
          case 27: 
            { return curlyCount == 0 ? S_RECORD : S_ID;
            }
          case 68: break;
          case 28: 
            { return curlyCount == 0 ? S_STRING_T : S_ID;
            }
          case 69: break;
          case 29: 
            { return curlyCount == 0 ? S_DOUBLE_T : S_ID;
            }
          case 70: break;
          case 30: 
            { return curlyCount == 0 ? S_INTEGER_T : S_ID;
            }
          case 71: break;
          case 31: 
            { return curlyCount == 0 ? S_EXTENDS : S_ID;
            }
          case 72: break;
          case 32: 
            { return curlyCount < 2 ? S_DEFAULT : S_ID;
            }
          case 73: break;
          case 33: 
            { return curlyCount == 0 ? S_VARTYPE : S_ID;
            }
          case 74: break;
          case 34: 
            { return curlyCount == 0 ? S_BOOLEAN_T : S_ID;
            }
          case 75: break;
          case 35: 
            { return curlyCount == 1 ? S_OVERRIDE : S_ID;
            }
          case 76: break;
          case 36: 
            { return curlyCount < 2 ? S_ABSTRACT : S_ID;
            }
          case 77: break;
          case 37: 
            { return curlyCount < 2 ? S_NODEFAULT : S_ID;
            }
          case 78: break;
          case 38: 
            { return curlyCount == 0 ? S_NAMESPACE : S_ID;
            }
          case 79: break;
          case 39: 
            { return curlyCount == 0 ? S_SUPPLEMENT : S_ID;
            }
          case 80: break;
          case 40: 
            { return curlyCount == 0 ? S_POLYMORPHIC : S_ID;
            }
          case 81: break;
          case 41: 
            { return curlyCount == 0 ? S_SUPPLEMENTS : S_ID;
            }
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
