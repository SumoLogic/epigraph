pluginRepositories {
  // pick up gradle plugin from local maven repo
  maven {
    url "file://" + System.getProperty("user.home") + "/.m2/repository"
  }
  gradlePluginPortal()
}

rootProject.name = theName

// map from module (sub-project) path to full module name (maven artifact id)
Map<String, String> modules = [
    'examples/users/schema'            : 'examples-users-schema',
    'examples/users/schema-java'       : 'examples-users-schema-java',
//  'examples/users/schema-scala'      : 'examples-users-schema-scala',
//  'examples/users/service'           : 'examples-users-service',
    'gradle-plugin'                    : 'epigraph-gradle-plugin',
    'gradle-plugin-common'             : 'epigraph-gradle-plugin-common',
    'idea-plugin'                      : 'idea-plugin',

    'java/codegen'                     : 'epigraph-java-codegen',
    'java/core'                        : 'epigraph-java-core',
    'java/edl'                         : 'epigraph-java-edl',
    'java/edl-parser'               : 'epigraph-java-edl-parser',
    'java/edl-psi-parser'              : 'epigraph-java-edl-psi-parser',
    'java/edl-psi-parser-common'       : 'epigraph-java-edl-psi-parser-common',
    'java/gdata'                       : 'epigraph-java-gdata',
    'java/gdata-edl-psi-parser'        : 'epigraph-java-gdata-edl-psi-parser',
    'java/gradle-plugin'               : 'epigraph-java-gradle-plugin',
    'java/http-server-common'          : 'epigraph-java-http-server-common',
    'java/http-server-undertow'        : 'epigraph-java-http-server-undertow',
    'java/lang-common'                 : 'epigraph-java-lang-common',
    'java/maven-plugin'                : 'epigraph-java-maven-plugin',
    'java/projections'                 : 'epigraph-java-projections',
    'java/projections-edl-psi-parser'  : 'epigraph-java-projections-edl-psi-parser',
    'java/projections-psi-parser-util' : 'epigraph-java-projections-psi-parser-util',
    'java/projections-url-psi-parser'  : 'epigraph-java-projections-url-psi-parser',
    'java/service'                     : 'epigraph-java-service',
    'java/standalone-psi-util'         : 'epigraph-java-standalone-psi-util',
    'java/test-util'                   : 'epigraph-java-test-util',
    'java/request-url'                 : 'epigraph-java-request-url',
    'java/request-url-parser'          : 'epigraph-java-request-url-parser',
    'java/request-url-psi-parser'      : 'epigraph-java-request-url-psi-parser',
    'java/util'                        : 'epigraph-java-util',
    'java/wire/common'                 : 'epigraph-java-wire-common',
    'java/wire/json'                   : 'epigraph-java-wire-json',

    'light-psi'                        : 'epigraph-light-psi',
    'maven-plugin'                     : 'epigraph-maven-plugin',
    'maven-plugin-common'              : 'epigraph-maven-plugin-common',
    'scala/codegen'                    : 'epigraph-scala-codegen',
    'scala/core'                       : 'epigraph-scala-core',
    'scala/maven-plugin'               : 'epigraph-scala-maven-plugin',
    'schema-compiler'                  : 'epigraph-schema-compiler',

    'schemas/builtin-types-schema'     : 'epigraph-builtin-types-schema',
    'schemas/data-schema'              : 'epigraph-data-schema',
    'schemas/operations-schema'        : 'epigraph-operations-schema',
    'schemas/projections-schema'       : 'epigraph-projections-schema',
    'schemas/schema-schema'            : 'epigraph-schema-schema',

    'tests/schema'                     : 'tests-schema',
    'tests/schema-java'                : 'tests-schema-java'
]

modules.each { dir, name ->
  include name
  project(":$name").projectDir = file(dir)
}
