/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package io.epigraph.lang.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static io.epigraph.lang.lexer.EpigraphElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>EpigraphLexer.flex</tt>
 */
public class EpigraphLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13696 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\4\1\12"+
    "\1\24\1\4\1\12\1\25\4\1\1\12\1\26\1\27\2\1\2\12\1\26\1\1\1\30\1\4\5\12\1\31"+
    "\1\32\1\33\1\1\1\34\1\12\1\1\1\35\5\12\1\36\1\37\1\40\1\12\1\26\1\41\1\12"+
    "\1\42\1\43\1\1\1\12\1\44\4\1\1\12\1\45\4\1\1\46\2\12\1\47\1\1\1\50\1\51\1"+
    "\4\1\52\1\53\1\54\1\55\1\56\1\57\1\51\1\15\1\60\1\53\1\54\1\61\1\1\1\62\1"+
    "\63\1\64\1\65\1\21\1\54\1\66\1\1\1\67\1\51\1\70\1\71\1\53\1\54\1\66\1\1\1"+
    "\57\1\51\1\37\1\72\1\73\1\74\1\75\1\1\1\67\1\63\1\1\1\76\1\34\1\54\1\47\1"+
    "\1\1\77\1\51\1\1\1\76\1\34\1\54\1\100\1\1\1\56\1\51\1\101\1\76\1\34\1\12\1"+
    "\102\1\56\1\103\1\51\1\104\1\105\1\106\1\12\1\107\1\110\1\1\1\63\1\1\1\4\2"+
    "\12\1\111\1\110\1\112\2\1\1\113\1\114\1\115\1\116\1\117\1\120\2\1\1\67\1\1"+
    "\1\112\1\1\1\121\1\12\1\122\1\1\1\123\7\1\2\12\1\26\1\103\1\112\1\124\1\125"+
    "\1\126\1\127\1\112\2\12\1\130\2\12\1\131\24\12\1\132\1\133\2\12\1\132\2\12"+
    "\1\134\1\135\1\13\3\12\1\135\3\12\1\26\2\1\1\12\1\1\5\12\1\136\1\4\45\12\1"+
    "\137\1\12\1\4\1\26\4\12\1\26\1\140\1\141\1\15\1\12\1\15\1\12\1\15\1\141\1"+
    "\67\3\12\1\142\1\1\1\143\1\112\2\1\1\112\5\12\1\25\2\12\1\144\4\12\1\36\1"+
    "\12\1\145\2\1\1\63\1\12\1\146\1\45\2\12\1\147\1\12\1\75\1\112\2\1\1\12\1\110"+
    "\3\12\1\45\2\1\2\112\1\150\5\1\1\105\2\12\1\142\1\151\1\112\2\1\1\152\1\12"+
    "\1\153\1\40\2\12\1\36\1\1\2\12\1\142\1\1\1\154\1\40\1\12\1\146\6\1\1\155\1"+
    "\156\14\12\4\1\21\12\1\136\2\12\1\136\1\157\1\12\1\146\3\12\1\160\1\161\1"+
    "\162\1\122\1\161\7\1\1\163\1\1\1\122\6\1\1\164\1\165\1\166\1\167\1\170\3\1"+
    "\1\171\147\1\2\12\1\145\2\12\1\145\10\12\1\172\1\173\2\12\1\130\3\12\1\174"+
    "\1\1\1\12\1\110\4\175\4\1\1\103\35\1\1\176\2\1\1\177\1\4\4\12\1\200\1\4\4"+
    "\12\1\131\1\105\1\12\1\146\1\4\4\12\1\145\1\1\1\12\1\26\3\1\1\12\40\1\133"+
    "\12\1\36\4\1\135\12\1\36\2\1\10\12\1\122\4\1\2\12\1\146\20\12\1\122\1\12\1"+
    "\201\1\1\2\12\1\145\1\103\1\12\1\146\4\12\1\36\2\1\1\202\1\203\5\12\1\204"+
    "\1\12\1\146\1\25\3\1\1\202\1\205\1\12\1\27\1\1\3\12\1\142\1\203\2\12\1\142"+
    "\1\1\1\112\1\1\1\206\1\40\1\12\1\36\1\12\1\110\1\1\1\12\1\122\1\46\2\12\1"+
    "\27\1\103\1\112\1\207\1\210\2\12\1\44\1\1\1\211\1\112\1\12\1\212\3\12\1\213"+
    "\1\214\1\215\1\26\1\64\1\216\1\217\1\175\2\12\1\131\1\36\7\12\1\27\1\112\72"+
    "\12\1\142\1\12\1\220\2\12\1\147\20\1\26\12\1\146\6\12\1\75\2\1\1\110\1\221"+
    "\1\54\1\222\1\223\6\12\1\15\1\1\1\152\25\12\1\146\1\1\4\12\1\203\2\12\1\25"+
    "\2\1\1\147\7\1\1\207\7\12\1\122\1\1\1\112\1\4\1\26\1\4\1\26\1\224\4\12\1\145"+
    "\1\225\1\226\2\1\1\227\1\12\1\13\1\230\2\146\2\1\7\12\1\26\30\1\1\12\1\122"+
    "\3\12\1\67\2\1\2\12\1\1\1\12\1\231\2\12\1\36\1\12\1\146\2\12\1\232\3\1\11"+
    "\12\1\146\1\112\5\1\2\12\1\25\3\12\1\142\11\1\23\12\1\110\1\12\1\36\1\25\11"+
    "\1\1\233\2\12\1\234\1\12\1\36\1\12\1\110\1\12\1\145\4\1\1\12\1\235\1\12\1"+
    "\36\1\12\1\75\4\1\3\12\1\236\4\1\1\67\1\237\1\12\1\142\2\1\1\12\1\122\1\12"+
    "\1\122\2\1\1\121\1\12\1\45\1\1\3\12\1\36\1\12\1\36\1\12\1\27\1\12\1\15\6\1"+
    "\4\12\1\44\3\1\3\12\1\27\3\12\1\27\60\1\1\152\2\12\1\25\2\1\1\63\1\1\1\152"+
    "\2\12\2\1\1\12\1\44\1\112\1\152\1\12\1\110\1\63\1\1\2\12\1\240\1\152\2\12"+
    "\1\27\1\241\1\242\2\1\1\12\1\21\1\147\5\1\1\243\1\244\1\44\2\12\1\145\1\1"+
    "\1\112\1\71\1\53\1\54\1\66\1\1\1\245\1\15\21\1\3\12\1\1\1\246\1\112\12\1\2"+
    "\12\1\145\2\1\1\247\2\1\3\12\1\1\1\250\1\112\2\1\2\12\1\26\1\1\1\112\3\1\1"+
    "\12\1\75\1\1\1\112\26\1\4\12\1\112\1\103\34\1\3\12\1\44\20\1\71\12\1\75\16"+
    "\1\14\12\1\142\53\1\2\12\1\145\75\1\44\12\1\110\33\1\43\12\1\44\1\12\1\145"+
    "\1\112\6\1\1\12\1\146\1\1\3\12\1\1\1\142\1\112\1\152\1\251\1\12\67\1\4\12"+
    "\1\45\1\67\3\1\1\152\6\1\1\15\77\1\6\12\1\26\1\122\1\44\1\75\66\1\5\12\1\207"+
    "\3\12\1\141\1\252\1\253\1\254\3\12\1\255\1\256\1\12\1\257\1\260\1\34\24\12"+
    "\1\261\1\12\1\34\1\131\1\12\1\131\1\12\1\207\1\12\1\207\1\145\1\12\1\145\1"+
    "\12\1\54\1\12\1\54\1\12\1\262\3\263\14\12\1\45\123\1\1\254\1\12\1\264\1\265"+
    "\1\266\1\267\1\270\1\271\1\272\1\147\1\273\1\147\24\1\55\12\1\110\2\1\103"+
    "\12\1\45\15\12\1\146\150\12\1\15\25\1\41\12\1\146\36\1");

  /* The ZZ_CMAP_A table has 3008 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\2\2\1\1\22\0\1\2\1\0\1\5\5\0\1\52\1\53\1\4\1\0\1\44\1\0\1\13"+
    "\1\3\12\11\1\43\1\0\1\54\1\45\1\55\2\0\32\14\1\50\1\6\1\51\2\0\1\15\1\25\1"+
    "\7\1\30\1\31\1\26\1\32\1\41\1\36\1\16\2\14\1\33\1\17\1\24\1\21\1\20\1\42\1"+
    "\22\1\27\1\23\1\10\1\37\1\35\1\34\1\40\1\14\1\46\1\0\1\47\14\0\1\14\12\0\1"+
    "\14\4\0\1\14\5\0\27\14\1\0\12\14\4\0\14\14\16\0\5\14\7\0\1\14\1\0\1\14\1\0"+
    "\5\14\1\0\2\14\2\0\4\14\1\0\1\14\6\0\1\14\1\0\3\14\1\0\1\14\1\0\4\14\1\0\23"+
    "\14\1\0\13\14\10\0\15\14\2\0\1\14\6\0\10\14\10\0\13\14\5\0\3\14\15\0\12\12"+
    "\4\0\6\14\1\0\1\14\17\0\2\14\7\0\2\14\12\12\3\14\2\0\2\14\1\0\16\14\15\0\11"+
    "\14\13\0\1\14\16\0\12\12\6\14\4\0\2\14\4\0\1\14\5\0\6\14\4\0\1\14\11\0\1\14"+
    "\3\0\1\14\7\0\11\14\7\0\5\14\17\0\26\14\3\0\1\14\2\0\1\14\7\0\12\14\4\0\12"+
    "\12\1\14\4\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14\3\0\1\14"+
    "\20\0\1\14\15\0\2\14\1\0\1\14\5\0\6\14\4\0\2\14\1\0\2\14\1\0\2\14\1\0\2\14"+
    "\17\0\4\14\1\0\1\14\7\0\12\12\2\0\3\14\20\0\11\14\1\0\2\14\1\0\2\14\1\0\5"+
    "\14\3\0\1\14\2\0\1\14\30\0\1\14\13\0\10\14\2\0\1\14\3\0\1\14\1\0\6\14\3\0"+
    "\3\14\1\0\4\14\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14\3\0\3\14\3\0\14\14\13\0"+
    "\10\14\1\0\2\14\10\0\3\14\5\0\4\14\1\0\5\14\3\0\1\14\3\0\2\14\15\0\13\14\2"+
    "\0\1\14\21\0\1\14\12\0\6\14\5\0\22\14\3\0\10\14\1\0\11\14\1\0\1\14\2\0\7\14"+
    "\11\0\1\14\1\0\2\14\14\0\12\12\7\0\2\14\1\0\1\14\2\0\2\14\1\0\1\14\2\0\1\14"+
    "\6\0\4\14\1\0\7\14\1\0\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\0\2\14\11"+
    "\0\1\14\2\0\5\14\1\0\1\14\11\0\12\12\2\0\14\14\1\0\24\14\13\0\5\14\3\0\6\14"+
    "\4\0\4\14\3\0\1\14\3\0\2\14\7\0\3\14\4\0\15\14\14\0\1\14\1\0\6\14\1\0\1\14"+
    "\5\0\1\14\2\0\13\14\1\0\15\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\1\14"+
    "\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\16\14\2\0\6\14\2\0\15\14\2\0\1\14"+
    "\1\0\10\14\7\0\15\14\1\0\6\14\23\0\1\14\4\0\1\14\3\0\11\14\1\0\1\14\5\0\17"+
    "\14\1\0\16\14\2\0\14\14\13\0\1\14\15\0\7\14\7\0\16\14\15\0\2\14\12\12\3\0"+
    "\3\14\11\0\4\14\1\0\4\14\3\0\2\14\11\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1"+
    "\0\6\14\1\0\7\14\1\0\1\14\3\0\3\14\1\0\7\14\3\0\4\14\2\0\6\14\5\0\1\14\15"+
    "\0\1\14\2\0\1\14\4\0\1\14\2\0\12\14\1\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14\1"+
    "\0\1\14\1\0\4\14\1\0\13\14\2\0\4\14\5\0\5\14\4\0\1\14\4\0\2\14\13\0\5\14\6"+
    "\0\4\14\3\0\2\14\14\0\10\14\7\0\10\14\1\0\7\14\6\0\2\14\12\0\5\14\5\0\2\14"+
    "\3\0\7\14\6\0\3\14\12\12\2\14\13\0\11\14\2\0\27\14\2\0\7\14\1\0\3\14\1\0\4"+
    "\14\1\0\4\14\2\0\6\14\3\0\1\14\1\0\1\14\2\0\5\14\1\0\12\14\12\12\5\14\1\0"+
    "\3\14\1\0\10\14\4\0\7\14\3\0\1\14\3\0\2\14\1\0\1\14\3\0\2\14\2\0\5\14\2\0"+
    "\1\14\1\0\1\14\30\0\3\14\3\0\6\14\2\0\6\14\2\0\6\14\11\0\7\14\4\0\5\14\3\0"+
    "\5\14\5\0\1\14\1\0\10\14\1\0\5\14\1\0\1\14\1\0\2\14\1\0\2\14\1\0\12\14\6\0"+
    "\12\14\2\0\6\14\2\0\6\14\2\0\6\14\2\0\3\14\3\0\14\14\1\0\16\14\1\0\2\14\1"+
    "\0\2\14\1\0\10\14\6\0\4\14\4\0\16\14\2\0\1\14\1\0\14\14\1\0\2\14\3\0\1\14"+
    "\2\0\4\14\1\0\2\14\12\0\10\14\6\0\6\14\1\0\3\14\1\0\12\14\3\0\1\14\12\0\4"+
    "\14\13\0\12\12\1\14\1\0\1\14\3\0\7\14\1\0\1\14\1\0\4\14\1\0\17\14\1\0\2\14"+
    "\14\0\3\14\4\0\2\14\1\0\1\14\20\0\4\14\10\0\1\14\13\0\10\14\5\0\3\14\2\0\1"+
    "\14\2\0\2\14\2\0\4\14\1\0\14\14\1\0\1\14\1\0\7\14\1\0\21\14\1\0\4\14\2\0\10"+
    "\14\1\0\7\14\1\0\14\14\1\0\4\14\1\0\5\14\1\0\1\14\3\0\14\14\2\0\13\14\1\0"+
    "\10\14\2\0\22\12\1\0\2\14\1\0\1\14\2\0\1\14\1\0\12\14\1\0\4\14\1\0\1\14\1"+
    "\0\1\14\6\0\1\14\4\0\1\14\1\0\1\14\1\0\1\14\1\0\3\14\1\0\2\14\1\0\1\14\2\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\2\14\1\0\1\14\2\0\4\14\1\0\7"+
    "\14\1\0\4\14\1\0\4\14\1\0\1\14\1\0\12\14\1\0\5\14\1\0\3\14\1\0\5\14\1\0\5"+
    "\14");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\2\4\1\5\1\6"+
    "\1\1\17\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\0"+
    "\1\24\1\0\1\4\2\0\32\4\1\23\1\0\1\4"+
    "\1\5\2\4\1\25\27\4\1\23\1\0\3\4\1\26"+
    "\5\4\1\27\1\30\3\4\1\31\6\4\1\32\1\33"+
    "\1\34\1\4\1\0\22\4\1\0\1\4\1\35\4\4"+
    "\1\36\6\4\1\37\1\40\3\4\1\41\1\42\7\4"+
    "\1\43\1\4\1\44\1\4\1\45\2\4\1\46\1\47"+
    "\2\4\1\50\4\4\1\51\1\52\1\4\1\53\1\4"+
    "\1\54\1\55\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\56\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284"+
    "\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\56\0\56\0\56\0\56\0\56\0\56\0\56"+
    "\0\56\0\56\0\56\0\56\0\u0450\0\u047e\0\270\0\56"+
    "\0\u04ac\0\u04da\0\u0508\0\u0170\0\56\0\u0536\0\u0564\0\u0592"+
    "\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872"+
    "\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2"+
    "\0\u0a10\0\u0508\0\u0a3e\0\u0a6c\0\u0114\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\56\0\u0ebc\0\u0eea\0\u0f18"+
    "\0\u0f46\0\u0114\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u0114"+
    "\0\u0114\0\u105a\0\u1088\0\u10b6\0\u0114\0\u10e4\0\u1112\0\u1140"+
    "\0\u116e\0\u119c\0\u11ca\0\u0114\0\u0114\0\u0114\0\u11f8\0\u1226"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396"+
    "\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u0114\0\u15ec\0\u161a\0\u1648"+
    "\0\u1676\0\u0114\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a"+
    "\0\u0114\0\u0114\0\u17b8\0\u17e6\0\u1814\0\u0114\0\u0114\0\u1842"+
    "\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u0114\0\u1984"+
    "\0\u0114\0\u19b2\0\u0114\0\u19e0\0\u1a0e\0\u0114\0\u0114\0\u1a3c"+
    "\0\u1a6a\0\u0114\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u0114\0\u0114"+
    "\0\u1b50\0\u0114\0\u1b7e\0\u0114\0\u1bac\0\u0114\0\u0114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\2\10\1\11\1\7\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\7\1\25"+
    "\1\26\1\27\1\7\1\30\1\7\1\31\3\7\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\57\0\2\3\56\0\1\45\1\46\51\0"+
    "\5\47\1\50\1\51\47\47\7\0\4\7\1\0\1\7"+
    "\1\0\3\7\1\52\21\7\22\0\4\7\1\0\1\7"+
    "\1\0\25\7\24\0\2\10\1\53\42\0\15\54\1\55"+
    "\40\54\7\0\4\7\1\0\1\7\1\0\1\7\1\56"+
    "\4\7\1\57\16\7\22\0\4\7\1\0\1\7\1\0"+
    "\7\7\1\60\1\61\14\7\22\0\4\7\1\0\1\7"+
    "\1\0\3\7\1\62\3\7\1\63\15\7\22\0\4\7"+
    "\1\0\1\7\1\0\21\7\1\64\3\7\22\0\4\7"+
    "\1\0\1\7\1\0\10\7\1\65\14\7\22\0\4\7"+
    "\1\0\1\7\1\0\4\7\1\66\20\7\22\0\1\7"+
    "\1\67\2\7\1\0\1\7\1\0\3\7\1\70\3\7"+
    "\1\71\15\7\22\0\1\72\3\7\1\0\1\7\1\0"+
    "\25\7\22\0\4\7\1\0\1\7\1\0\6\7\1\73"+
    "\7\7\1\74\6\7\22\0\1\7\1\75\2\7\1\0"+
    "\1\7\1\0\5\7\1\76\17\7\22\0\4\7\1\0"+
    "\1\7\1\0\3\7\1\77\4\7\1\100\14\7\22\0"+
    "\4\7\1\0\1\7\1\0\3\7\1\101\3\7\1\102"+
    "\15\7\22\0\4\7\1\0\1\7\1\0\1\103\2\7"+
    "\1\104\21\7\22\0\4\7\1\0\1\7\1\0\1\105"+
    "\24\7\22\0\4\7\1\0\1\7\1\0\7\7\1\106"+
    "\15\7\13\0\1\45\1\0\54\45\4\46\1\107\51\46"+
    "\3\0\1\47\1\0\3\47\1\110\11\0\3\47\5\0"+
    "\1\47\32\0\4\7\1\0\1\7\1\0\3\7\1\111"+
    "\21\7\24\0\2\112\52\0\4\7\1\0\1\7\1\0"+
    "\2\7\1\113\22\7\22\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\114\17\7\22\0\4\7\1\0\1\7\1\0"+
    "\2\7\1\115\22\7\22\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\116\17\7\22\0\4\7\1\0\1\7\1\0"+
    "\15\7\1\117\7\7\22\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\120\20\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\121\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\12\7\1\122\11\7\1\123\22\0\1\7\1\124\2\7"+
    "\1\0\1\7\1\0\25\7\22\0\4\7\1\0\1\7"+
    "\1\0\15\7\1\125\7\7\22\0\4\7\1\0\1\7"+
    "\1\0\13\7\1\126\11\7\22\0\4\7\1\0\1\7"+
    "\1\0\1\7\1\127\23\7\22\0\4\7\1\0\1\7"+
    "\1\0\11\7\1\130\13\7\22\0\1\7\1\131\2\7"+
    "\1\0\1\7\1\0\25\7\22\0\4\7\1\0\1\7"+
    "\1\0\5\7\1\132\17\7\22\0\4\7\1\0\1\7"+
    "\1\0\2\7\1\133\22\7\22\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\134\20\7\22\0\1\7\1\135\2\7"+
    "\1\0\1\7\1\0\25\7\22\0\4\7\1\0\1\7"+
    "\1\0\14\7\1\136\10\7\22\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\137\20\7\22\0\4\7\1\0\1\7"+
    "\1\0\15\7\1\140\7\7\22\0\4\7\1\0\1\7"+
    "\1\0\11\7\1\141\13\7\22\0\4\7\1\0\1\7"+
    "\1\0\6\7\1\142\16\7\22\0\4\7\1\0\1\7"+
    "\1\0\5\7\1\143\17\7\22\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\144\20\7\13\0\3\46\1\145\1\107"+
    "\51\46\11\0\1\146\53\0\4\7\1\0\1\7\1\0"+
    "\15\7\1\147\7\7\22\0\4\7\1\0\1\7\1\0"+
    "\3\7\1\150\21\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\151\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\7\7\1\152\15\7\22\0\4\7\1\0\1\7\1\0"+
    "\22\7\1\153\2\7\22\0\4\7\1\0\1\7\1\0"+
    "\7\7\1\154\15\7\22\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\155\20\7\22\0\4\7\1\0\1\7\1\0"+
    "\3\7\1\156\21\7\22\0\1\7\1\157\2\7\1\0"+
    "\1\7\1\0\25\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\160\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\15\7\1\161\7\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\162\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\163\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\164\17\7\22\0\4\7\1\0\1\7\1\0"+
    "\1\7\1\165\23\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\166\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\2\7\1\167\22\7\22\0\4\7\1\0\1\7\1\0"+
    "\1\170\24\7\22\0\1\171\3\7\1\0\1\7\1\0"+
    "\25\7\22\0\4\7\1\0\1\7\1\0\7\7\1\172"+
    "\15\7\22\0\1\173\3\7\1\0\1\7\1\0\25\7"+
    "\22\0\4\7\1\0\1\7\1\0\11\7\1\124\13\7"+
    "\22\0\4\7\1\0\1\7\1\0\5\7\1\174\17\7"+
    "\22\0\4\7\1\0\1\7\1\0\23\7\1\175\1\7"+
    "\22\0\4\7\1\0\1\7\1\0\20\7\1\176\4\7"+
    "\22\0\4\7\1\0\1\7\1\0\5\7\1\177\17\7"+
    "\24\0\1\200\53\0\4\7\1\0\1\7\1\0\10\7"+
    "\1\201\14\7\22\0\4\7\1\0\1\7\1\0\4\7"+
    "\1\202\20\7\22\0\4\7\1\0\1\7\1\0\23\7"+
    "\1\203\1\7\22\0\4\7\1\0\1\7\1\0\1\7"+
    "\1\204\23\7\22\0\4\7\1\0\1\7\1\0\1\7"+
    "\1\205\23\7\22\0\4\7\1\0\1\7\1\0\4\7"+
    "\1\206\20\7\22\0\4\7\1\0\1\7\1\0\4\7"+
    "\1\207\20\7\22\0\4\7\1\0\1\7\1\0\1\210"+
    "\24\7\22\0\4\7\1\0\1\7\1\0\14\7\1\211"+
    "\10\7\22\0\4\7\1\0\1\7\1\0\11\7\1\212"+
    "\13\7\22\0\4\7\1\0\1\7\1\0\4\7\1\213"+
    "\20\7\22\0\4\7\1\0\1\7\1\0\6\7\1\214"+
    "\16\7\22\0\4\7\1\0\1\7\1\0\15\7\1\215"+
    "\7\7\22\0\4\7\1\0\1\7\1\0\6\7\1\216"+
    "\16\7\22\0\4\7\1\0\1\7\1\0\15\7\1\217"+
    "\7\7\22\0\1\7\1\220\2\7\1\0\1\7\1\0"+
    "\25\7\22\0\4\7\1\0\1\7\1\0\1\221\24\7"+
    "\22\0\4\7\1\0\1\7\1\0\22\7\1\222\2\7"+
    "\24\0\1\223\53\0\4\7\1\0\1\7\1\0\7\7"+
    "\1\224\15\7\22\0\4\7\1\0\1\7\1\0\5\7"+
    "\1\225\17\7\22\0\4\7\1\0\1\7\1\0\10\7"+
    "\1\226\14\7\22\0\4\7\1\0\1\7\1\0\3\7"+
    "\1\227\21\7\22\0\4\7\1\0\1\7\1\0\10\7"+
    "\1\230\14\7\22\0\4\7\1\0\1\7\1\0\1\231"+
    "\24\7\22\0\4\7\1\0\1\7\1\0\13\7\1\232"+
    "\11\7\22\0\4\7\1\0\1\7\1\0\4\7\1\233"+
    "\20\7\22\0\4\7\1\0\1\7\1\0\7\7\1\234"+
    "\15\7\22\0\4\7\1\0\1\7\1\0\2\7\1\235"+
    "\22\7\22\0\4\7\1\0\1\7\1\0\7\7\1\236"+
    "\15\7\22\0\4\7\1\0\1\7\1\0\13\7\1\237"+
    "\11\7\22\0\4\7\1\0\1\7\1\0\10\7\1\240"+
    "\14\7\22\0\4\7\1\0\1\7\1\0\23\7\1\241"+
    "\1\7\22\0\4\7\1\0\1\7\1\0\10\7\1\242"+
    "\14\7\22\0\4\7\1\0\1\7\1\0\15\7\1\243"+
    "\7\7\22\0\4\7\1\0\1\7\1\0\13\7\1\244"+
    "\11\7\22\0\4\7\1\0\1\7\1\0\2\7\1\245"+
    "\22\7\24\0\1\47\53\0\4\7\1\0\1\7\1\0"+
    "\6\7\1\246\16\7\22\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\247\20\7\22\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\250\20\7\22\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\251\17\7\22\0\4\7\1\0\1\7\1\0"+
    "\13\7\1\252\11\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\253\14\7\22\0\1\7\1\254\2\7\1\0"+
    "\1\7\1\0\25\7\22\0\4\7\1\0\1\7\1\0"+
    "\7\7\1\255\15\7\22\0\4\7\1\0\1\7\1\0"+
    "\12\7\1\256\12\7\22\0\4\7\1\0\1\7\1\0"+
    "\11\7\1\257\13\7\22\0\4\7\1\0\1\7\1\0"+
    "\1\7\1\260\23\7\22\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\261\17\7\22\0\4\7\1\0\1\7\1\0"+
    "\13\7\1\262\11\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\263\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\2\7\1\264\22\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\265\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\266\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\13\7\1\267\11\7\22\0\4\7\1\0\1\7\1\0"+
    "\15\7\1\270\7\7\22\0\4\7\1\0\1\7\1\0"+
    "\12\7\1\271\12\7\22\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\272\17\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\273\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\274\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\20\7\1\275\4\7\22\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\276\20\7\22\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\277\17\7\22\0\4\7\1\0\1\7\1\0"+
    "\10\7\1\300\14\7\22\0\4\7\1\0\1\7\1\0"+
    "\6\7\1\301\16\7\22\0\4\7\1\0\1\7\1\0"+
    "\6\7\1\302\16\7\22\0\4\7\1\0\1\7\1\0"+
    "\1\303\24\7\22\0\4\7\1\0\1\7\1\0\11\7"+
    "\1\304\13\7\22\0\4\7\1\0\1\7\1\0\5\7"+
    "\1\305\17\7\22\0\4\7\1\0\1\7\1\0\12\7"+
    "\1\306\12\7\22\0\4\7\1\0\1\7\1\0\11\7"+
    "\1\307\13\7\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7130];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\20\1\13\11\2\1\1\0"+
    "\1\11\1\0\1\1\2\0\1\11\32\1\1\0\34\1"+
    "\1\11\1\0\31\1\1\0\22\1\1\0\64\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public EpigraphLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EpigraphLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 48: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 49: break;
          case 3: 
            { return E_SLASH;
            }
          case 50: break;
          case 4: 
            { return E_ID;
            }
          case 51: break;
          case 5: 
            { return E_NUMBER;
            }
          case 52: break;
          case 6: 
            { return E_DOT;
            }
          case 53: break;
          case 7: 
            { return E_COLON;
            }
          case 54: break;
          case 8: 
            { return E_COMMA;
            }
          case 55: break;
          case 9: 
            { return E_EQ;
            }
          case 56: break;
          case 10: 
            { return E_CURLY_LEFT;
            }
          case 57: break;
          case 11: 
            { return E_CURLY_RIGHT;
            }
          case 58: break;
          case 12: 
            { return E_BRACKET_LEFT;
            }
          case 59: break;
          case 13: 
            { return E_BRACKET_RIGHT;
            }
          case 60: break;
          case 14: 
            { return E_PAREN_LEFT;
            }
          case 61: break;
          case 15: 
            { return E_PAREN_RIGHT;
            }
          case 62: break;
          case 16: 
            { return E_ANGLE_LEFT;
            }
          case 63: break;
          case 17: 
            { return E_ANGLE_RIGHT;
            }
          case 64: break;
          case 18: 
            { return E_COMMENT;
            }
          case 65: break;
          case 19: 
            { return E_BLOCK_COMMENT;
            }
          case 66: break;
          case 20: 
            { return E_STRING;
            }
          case 67: break;
          case 21: 
            { return E_MAP;
            }
          case 68: break;
          case 22: 
            { return E_META;
            }
          case 69: break;
          case 23: 
            { return E_BOOLEAN;
            }
          case 70: break;
          case 24: 
            { return E_NULL;
            }
          case 71: break;
          case 25: 
            { return E_ENUM;
            }
          case 72: break;
          case 26: 
            { return E_LIST;
            }
          case 73: break;
          case 27: 
            { return E_LONG_T;
            }
          case 74: break;
          case 28: 
            { return E_WITH;
            }
          case 75: break;
          case 29: 
            { return E_IMPORT;
            }
          case 76: break;
          case 30: 
            { return E_RECORD;
            }
          case 77: break;
          case 31: 
            { return E_STRING_T;
            }
          case 78: break;
          case 32: 
            { return E_DOUBLE_T;
            }
          case 79: break;
          case 33: 
            { return E_BOOLEAN_T;
            }
          case 80: break;
          case 34: 
            { return E_INTEGER_T;
            }
          case 81: break;
          case 35: 
            { return E_EXTENDS;
            }
          case 82: break;
          case 36: 
            { return E_DEFAULT;
            }
          case 83: break;
          case 37: 
            { return E_VARTYPE;
            }
          case 84: break;
          case 38: 
            { return E_OVERRIDE;
            }
          case 85: break;
          case 39: 
            { return E_REQUIRED;
            }
          case 86: break;
          case 40: 
            { return E_ABSTRACT;
            }
          case 87: break;
          case 41: 
            { return E_NODEFAULT;
            }
          case 88: break;
          case 42: 
            { return E_NAMESPACE;
            }
          case 89: break;
          case 43: 
            { return E_FORBIDDEN;
            }
          case 90: break;
          case 44: 
            { return E_PARAMETERS;
            }
          case 91: break;
          case 45: 
            { return E_SUPPLEMENT;
            }
          case 92: break;
          case 46: 
            { return E_POLYMORPHIC;
            }
          case 93: break;
          case 47: 
            { return E_SUPPLEMENTS;
            }
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
