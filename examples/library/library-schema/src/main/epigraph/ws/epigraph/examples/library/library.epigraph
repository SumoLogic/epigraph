namespace ws.epigraph.examples.library

// book types

entity Book {
  id: BookId
  `record`: BookRecord
}

long BookId

record BookRecord {
  title: String
  author: Author
  text: Text
}

// author types

entity Author {
  id: AuthorId
  `record`: AuthorRecord
}

long AuthorId

record AuthorRecord {
  firstName: String
  middleName: String
  lastName: String
}

// book content types

entity Text {
  plain: PlainText
}

string PlainText meta PlainTextRange   // meta-data attached

record PlainTextRange {
  offset: Long,
  count: Long
}

// service

resource books: map[BookId, BookRecord] {
  // named output projection, to be reused by multiple operations
  outputProjection bookProjection: BookRecord = (
    title,
    author :(
      id,
      `record` (firstName, +middleName, lastName)
    ),
    text :plain {
      ;offset: Long,                 // input parameter
      ;count: Long { default: 100 }, // input parameter with default
      meta: (offset, count)          // supported meta-data projection
    }
  )

  // default read operatoin
  read {
    outputProjection [ required ] (  // map keys are required
      $bookProjection                // book record projection defined above
    )
  }

  // search operation
  read searchByAuthor {
    outputProjection {
      // parameter declaration
      ;+author: AuthorRecord (firstName, middleName, lastName) // all fields are optional
    } [ forbidden ] (                // map keys are forbidden
      $bookProjection
    )
  }

  create {
    inputType list[BookRecord]
    inputProjection *(
      +title,                        // title required
      +author:+id,                   // author id required
      +text:+plain                   // text required
    )

    outputType list[BookId]
  }

  update {
    inputProjection [ required ] (
      title,
      author:id,
      text:plain
    )

    outputProjection [ forbidden ] ( $bookProjection )
  }

  delete {
    deleteProjection [ required ] ()
    outputProjection [ forbidden ] ()
  }
}
