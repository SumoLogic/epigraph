namespace ws.epigraph.examples.library

// book types

vartype Book {
  id: BookId
  `record`: BookRecord
}

long BookId

record BookRecord {
  title: String
  author: Author
  text: Text
}

// author types

vartype Author {
  id: AuthorId
  `record`: AuthorRecord
}

long AuthorId

record AuthorRecord {
  firstName: String
  middleName: String
  lastName: String
}

// book content types

vartype Text {
  plain: PlainText
}

string PlainText meta PlainTextRange   // meta-data attached

record PlainTextRange {
  offset: Long,
  count: Long
}

// service

resource books: map[BookId, BookRecord] {
  // named output projection, to be reused by multiple operations
  outputProjection bookProjection: BookRecord = (
    title,
    author :(
      id,
      `record` (firstName, middleName, lastName)
    ),
    text :plain {
      ;offset: Long,                 // input parameter
      ;count: Long,                  // input parameter
      meta: (offset, count)          // supported meta-data projection
    }
  )

  // default read operatoin
  read {
    outputProjection [ required ] (  // map keys are required
      $bookProjection                // book record projection defined above
    )
  }

  // custom search operation
  custom searchByAuthor {
    method POST                      // can't be a GET since we need a body

    // operation input type and projection
    inputType AuthorRecord
    inputProjection (firstName, middleName, lastName)

    // operation output type stays the same, map[BookId, BookRecord],
    // but projection is different, map keys not allowed this time)
    outputProjection [ forbidden ] (
      $bookProjection
    )
  }
}