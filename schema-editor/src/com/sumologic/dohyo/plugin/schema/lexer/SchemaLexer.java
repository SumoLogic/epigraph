/* The following code was generated by JFlex 1.4.3 on 4/15/16 5:18 PM */

package com.sumologic.dohyo.plugin.schema.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.sumologic.dohyo.plugin.schema.lexer.SchemaElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/15/16 5:18 PM from the specification file
 * <tt>/Users/konstantin/workspace/dohyo/project/schema-editor/src/com/sumologic/dohyo/plugin/schema/lexer/SchemaLexer.flex</tt>
 */
public class SchemaLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\3\1\3\1\1\22\0\1\3\1\0\1\10"+
    "\4\0\1\6\2\0\1\5\1\44\1\42\1\0\1\41\1\4\12\13"+
    "\1\40\2\0\1\43\3\0\32\12\1\47\1\7\1\50\1\0\1\11"+
    "\1\0\1\23\1\37\1\26\1\27\1\24\1\30\1\36\1\35\1\14"+
    "\2\12\1\32\1\15\1\22\1\17\1\16\1\12\1\20\1\25\1\21"+
    "\1\31\1\12\1\34\1\33\2\12\1\45\1\0\1\46\54\0\1\12"+
    "\12\0\1\12\4\0\1\12\5\0\27\12\1\0\37\12\1\0\u01ca\12"+
    "\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12\201\0\5\12"+
    "\1\0\2\12\2\0\4\12\10\0\1\12\1\0\3\12\1\0\1\12"+
    "\1\0\24\12\1\0\123\12\1\0\213\12\10\0\236\12\11\0\46\12"+
    "\2\0\1\12\7\0\47\12\110\0\33\12\5\0\3\12\55\0\53\12"+
    "\25\0\12\13\4\0\2\12\1\0\143\12\1\0\1\12\17\0\2\12"+
    "\7\0\2\12\12\13\3\12\2\0\1\12\20\0\1\12\1\0\36\12"+
    "\35\0\131\12\13\0\1\12\16\0\12\13\41\12\11\0\2\12\4\0"+
    "\1\12\5\0\26\12\4\0\1\12\11\0\1\12\3\0\1\12\27\0"+
    "\31\12\107\0\1\12\1\0\13\12\127\0\66\12\3\0\1\12\22\0"+
    "\1\12\7\0\12\12\4\0\12\13\1\0\7\12\1\0\7\12\5\0"+
    "\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0"+
    "\4\12\3\0\1\12\20\0\1\12\15\0\2\12\1\0\3\12\4\0"+
    "\12\13\2\12\23\0\6\12\4\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\2\12\1\0\2\12\37\0\4\12\1\0\1\12"+
    "\7\0\12\13\2\0\3\12\20\0\11\12\1\0\3\12\1\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\5\12\3\0\1\12\22\0\1\12"+
    "\17\0\2\12\4\0\12\13\25\0\10\12\2\0\2\12\2\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\5\12\3\0\1\12\36\0\2\12"+
    "\1\0\3\12\4\0\12\13\1\0\1\12\21\0\1\12\1\0\6\12"+
    "\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12"+
    "\3\0\2\12\3\0\3\12\3\0\14\12\26\0\1\12\25\0\12\13"+
    "\25\0\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12"+
    "\3\0\1\12\32\0\2\12\6\0\2\12\4\0\12\13\25\0\10\12"+
    "\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0\1\12"+
    "\40\0\1\12\1\0\2\12\4\0\12\13\1\0\2\12\22\0\10\12"+
    "\1\0\3\12\1\0\51\12\2\0\1\12\20\0\1\12\21\0\2\12"+
    "\4\0\12\13\12\0\6\12\5\0\22\12\3\0\30\12\1\0\11\12"+
    "\1\0\1\12\2\0\7\12\72\0\60\12\1\0\2\12\14\0\7\12"+
    "\11\0\12\13\47\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12"+
    "\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12"+
    "\1\0\1\12\2\0\2\12\1\0\4\12\1\0\2\12\11\0\1\12"+
    "\2\0\5\12\1\0\1\12\11\0\12\13\2\0\4\12\40\0\1\12"+
    "\37\0\12\13\26\0\10\12\1\0\44\12\33\0\5\12\163\0\53\12"+
    "\24\0\1\12\12\13\6\0\6\12\4\0\4\12\3\0\1\12\3\0"+
    "\2\12\7\0\3\12\4\0\15\12\14\0\1\12\1\0\12\13\6\0"+
    "\46\12\1\0\1\12\5\0\1\12\2\0\53\12\1\0\u014d\12\1\0"+
    "\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\51\12\1\0"+
    "\4\12\2\0\41\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0"+
    "\4\12\2\0\17\12\1\0\71\12\1\0\4\12\2\0\103\12\45\0"+
    "\20\12\20\0\125\12\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0"+
    "\113\12\25\0\15\12\1\0\4\12\16\0\22\12\16\0\22\12\16\0"+
    "\15\12\1\0\3\12\17\0\64\12\43\0\1\12\4\0\1\12\3\0"+
    "\12\13\46\0\12\13\6\0\130\12\10\0\51\12\1\0\1\12\5\0"+
    "\106\12\12\0\35\12\51\0\12\13\36\12\2\0\5\12\13\0\54\12"+
    "\25\0\7\12\10\0\12\13\46\0\27\12\11\0\65\12\53\0\12\13"+
    "\6\0\12\13\15\0\1\12\135\0\57\12\21\0\7\12\4\0\12\13"+
    "\51\0\36\12\15\0\2\12\12\13\54\12\32\0\44\12\34\0\12\13"+
    "\3\0\3\12\12\13\44\12\153\0\4\12\1\0\4\12\3\0\2\12"+
    "\11\0\300\12\100\0\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12"+
    "\2\0\10\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\37\12"+
    "\2\0\65\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12"+
    "\3\0\4\12\2\0\6\12\4\0\15\12\5\0\3\12\1\0\7\12"+
    "\164\0\1\12\15\0\1\12\20\0\15\12\145\0\1\12\4\0\1\12"+
    "\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\4\12\1\0\13\12\2\0\4\12\5\0\5\12"+
    "\4\0\1\12\64\0\2\12\u0a7b\0\57\12\1\0\57\12\1\0\205\12"+
    "\6\0\4\12\3\0\2\12\14\0\46\12\1\0\1\12\5\0\1\12"+
    "\2\0\70\12\7\0\1\12\20\0\27\12\11\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\120\0\1\12\u01d5\0\2\12\52\0\5\12\5\0\2\12"+
    "\4\0\126\12\6\0\3\12\1\0\132\12\1\0\4\12\5\0\51\12"+
    "\3\0\136\12\21\0\33\12\65\0\20\12\u0200\0\u19b6\12\112\0\u51cd\12"+
    "\63\0\u048d\12\103\0\56\12\2\0\u010d\12\3\0\20\12\12\13\2\12"+
    "\24\0\57\12\20\0\31\12\10\0\106\12\61\0\11\12\2\0\147\12"+
    "\2\0\4\12\1\0\4\12\14\0\13\12\115\0\12\12\1\0\3\12"+
    "\1\0\4\12\1\0\27\12\35\0\64\12\16\0\62\12\34\0\12\13"+
    "\30\0\6\12\3\0\1\12\4\0\12\13\34\12\12\0\27\12\31\0"+
    "\35\12\7\0\57\12\34\0\1\12\12\13\46\0\51\12\27\0\3\12"+
    "\1\0\10\12\4\0\12\13\6\0\27\12\3\0\1\12\5\0\60\12"+
    "\1\0\1\12\3\0\2\12\2\0\5\12\2\0\1\12\1\0\1\12"+
    "\30\0\3\12\2\0\13\12\7\0\3\12\14\0\6\12\2\0\6\12"+
    "\2\0\6\12\11\0\7\12\1\0\7\12\221\0\43\12\15\0\12\13"+
    "\6\0\u2ba4\12\14\0\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12"+
    "\46\0\7\12\14\0\5\12\5\0\1\12\1\0\12\12\1\0\15\12"+
    "\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\154\12"+
    "\41\0\u016b\12\22\0\100\12\2\0\66\12\50\0\14\12\164\0\5\12"+
    "\1\0\207\12\23\0\12\13\7\0\32\12\6\0\32\12\13\0\131\12"+
    "\3\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\1\14\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\0\1\17\3\0\22\3\1\16\2\3\1\20\17\3"+
    "\1\0\2\3\1\21\3\3\1\22\6\3\1\23\1\24"+
    "\1\25\1\3\1\16\2\3\1\26\7\3\1\27\1\3"+
    "\1\30\1\3\1\31\2\3\1\32\1\3\1\33\2\3"+
    "\1\34\1\3\1\35\1\3\1\36\1\37\2\3\1\40"+
    "\1\3\1\41\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\51\0\51\0\51\0\51\0\51"+
    "\0\51\0\51\0\51\0\51\0\u030b\0\u0334\0\244\0\51"+
    "\0\u035d\0\315\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453"+
    "\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b"+
    "\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3"+
    "\0\u011f\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802"+
    "\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a"+
    "\0\u0973\0\u099c\0\u09c5\0\u011f\0\u09ee\0\u0a17\0\u0a40\0\u011f"+
    "\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u011f\0\u011f"+
    "\0\u011f\0\u0b5f\0\51\0\u0b88\0\u0bb1\0\u011f\0\u0bda\0\u0c03"+
    "\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u011f\0\u0cf9\0\u011f"+
    "\0\u0d22\0\u011f\0\u0d4b\0\u0d74\0\u011f\0\u0d9d\0\u011f\0\u0dc6"+
    "\0\u0def\0\u011f\0\u0e18\0\u011f\0\u0e41\0\u011f\0\u011f\0\u0e6a"+
    "\0\u0e93\0\u011f\0\u0ebc\0\u0ee5\0\u011f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\2\10\1\13\1\10\1\14"+
    "\1\10\1\15\1\16\1\10\1\17\1\10\1\20\1\21"+
    "\1\10\1\22\2\10\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\52\0\3\3\51\0"+
    "\1\35\1\36\43\0\6\37\1\40\1\41\41\37\7\42"+
    "\1\43\1\40\40\42\12\0\1\10\1\0\24\10\23\0"+
    "\26\10\23\0\3\10\1\44\4\10\1\45\15\10\23\0"+
    "\11\10\1\46\1\47\4\10\1\50\6\10\23\0\12\10"+
    "\1\51\13\10\23\0\11\10\1\52\14\10\23\0\10\10"+
    "\1\53\10\10\1\54\4\10\23\0\7\10\1\55\7\10"+
    "\1\56\6\10\23\0\5\10\1\57\4\10\1\60\13\10"+
    "\23\0\10\10\1\61\15\10\23\0\2\10\1\62\2\10"+
    "\1\63\20\10\23\0\2\10\1\64\23\10\23\0\5\10"+
    "\1\65\20\10\11\0\1\35\2\0\46\35\5\66\1\0"+
    "\43\66\2\37\1\0\46\37\2\42\1\0\46\42\12\0"+
    "\4\10\1\67\21\10\23\0\7\10\1\70\16\10\23\0"+
    "\4\10\1\71\21\10\23\0\7\10\1\72\16\10\23\0"+
    "\20\10\1\73\5\10\23\0\14\10\1\74\11\10\23\0"+
    "\3\10\1\75\22\10\23\0\17\10\1\76\6\10\23\0"+
    "\7\10\1\77\16\10\23\0\6\10\1\100\17\10\23\0"+
    "\4\10\1\101\21\10\23\0\17\10\1\102\6\10\23\0"+
    "\16\10\1\103\7\10\23\0\2\10\1\104\23\10\23\0"+
    "\13\10\1\105\12\10\23\0\10\10\1\106\15\10\23\0"+
    "\7\10\1\107\16\10\23\0\5\10\1\110\20\10\11\0"+
    "\5\66\1\111\43\66\12\0\5\10\1\112\20\10\23\0"+
    "\12\10\1\113\13\10\23\0\11\10\1\114\14\10\23\0"+
    "\7\10\1\115\16\10\23\0\5\10\1\116\20\10\23\0"+
    "\12\10\1\117\13\10\23\0\3\10\1\120\22\10\23\0"+
    "\12\10\1\121\13\10\23\0\2\10\1\122\23\10\23\0"+
    "\4\10\1\123\21\10\23\0\25\10\1\124\23\0\11\10"+
    "\1\125\14\10\23\0\5\10\1\126\20\10\23\0\7\10"+
    "\1\127\16\10\23\0\24\10\1\130\1\10\23\0\23\10"+
    "\1\131\2\10\23\0\20\10\1\132\5\10\11\0\4\66"+
    "\1\133\1\111\43\66\12\0\6\10\1\134\17\10\23\0"+
    "\24\10\1\135\1\10\23\0\2\10\1\136\23\10\23\0"+
    "\6\10\1\137\17\10\23\0\13\10\1\140\12\10\23\0"+
    "\10\10\1\141\15\10\23\0\10\10\1\142\15\10\23\0"+
    "\20\10\1\143\5\10\23\0\20\10\1\144\5\10\23\0"+
    "\17\10\1\145\6\10\23\0\10\10\1\146\15\10\23\0"+
    "\12\10\1\147\13\10\23\0\7\10\1\150\16\10\23\0"+
    "\12\10\1\151\13\10\23\0\15\10\1\152\10\10\23\0"+
    "\4\10\1\153\21\10\23\0\15\10\1\154\10\10\23\0"+
    "\24\10\1\155\1\10\23\0\12\10\1\156\13\10\23\0"+
    "\12\10\1\157\13\10\23\0\20\10\1\160\5\10\23\0"+
    "\11\10\1\161\14\10\23\0\6\10\1\162\17\10\23\0"+
    "\11\10\1\163\14\10\23\0\13\10\1\164\12\10\23\0"+
    "\3\10\1\165\22\10\23\0\7\10\1\166\16\10\23\0"+
    "\10\10\1\167\15\10\23\0\14\10\1\170\11\10\23\0"+
    "\12\10\1\171\13\10\23\0\12\10\1\172\13\10\23\0"+
    "\10\10\1\173\15\10\23\0\7\10\1\174\16\10\23\0"+
    "\13\10\1\175\12\10\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3854];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\11\11\2\1\1\0\1\11\3\0"+
    "\45\1\1\0\21\1\1\11\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  int curlyCount = 0;

  public SchemaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SchemaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1698) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return curlyCount == 0 ? S_IMPORT : S_ID;
          }
        case 35: break;
        case 4: 
          { return S_COLON;
          }
        case 36: break;
        case 31: 
          { return curlyCount == 0 ? S_BOOLEAN_T : S_ID;
          }
        case 37: break;
        case 14: 
          { return S_BLOCK_COMMENT;
          }
        case 38: break;
        case 22: 
          { return curlyCount == 0 ? S_MULTI : S_ID;
          }
        case 39: break;
        case 5: 
          { return S_DOT;
          }
        case 40: break;
        case 28: 
          { return curlyCount == 0 ? S_INTEGER_T : S_ID;
          }
        case 41: break;
        case 26: 
          { return curlyCount == 0 ? S_STRING_T : S_ID;
          }
        case 42: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 43: break;
        case 3: 
          { return S_ID;
          }
        case 44: break;
        case 34: 
          { return curlyCount == 0 ? S_SUPPLEMENTS : S_ID;
          }
        case 45: break;
        case 8: 
          { return S_PLUS;
          }
        case 46: break;
        case 27: 
          { return curlyCount == 0 ? S_DOUBLE_T : S_ID;
          }
        case 47: break;
        case 20: 
          { return curlyCount == 0 ? S_LONG_T : S_ID;
          }
        case 48: break;
        case 7: 
          { return S_EQ;
          }
        case 49: break;
        case 21: 
          { return curlyCount == 0 ? S_WITH : S_ID;
          }
        case 50: break;
        case 11: 
          { return S_BRACKET_LEFT;
          }
        case 51: break;
        case 16: 
          { return curlyCount < 2 ? S_MAP : S_ID;
          }
        case 52: break;
        case 32: 
          { return curlyCount == 0 ? S_NAMESPACE : S_ID;
          }
        case 53: break;
        case 19: 
          { return curlyCount < 2 ? S_LIST : S_ID;
          }
        case 54: break;
        case 15: 
          { return S_STRING;
          }
        case 55: break;
        case 29: 
          { return curlyCount == 0 ? S_EXTENDS : S_ID;
          }
        case 56: break;
        case 6: 
          { return S_COMMA;
          }
        case 57: break;
        case 23: 
          { return curlyCount == 0 ? S_UNION : S_ID;
          }
        case 58: break;
        case 18: 
          { return curlyCount == 0 ? S_ENUM : S_ID;
          }
        case 59: break;
        case 13: 
          { return S_COMMENT;
          }
        case 60: break;
        case 30: 
          { return curlyCount < 2 ? S_DEFAULT : S_ID;
          }
        case 61: break;
        case 17: 
          { return curlyCount == 0 ? S_META : S_ID;
          }
        case 62: break;
        case 25: 
          { return curlyCount == 0 ? S_RECORD : S_ID;
          }
        case 63: break;
        case 9: 
          { curlyCount++; return S_CURLY_LEFT;
          }
        case 64: break;
        case 33: 
          { return curlyCount == 0 ? S_SUPPLEMENT : S_ID;
          }
        case 65: break;
        case 10: 
          { curlyCount = (curlyCount == 0 ? 0 : curlyCount - 1) ; return S_CURLY_RIGHT;
          }
        case 66: break;
        case 12: 
          { return S_BRACKET_RIGHT;
          }
        case 67: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 68: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
