namespace ws.epigraph.services

import epigraph.annotations.Doc
import epigraph.data.BooleanDatum
import epigraph.data.Data
import epigraph.data.Datum
import epigraph.data.DoubleDatum
import epigraph.data.EntityData
import epigraph.data.IntegerDatum
import epigraph.data.ListDatum
import epigraph.data.LongDatum
import epigraph.data.MapDatum
import epigraph.data.PrimitiveDatum
import epigraph.data.RecordDatum
import epigraph.data.StringDatum
import epigraph.data.Value
import epigraph.schema.Annotations
import epigraph.schema.AnonListTypeName
import epigraph.schema.AnonMapTypeName
import epigraph.schema.DataType
import epigraph.schema.DataTypeName
import epigraph.schema.DatumType
import epigraph.schema.Field
import epigraph.schema.ListType
import epigraph.schema.MapType
import epigraph.schema.NameString
import epigraph.schema.PrimitiveType
import epigraph.schema.QualifiedTypeName
import epigraph.schema.RecordType
import epigraph.schema.Tag
import epigraph.schema.Type
import epigraph.schema.TypeName
import epigraph.schema.EntityType

record EpigraphResource {
  @Doc "Epigraph built-in services resource root type"

  types: map[NameString, Type]
}

resource epigraph: EpigraphResource {

  // data

  outputProjection value: Value = (
    data $datum,
    error (statusCode, message, exception)
  )

  outputProjection data: Data = ( type $type ) ~ (
    EntityData $entityData,
    Datum $datum
  )

  outputProjection entityData: EntityData = (
    tags [] ($data)
  )

  outputProjection datum: Datum = ( type $datumType )  ~ (
    RecordDatum $recordDatum,
    MapDatum $mapDatum,
    ListDatum $listDatum,
    PrimitiveDatum $primitiveDatum
  )

  outputProjection recordDatum: RecordDatum = ( fields [] ( $value ) )

  outputProjection mapDatum: MapDatum = ( entries [] ( $value ) )

  outputProjection listDatum: ListDatum = ( entries * ( $value ) )

  outputProjection primitiveDatum: PrimitiveDatum = () ~ (
    StringDatum (value),
    IntegerDatum (value),
    LongDatum (value),
    DoubleDatum (value),
    BooleanDatum (value)
  )

  // todo enum

  // annotations

  outputProjection annotations: Annotations = [] (
    type $datumType,
    value $datum
  )

  // types

  outputProjection typeName: TypeName = :`string` :~ (
    QualifiedTypeName :name,
    AnonListTypeName :elementTypeName $dataTypeName,
    AnonMapTypeName :`record`(
      keyTypeName $typeName,
      valueTypeName $dataTypeName
    )
  )

  outputProjection dataTypeName: DataTypeName = (
    typeName $typeName,
    retroTagName :`string`
  )

  outputProjection type: Type = (
    name $typeName,
    supertypes * $type,
    `abstract`,
    annotations $annotations
  ) ~ (
    EntityType ( tags * $tag ),
    DatumType $datumType = (     // datumType = type ~ DatumType
      // supertypes * $datumType // can't merge recursive projections yet. And not needed actually: normalized version will have it as list[DatumType] with $datumType for items anyways
      metaType $datumType
    ) ~ (
      RecordType (
        declaredFields * $field
        // add `computed` fields too?
      ),
      MapType (
        keyType $type
        valueType $dataType
      ),
      ListType (
        valueType $dataType
      ),
      PrimitiveType // empty, but gives us properly typed `name` and `supertypes` projections
    )
  )

  outputProjection tag: Tag = (
    name :`string`,
    type $datumType,
    annotations $annotations
  )

  outputProjection field: Field = (
    name :`string`,
    valueType $dataType,
    annotations $annotations
  )

  outputProjection dataType: DataType = (
    type $type,
    `retro` $tag
  )

  // operations

  read types { // todo remove name
    path /types
    outputProjection [] ( $type )
  }
}
