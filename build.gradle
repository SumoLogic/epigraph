plugins {
  id 'nebula.dependency-recommender' version '3.6.3' // '4.2.0' has a bug: https://github.com/nebula-plugins/nebula-dependency-recommender-plugin/issues/43
  id 'nebula.maven-publish' version '4.8.0' // '5.0.0' generates duplicating <dependencies> sections in pom.xml
}

allprojects {
  apply plugin: 'idea'
  apply plugin: 'nebula.dependency-recommender'
  apply plugin: 'nebula.maven-publish'
  apply plugin: 'nebula.maven-resolved-dependencies'

  group = epigraphGroup
  version = epigraphVersion

  dependencyRecommendations {
    mavenBom file: file("$rootDir/pom.xml")
  }
}

subprojects {
  repositories {
    mavenCentral()
    jcenter()
  }

  tasks.withType(JavaCompile) {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xdiags:verbose"
  }

  tasks.withType(ScalaCompile) {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    ScalaCompileOptions.metaClass.daemonServer = true
    ScalaCompileOptions.metaClass.fork = true
    ScalaCompileOptions.metaClass.useAnt = false
    ScalaCompileOptions.metaClass.useCompileDaemon = false

    options.encoding = 'UTF-8'
    scalaCompileOptions.deprecation = true
    scalaCompileOptions.unchecked = true

    scalaCompileOptions.additionalParameters = ["-explaintypes"]
  }
}

/*
 * Copyright 2017 Sumo Logic
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// importing gradle project from IDEA is preferred to using 'gradle idea'
idea {
  project {
    jdkName = javaVersion
    languageLevel = javaVersion
    vcs = 'Git'
  }
}

// bootstrap: gradle -c settings-bootstrap.gradle publishGradlePlugins
task publishGradlePlugins(dependsOn: [
    ':epigraph-compiler:publishToMavenLocal',
    ':epigraph-gradle-plugin:publishToMavenLocal',
    ':epigraph-gradle-plugin-common:publishToMavenLocal',
    ':epigraph-java-core:publishToMavenLocal',
    ':epigraph-java-codegen:publishToMavenLocal',
    ':epigraph-java-data-processing:publishToMavenLocal',
    ':epigraph-java-gdata:publishToMavenLocal',
    ':epigraph-java-gradle-plugin:publishToMavenLocal',
    ':epigraph-java-lang-common:publishToMavenLocal',
    ':epigraph-java-projections:publishToMavenLocal',
    ':epigraph-java-projections-psi-parser-util:publishToMavenLocal',
    ':epigraph-java-standalone-psi-util:publishToMavenLocal',
    ':epigraph-java-schema:publishToMavenLocal',
    ':epigraph-java-schema-parser:publishToMavenLocal',
    ':epigraph-java-schema-psi-parser-common:publishToMavenLocal',
    ':epigraph-java-test-util:publishToMavenLocal',
    ':epigraph-java-util:publishToMavenLocal',
    ':epigraph-light-psi:publishToMavenLocal',
    ':epigraph-scala-core:publishToMavenLocal'
]) {
  description 'Bootstraps gradle build by installing necessary plugins. Usage: \n gradle -c settings-bootstrap.gradle publishGradlePlugins'
}

