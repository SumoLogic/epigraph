namespace epigraph.projections.req

/**
 * Request-time projections describing update operation body payload. Should be
 * synchronous with body structure and provides additional information for it, e.g.
 * parameters and which parts must be updated versus patched
 */

import epigraph.schema.DatumType
import epigraph.schema.EnumType
import epigraph.schema.Field
import epigraph.schema.ListType
import epigraph.schema.MapType
import epigraph.schema.PrimitiveType
import epigraph.schema.RecordType
import epigraph.schema.Tag
import epigraph.schema.Type
import epigraph.data.Datum
import epigraph.annotations.Doc

record ReqUpdateVarProjection {
  type: Type
  tagProjections: map[String, ReqUpdateTagProjectionEntry]
  polymorphicTail: list[ReqUpdateVarProjection]
}

record ReqUpdateTagProjectionEntry {
  tag: Tag
  `projection`: ReqUpdateModelProjection
}

abstract record ReqUpdateModelProjection {
  model: DatumType
  `replace`: Boolean // replace (update) or patch?
  params: map[String, ReqParam]
  directives: map[String, Directive]
//  `meta`: ReqUpdateModelProjection
}

record ReqUpdateRecordModelProjection extends ReqUpdateModelProjection {
  override model: RecordType
  fieldProjections: list[ReqUpdateFieldProjectionEntry]
}
record ReqUpdateFieldProjectionEntry {
  field: Field
  `projection`: ReqUpdateFieldProjection
}

record ReqUpdateFieldProjection {
  `replace`: Boolean // replace (update) or patch entity?
  field: Field
  // params: map[String, ReqParam]
  // annotations: map[String, Annotation]
  varProjection: ReqUpdateVarProjection
}

record ReqUpdateListModelProjection extends ReqUpdateModelProjection {
  override model: ListType
  varProjection: ReqUpdateVarProjection
}

record ReqUpdateMapModelProjection extends ReqUpdateModelProjection {
  override model: MapType
  keysProjection: ReqUpdateKeysProjection
  varProjection: ReqUpdateVarProjection
}

record ReqUpdateKeysProjection {
  `replace`: Boolean // replace (update) or patch entities? applies to all keys
  keys: list[ReqUpdateKeyProjection]
}

record ReqUpdateKeyProjection {
  value: Datum { @Doc "of appropriate (enclosing map key) type"}
  params: map[String, ReqParam]
  directives: map[String, Directive]
}

record ReqUpdateEnumModelProjection extends ReqUpdateModelProjection {
  override model: EnumType
}

record ReqUpdatePrimitiveModelProjection extends ReqUpdateModelProjection {
  override model: PrimitiveType
}
