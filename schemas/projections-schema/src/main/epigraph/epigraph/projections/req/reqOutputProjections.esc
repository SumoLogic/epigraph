namespace epigraph.projections.req

/**
 * Request-time projections specifying desired output structure of invoked operation response.
 */

// field(default tag projection)
// field:someTag(someTag projection)
// field:(tag1(tag1 projection), tag2(tag2 projection))

// /folders/123/items:list:(id, record:(id, name):(com.box.FolderRecord(...), com.box.FileRecord(...):(c.b.ImageFileRecord(size, ...))))

// /folders/123/items:list:(id, record:(id, name, :com.box.FolderRecord(...), :com.box.FileRecord(...)))
// /folders/123/items:list:(id, record:(id, name, :(com.box.FolderRecord(...), com.box.FileRecord(...))))
// /folders/123/items:list:(id, record:(id, name, com.box.FolderRecord:(...), com.box.FileRecord:(...)))
// /folders/123/items:map/123:(id, record)
// /folders/123/items:map[123,234]:(id, record)
// /folders/123/items(id, name, ...)
// /folders/123/items::record(id, name, ...)

import epigraph.projections.Annotation
import epigraph.schema.DataTypeRef
import epigraph.schema.EnumTypeRef
import epigraph.schema.FieldRef
import epigraph.schema.ListTypeRef
import epigraph.schema.MapTypeRef
import epigraph.schema.PrimitiveTypeRef
import epigraph.schema.RecordTypeRef
import epigraph.schema.TypeMemberRef
import epigraph.schema.TypeRef
import epigraph.data.Datum

// req projections also have a notion of path = number of steps without branching, e.g.
// /foo/bar(baz1, baz2) vs /foo(bar(baz1, baz2), qux)   or
// /a/b/c vs a(b(c))
// this is not reflected in the schema, but psi parsers return projections along with 'number of path steps' = path length

record ReqOutputVarProjection {
  type: TypeRef
  tagProjections: map[String, ReqOutputTagProjectionEntry]
  polymorphicTail: list[ReqOutputVarProjection]
}

record ReqOutputTagProjectionEntry {
  tag: TypeMemberRef
  projection: ReqOutputModelProjection
}

abstract record ReqOutputModelProjection {
  model: DataTypeRef
  required: Boolean
  params: map[String, ReqParam]
  annotations: map[String, Annotation]
  `meta`: ReqOutputModelProjection
}

record ReqOutputRecordModelProjection extends ReqOutputModelProjection {
  override model: RecordTypeRef
  fieldProjections: list[ReqOutputFieldProjectionEntry]
}
record ReqOutputFieldProjectionEntry {
  field: FieldRef
  projection: ReqOutputFieldProjection
}

record ReqOutputFieldProjection {
  field: FieldRef
  params: map[String, ReqParam]
  annotations: map[String, Annotation]
  varProjection: ReqOutputVarProjection
}

record ReqOutputListModelProjection extends ReqOutputModelProjection {
  override model: ListTypeRef
  varProjection: ReqOutputVarProjection
}

record ReqOutputMapModelProjection extends ReqOutputModelProjection {
  override model: MapTypeRef
  keysRequired: Boolean // one for all keys
  keysProjection: ReqOutputKeysProjection { doc = "if `null` - all keys" }
  varProjection: ReqOutputVarProjection
}

record ReqOutputKeysProjection {
  keys: list[ReqOutputKey]
}

record ReqOutputKey {
  value: Datum { doc = "of appropriate (enclosing map key) type"}
  projection: ReqOutputKeyProjection
}

record ReqOutputKeyProjection {
  // required is specified once for all keys
  params: map[String, ReqParam]
  annotations: map[String, Annotation]
}

record ReqOutputEnumModelProjection extends ReqOutputModelProjection {
  override model: EnumTypeRef
}

record ReqOutputPrimitiveModelProjection extends ReqOutputModelProjection {
  override model: PrimitiveTypeRef
}
