namespace epigraph.projections.op

import epigraph.schema.DataTypeRef
import epigraph.schema.EnumTypeRef
import epigraph.schema.FieldRef
import epigraph.schema.ListTypeRef
import epigraph.schema.MapTypeRef
import epigraph.schema.PrimitiveTypeRef
import epigraph.schema.RecordTypeRef
import epigraph.schema.TypeMemberRef
import epigraph.schema.TypeRef
import epigraph.projections.Annotation

record OpOutputVarProjection {
  type: TypeRef
  tagProjections: list[OpOutputTagProjectionEntry]
  polymorphicTail: list[OpOutputVarProjection]
}

record OpOutputTagProjectionEntry {
  tag: TypeMemberRef
  projection: OpOutputModelProjection
}

abstract record OpOutputModelProjection {
  model: DataTypeRef
  params: map[String, OpParam]
  annotations: map[String, Annotation]
  `meta`: OpOutputModelProjection
}

record OpOutputRecordModelProjection extends OpOutputModelProjection {
  override model: RecordTypeRef
  fieldProjections: map[String, OpOutputFieldProjectionEntry]
}

record OpOutputFieldProjectionEntry {
  field: FieldRef
  projection: OpOutputFieldProjection
}

record OpOutputFieldProjection {
  params: map[String, OpParam]
  annotations: map[String, Annotation]
  varProjection: OpOutputVarProjection
}

record OpOutputMapModelProjection extends OpOutputModelProjection {
  override model: MapTypeRef
  keyProjection: OpOutputKeyProjection
  varProjection: OpOutputVarProjection
}

record OpOutputKeyProjection {
  required: Boolean { doc = "if `null` - keys are not accepted" }
  params: map[String, OpParam]
  annotations: map[String, Annotation]
}

record OpOutputListModelProjection extends OpOutputModelProjection {
  override model: ListTypeRef
  varProjection: OpOutputVarProjection
}

record OpOutputEnumModelProjection extends OpOutputModelProjection {
  override model: EnumTypeRef
}

record OpOutputPrimitiveModelProjection extends OpOutputModelProjection {
  override model: PrimitiveTypeRef
}
