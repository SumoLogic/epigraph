namespace epigraph.projections.op

import epigraph.schema.DataTypeRef
import epigraph.schema.FieldRef
import epigraph.schema.ListTypeRef
import epigraph.schema.MapTypeRef
import epigraph.schema.RecordTypeRef
import epigraph.schema.TypeMemberRef
import epigraph.schema.TypeRef
import epigraph.schema.EnumTypeRef
import epigraph.schema.PrimitiveTypeRef
import epigraph.projections.Annotation

// OpOutputProjections with canDelete on vars (we can only delete entities) and no `meta` on models

record OpDeleteVarProjection {
  type: TypeRef
  tagProjections: list[OpDeleteTagProjectionEntry]
  canDelete: Boolean // true == this can be a leaf
  polymorphicTail: list[OpDeleteVarProjection]
}

record OpDeleteTagProjectionEntry {
  tag: TypeMemberRef
  projection: OpDeleteModelProjection
}

abstract record OpDeleteModelProjection {
  model: DataTypeRef
  params: map[String, OpParam]
  annotations: map[String, Annotation]
}

record OpDeleteRecordModelProjection extends OpDeleteModelProjection {
  override model: RecordTypeRef
  fieldProjections: list[OpDeleteFieldProjectionEntry]
}

record OpDeleteFieldProjectionEntry {
  field: FieldRef
  projection: OpDeleteFieldProjection
}

record OpDeleteFieldProjection {
  params: map[String, OpParam]
  varProjection: OpDeleteVarProjection
}

record OpDeleteListModelProjection extends OpDeleteModelProjection {
  override model: ListTypeRef
  varProjection: OpDeleteVarProjection
}

record OpDeleteMapModelProjection extends OpDeleteModelProjection {
  override model: MapTypeRef
  keyProjection: OpDeleteKeyProjection
  varProjection: OpDeleteVarProjection
}

record OpDeleteKeyProjection {
  required: Boolean { doc = "if `null` - keys are not accepted" }
  params: map[String, OpParam]
  annotations: map[String, Annotation]
}

record OpDeleteEnumModelProjection extends OpDeleteModelProjection {
  override model: EnumTypeRef
}

record OpDeletePrimitiveModelProjection extends OpDeleteModelProjection {
  override model: PrimitiveTypeRef
}
