namespace epigraph.projections.op

import epigraph.annotations.Doc
import epigraph.data.Datum
import epigraph.data.EnumDatum
import epigraph.data.ListDatum
import epigraph.data.MapDatum
import epigraph.data.PrimitiveDatum
import epigraph.data.RecordDatum
import epigraph.schema.Annotated
import epigraph.schema.DatumType
import epigraph.schema.EnumType
import epigraph.schema.Field
import epigraph.schema.ListType
import epigraph.schema.MapType
import epigraph.schema.PrimitiveType
import epigraph.schema.RecordType
import epigraph.schema.Tag
import epigraph.schema.Type

record OpInputVarProjection {
  type: Type
  tagProjections: map[String, OpInputTagProjectionEntry]
  polymorphicTail: list[OpInputVarProjection]
}

record OpInputTagProjectionEntry {
  tag: Tag
  `projection`: OpInputModelProjection // OpInputTagProjection = opInputModelProjection
}

abstract record OpInputModelProjection extends Annotated {
  model: DatumType
  `required`: Boolean
  defaultValue: Datum
  params: map[String, OpParam]
  // `meta`: OpInputModelProjection
}

record OpInputRecordModelProjection extends OpInputModelProjection {
  override model: RecordType
  override defaultValue: RecordDatum
  fieldProjections: map[String, OpInputFieldProjectionEntry]
}

record OpInputFieldProjectionEntry {
  field: Field
  `projection`: OpInputFieldProjection
}

record OpInputFieldProjection {
  `required`: Boolean  // artificial, required on field = required on all models
//  params: map[String, OpParam]
//  annotations: map[String, Annotation]
  varProjection: OpInputVarProjection
}

record OpInputListModelProjection extends OpInputModelProjection {
  override model: ListType
  override defaultValue: ListDatum
  varProjection: OpInputVarProjection
}

record OpInputMapModelProjection extends OpInputModelProjection {
  override model: MapType
  override defaultValue: MapDatum
  keyProjection: OpInputKeyProjection
  varProjection: OpInputVarProjection
}

record OpInputKeyProjection extends Annotated {
  `required`: Boolean { @Doc "if `null` - keys are not accepted" }
  params: map[String, OpParam]
}

record OpInputEnumModelProjection extends OpInputModelProjection {
  override model: EnumType
  override defaultValue: EnumDatum
}

record OpInputPrimitiveModelProjection extends OpInputModelProjection {
  override model: PrimitiveType
  override defaultValue: PrimitiveDatum
}
