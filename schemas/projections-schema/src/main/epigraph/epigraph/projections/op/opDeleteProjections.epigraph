namespace epigraph.projections.op

import epigraph.annotations.Doc
import epigraph.schema.DatumType
import epigraph.schema.Field
import epigraph.schema.ListType
import epigraph.schema.MapType
import epigraph.schema.RecordType
import epigraph.schema.Tag
import epigraph.schema.Type
import epigraph.schema.EnumType
import epigraph.schema.PrimitiveType
import epigraph.schema.QualifiedTypeName

// OpOutputProjections with canDelete on vars (we can only delete entities) and no `meta` on models

record OpDeleteVarProjection {
  type: Type
  tagProjections: list[OpDeleteTagProjectionEntry]
  canDelete: Boolean // true == this can be a leaf
  polymorphicTail: list[OpDeleteVarProjection]
}

record OpDeleteTagProjectionEntry {
  tag: Tag
  `projection`: OpDeleteModelProjection
}

abstract record OpDeleteModelProjection {
  model: DatumType
  params: map[String, OpParam]
  annotations: map[QualifiedTypeName, Annotation]
}

record OpDeleteRecordModelProjection extends OpDeleteModelProjection {
  override model: RecordType
  fieldProjections: list[OpDeleteFieldProjectionEntry]
}

record OpDeleteFieldProjectionEntry {
  field: Field
  `projection`: OpDeleteFieldProjection
}

record OpDeleteFieldProjection {
  // params: map[String, OpParam]
  // annotations: map[String, Annotation]
  varProjection: OpDeleteVarProjection
}

record OpDeleteListModelProjection extends OpDeleteModelProjection {
  override model: ListType
  varProjection: OpDeleteVarProjection
}

record OpDeleteMapModelProjection extends OpDeleteModelProjection {
  override model: MapType
  keyProjection: OpDeleteKeyProjection
  varProjection: OpDeleteVarProjection
}

record OpDeleteKeyProjection {
  `required`: Boolean { @Doc "if `null` - keys are not accepted" }
  params: map[String, OpParam]
  annotations: map[QualifiedTypeName, Annotation]
}

record OpDeleteEnumModelProjection extends OpDeleteModelProjection {
  override model: EnumType
}

record OpDeletePrimitiveModelProjection extends OpDeleteModelProjection {
  override model: PrimitiveType
}
