namespace epigraph.operations

import epigraph.projections.Annotation
import epigraph.projections.op.OpDeleteVarProjection
import epigraph.projections.op.OpInputModelProjection
import epigraph.projections.op.OpVarPath
import epigraph.schema.DataTypeRef
import epigraph.schema.Documented
import epigraph.schema.TypeRef
import epigraph.schema.VarTypeRef
import epigraph.projections.op.OpOutputFieldProjection

record Resource extends Documented {
  fieldName: String
  fieldType: VarTypeRef
  operations: list[Operation]
}

abstract record Operation extends Documented {
  name: String { doc = "`null` means default operation" }
  annotations: list[Annotation]

  path: OpVarPath // starts with resource field type, ends with data type (var container)

  inputType: DataTypeRef
  inputProjection: OpInputModelProjection // starts from `inputType` (can be different from resource field type)

  outputType: TypeRef // type `outputProjection` starts with
  outputProjection: OpOutputFieldProjection
}

// routing:
// if operation name is provided using query parameter: find operation by verb and name. Else:
// find all unnamed operations by verb (NB: methods can be overriden in X-HTTP-METHOD header)
// sort them by op path length in descending order then declaration order (must be stable!)
// for each of them:
// if it's a READ:
//   Try to parse read request projection against URL + `path` (the result of this would be `reqPath` + `reqOutputProjection`)
//   first that matches is our operation
// else (not a READ):
//   extract path from request (have to have full URL Request parser for this! )
//   try to match parsed path with operation path. First operation that matches is our operation

// see also: url.bnf


record CreateOperation extends Operation {
  // HTTP POST /people ~ *(status) <<< [ { user1 }, { user2 } ]
  // inputType (if not specified) = path tip type, or resource fieldType if path is null

  // can be specified: path?, inputType?, inputProjection, outputType, outputProjection
}

record ReadOperation extends Operation {
  // contract: outputType = path tip type, or resource fieldType if path is null
  // inputType = inputProjection = null

  // can be specified: path?, outputProjection
}

record UpdateOperation extends Operation {
  // HTTP PUT /people*(firstName, lastName) << { 123: { firstName: "Vasya" } } // updates firstName, removes lastName
  // HTTP PUT /people << { 123: { firstName: "Vasya" } }
  // HTTP PUT /people/123 << { firstName: "Vasya" }
  // HTTP PUT /people/123/firstName << "Vasya"

  // inputType (if not specified) = path tip type, or resource fieldType if path is null
  // outputType (if not specified) = path tip type, or resource fieldType if path is null
  // outputProjection (if not specified) = default empty projection for `outputType`

  // can be specified: path?, inputType?, inputProjection, outputType?, outputProjection?
}

record DeleteOperation extends Operation {
  // HTTP DELETE /people/123(firstName, lastName) <-- not supported for now
  // HTTP DELETE /people
  // HTTP DELETE /people/123
  // HTTP DELETE /people/123/firstName

  deleteProjection: OpDeleteVarProjection // starts at the tip of `path`

  // inputType = inputProjection = null

  // HTTP DELETE  /people[1,2,3]
  //              ^^^^^^^
  //              path   ^^^^^^^
  //                     ReqDeleteProjection (parsed against deleteProjection)

  // can be specified: path?, deleteProjection, outputType, outputProjection
}

record CustomOperation extends Operation {
  // HTTP POST       /people/123 ~ /foo/234(bar, baz) ? param=value <<< { 'x' : 'y' }
  //  any ^ verb?     ^             ^                         ^          ^
  // path, guided by `path`         |                         |          |
  // ReqOutputVarProjection, parsed using `outputProjection`  |          |
  //                                            query parameters         |
  //                    request body, (de)serialized using `inputProjection`

  // inputType (if not specified) = path tip type, or resource fieldType if path is null
  // outputType (if not specified) = path tip type, or resource fieldType if path is null
  // outputProjection (if not specified) = default empty projection for `outputType`

  // can be specified: path?, inputType?, inputProjection?, outputType?, outputProjection?
}
