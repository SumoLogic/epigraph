namespace epigraph.data

import epigraph.schema.Type
import epigraph.schema.VarType
import epigraph.schema.DatumType
import epigraph.schema.RecordType
import epigraph.schema.MapType
import epigraph.schema.ListType
import epigraph.schema.EnumType
import epigraph.schema.PrimitiveType
import epigraph.schema.StringType
import epigraph.schema.IntegerType
import epigraph.schema.LongType
import epigraph.schema.DoubleType
import epigraph.schema.BooleanType

record Error {
  statusCode: Integer
  exception: String // should be Exception
}

record Value {
  data: Datum
  error: Error
  // meta?
}

abstract record Data {
  abstract type: Type
}

record VarData extends Data {
  override type: VarType
  tags: map[String, Data]
}

abstract record Datum extends Data {
  override type: DatumType
}

record RecordDatum extends Datum {
  override type: RecordType
  fields: map[String, Value]
}

record MapDatum extends Datum {
  override type: MapType
  entries: map[Data, Value]
}

record ListDatum extends Datum {
  override type: ListType
  entries: list[Value]
}

record EnumDatum extends Datum {
  override type: EnumType
  value: String // TODO how do we model this?
}

abstract record PrimitiveDatum extends Datum {
  override type: PrimitiveType
}

record StringDatum extends PrimitiveDatum {
  override type: StringType
  value: String
}

record IntegerDatum extends PrimitiveDatum {
  override type: IntegerType
  value: Integer
}

record LongDatum extends PrimitiveDatum {
  override type: LongType
  value: Long
}

record DoubleDatum extends PrimitiveDatum {
  override type: DoubleType
  value: Double
}

record BooleanDatum extends PrimitiveDatum {
  override type: BooleanType
  value: Boolean
}
