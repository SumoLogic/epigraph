namespace epigraph.schema

abstract record Type extends Named {
  doc = "Common interface for data type and vartype records"

  override name: QualifiedName

  abstract supertypes: list[Type]

  `abstract`: Boolean { doc = "Abstract types cannot be instantiated (?)" }
}

record VarType extends Type {
  doc = "Vartype declaration"

  override supertypes: list[VarType]

  tags: list[Tag]
}

record DataType {
  `type`: Type // todo should be VarType ?
  `retro`: Tag
}

record Tag extends Named {
  doc = "Vartype member declaration"

  override name: TagName

  dataType: DatumType
}

record DatumType extends Type {
  doc = "Model type"

  override supertypes: list[DatumType]

  metaType: DatumType
}

record RecordType extends DatumType {
  override supertypes: list[RecordType]

  declaredFields: list[Field]
}

record Field extends Named {
  override name: FieldName

  valueType: DataType
}

record MapType extends DatumType {
  override supertypes: list[MapType]

  keyType: DatumType

  valueType: DataType
}

record ListType extends DatumType {

  override supertypes: list[ListType]

  valueType: DataType
}

record EnumType extends DatumType {
  override supertypes: list[EnumType]

  // TODO? valueType: DataTypeRef

  values: list[EnumValue]
}

record EnumValue extends Named {
  override name: EnumValueName

  // TODO? value: Any??
}

abstract record PrimitiveType extends DatumType {
  override abstract supertypes: list[PrimitiveType]
}

record StringType extends PrimitiveType { override supertypes: list[StringType] }

record IntegerType extends PrimitiveType { override supertypes: list[IntegerType] }

record LongType extends PrimitiveType { override supertypes: list[LongType] }

record DoubleType extends PrimitiveType { override supertypes: list[DoubleType] }

record BooleanType extends PrimitiveType { override supertypes: list[BooleanType] }
