{
  parserClass="io.epigraph.idl.parser.IdlParser"

  elementTypeHolderClass="io.epigraph.idl.lexer.IdlElementTypes"
  elementTypePrefix="I_"
  elementTypeClass="io.epigraph.idl.lexer.IdlElementType"
  tokenTypeClass="io.epigraph.idl.lexer.IdlElementType"

  psiClassPrefix="Idl"
  psiImplClassSuffix="Impl"
  psiPackage="io.epigraph.idl.parser.psi"
  psiImplPackage="io.epigraph.idl.parser.psi.impl"
  psiImplUtilClass="io.epigraph.idl.parser.psi.impl.IdlPsiImplUtil"

  generateTokenAccessors=true

  tokens=[
    NAMESPACE = 'namespace'
    IMPORT = 'import'
    FORBIDDEN = 'forbidden'
    REQURIED = 'required'
    PARAMETERS = 'parameters'
    DEFAULT = 'default'
//    PRIMITIVE = 'primitive'
//    ENUM = 'enum'

    COLON = ':'
    DOT = '.'
    COMMA = ','
    EQ = '='
    CURLY_LEFT = '{'
    CURLY_RIGHT = '}'
    BRACKET_LEFT = '['
    BRACKET_RIGHT = ']'
    TILDA = '~'
    STAR = '*'
    PLUS = '+'
    AT = '@'

    space='regexp:\s+'
    comment='regexp://.*'
    block_comment='regexp:/\*((?<!\*/)(.|\n))*'

    id = 'regexp:(\p{Alpha}\p{Alnum}*)|(`([^`]*)`)'

    // for data lang
    NULL = 'null'
    SLASH = '/'
    PAREN_LEFT = '('
    PAREN_RIGHT = ')'
    ANGLE_LEFT = '<'
    ANGLE_RIGHT = '>'

    number="regexp:([0-9])+"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    boolean="regexp:true|false"
  ]

  pin(".*Body") = 1
}

// TODO proper root
root ::= namespaceDecl imports opOutputVarProjection

// either quoted or unquoted id
qid ::= id {
//   methods=[getName setName getCanonicalName]
   methods=[getName getCanonicalName]
}

imports ::= importStatement*
importStatement ::= 'import' fqn {pin=1 recoverWhile="importRecover"}

namespaceDecl ::= 'namespace' fqn namespaceBody? {
//  methods=[getFqn2 toString]
//  stubClass="io.epigraph.schema.parser.psi.stubs.SchemaNamespaceDeclStub"
//  elementTypeClass="io.epigraph.schema.parser.psi.stubs.SchemaNamespaceDeclStubElementType"
  pin=1
  recoverWhile="namespaceDeclRecover"
}

private namespaceBody ::= '{' namespaceBodyPart* '}'
private namespaceBodyPart ::= customParam // | ...

fqnSegment ::= qid {
//  implements="com.intellij.psi.PsiNameIdentifierOwner"
//  methods=[getName setName getNameIdentifier getSchemaFqn getSchemaFqnTypeRef isLast getReference getFqn]
}
fqn ::= fqnSegment ('.' fqnSegment)* {
  methods=[getFqn]
}

fqnTypeRef ::= fqn {
  name="type"
//  methods=[resolve] extends="typeRef"
}

//varTagRef ::= qid {
//  implements="com.intellij.psi.PsiNameIdentifierOwner"
////  methods=[setName getNameIdentifier getReference]
//}

customParam ::= qid '=' dataValue {
  name="custom attribute"
//  implements="com.intellij.psi.PsiNamedElement"
//  methods = [getName setName getNameIdentifier]
  pin = 2
}

private namespaceDeclRecover ::= ! ('import' | 'namespace' )
private importRecover ::= namespaceDeclRecover

// ------------- op projections -------------

opParameters ::= 'parameters' ':' '{' (opParam ','?)* '}'
opParam ::= '+'? qid ':' fqnTypeRef opInputModelProjection

// output

opOutputVarProjection ::= ( opOutputMultiTagProjection | opOutputSingleTagProjection ) opOutputVarPolymorphicTail?
opOutputSingleTagProjection ::= ( ':' '+'? qid )? opOutputModelProjection
opOutputMultiTagProjection ::= ':' '(' (opOutputMultiTagProjectionItem ','?)* ')' {pin=2}
opOutputMultiTagProjectionItem ::= '+'? qid opOutputModelProjection
//
opOutputVarPolymorphicTail ::= opOutputVarSingleTail | opOutputVarMultiTail
opOutputVarSingleTail ::= '~' fqnTypeRef opOutputVarProjection
opOutputVarMultiTail ::= '~' '(' (opOutputVarMultiTailItem ','?)* ')' {pin=2}
opOutputVarMultiTailItem ::= fqnTypeRef opOutputVarProjection

opOutputModelProjection ::= ( opOutputRecordModelProjection
                            | opOutputListModelProjection
                            | opOutputMapModelProjection
//                          | opOutputEnumModelProjection
//                          | opOutputPrimitiveModelProjection
                            )? opOutputModelProjectionBody?

opOutputModelProjectionBody ::= '{' (opOutputModelProjectionBodyPart ','?)* '}'
opOutputModelProjectionBodyPart ::= opParameters | customParam

// op output record
opOutputRecordModelProjection ::= '(' (opOutputFieldProjection ','?)* ')' { pin=1 }
opOutputFieldProjection ::= '+'? qid opOutputFieldProjectionBody? opOutputVarProjection?
opOutputFieldProjectionBody ::= '{' (opOutputFieldProjectionBodyPart ','?)* '}'
opOutputFieldProjectionBodyPart ::= opParameters | customParam

// files : Files default FileList *(..) ~FileList2(..)
// op output list
opOutputListModelProjection ::= '*' '(' opOutputVarProjection ')' { pin=1 }

opOutputMapModelProjection ::= opOutputKeyProjection '*' '(' opOutputVarProjection ')' { pin=1 }
opOutputKeyProjection ::= '[' (opOutputKeyProjectionPart ','?)* ']' {pin=1}
opOutputKeyProjectionPart ::= 'forbidden' | 'required' | opParameters | customParam

//opOutputPrimitiveModelProjection ::= 'primitive' // ?
//opOutputEnumModelProjection ::= 'enum' // ?

// input

opInputVarProjection ::= ( opInputMultiTagProjection | opInputSingleTagProjection ) opInputVarPolymorphicTail?
opInputSingleTagProjection ::= ( ':' '+'? qid )? opInputModelProjection
opInputMultiTagProjection ::= ':' '(' (opInputMultiTagProjectionItem ','?)* ')' {pin=2}
opInputMultiTagProjectionItem ::= '+'? qid opInputModelProjection
//
opInputVarPolymorphicTail ::= opInputVarSingleTail | opInputVarMultiTail
opInputVarSingleTail ::= '~' fqnTypeRef opInputVarProjection
opInputVarMultiTail ::= '~' '(' (opInputVarMultiTailItem ','?)* ')' {pin=2}
opInputVarMultiTailItem ::= fqnTypeRef opInputVarProjection

opInputModelProjection ::= ( opInputRecordModelProjection
                           | opInputListModelProjection
                           | opInputMapModelProjection
//                         | opInputEnumModelProjection
//                         | opInputPrimitiveModelProjection
                           )? opInputModelProjectionBody?

opInputModelProjectionBody ::= '{' (opInputModelProjectionBodyPart ','?)* '}'
opInputModelProjectionBodyPart ::= customParam | opInputDefaultValue
opInputDefaultValue ::= 'default' ':' varValue {pin=1}

// op input record
opInputRecordModelProjection ::= '(' (opInputFieldProjection ','?)* ')' { pin=1 }
opInputFieldProjection ::= '+'? qid opInputFieldProjectionBody? opInputVarProjection?
opInputFieldProjectionBody ::= '{' (opInputFieldProjectionBodyPart ','?)* '}'
opInputFieldProjectionBodyPart ::= customParam

// files : Files default FileList *(..) ~FileList2(..)
// op input list
opInputListModelProjection ::= '*' '(' opInputVarProjection ')' { pin=1 }

opInputMapModelProjection ::= opInputKeyProjection '*' '(' opInputVarProjection ')' { pin=1 }
opInputKeyProjection ::= '[' (opInputKeyProjectionPart ','?)* ']' {pin=1}
opInputKeyProjectionPart ::= 'forbidden' | 'required' | customParam

//opOutputPrimitiveModelProjection ::= 'primitive' // ?
//opOutputEnumModelProjection ::= 'enum' // ?

// ------------- data language -------------

dataValue ::= dataVar | varValue
private dataTypeSpec ::= fqnTypeRef

dataVar ::= dataTypeSpec? '<' dataVarEntry* '>' {pin=2}
dataVarEntry ::= qid ':' varValue ','? {pin=2 recoverWhile=dataValueRecover}

varValue ::= dataRecord | dataMap | dataList | dataPrimitive | dataEnum | dataNull

dataRecord ::= dataTypeSpec? '{' dataRecordEntry* '}' {pin=2 extends=varValue}
dataRecordEntry ::= qid ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

dataMap ::= dataTypeSpec? '(' dataMapEntry* ')' {pin=2 extends=varValue}
dataMapEntry ::= varValue ':' dataValue ','? {pin=2 recoverWhile=dataValueRecover}

dataList ::= dataTypeSpec? '[' (dataValue ','?)* ']' {pin=2 extends=varValue}

dataPrimitive ::= (dataTypeSpec '@')? (string | number | boolean) {extends=varValue}

dataEnum ::= qid {extends=varValue}

dataNull ::= dataSpeccedNull | dataUnspeccedNull {extends=varValue}
private dataSpeccedNull ::= dataTypeSpec '(' dataUnspeccedNull ')'
private dataUnspeccedNull ::= 'null'

private dataValueRecover ::= ! ( qid | dataPrimitive | '}' | ')' | '>' | ']' | ',' )
